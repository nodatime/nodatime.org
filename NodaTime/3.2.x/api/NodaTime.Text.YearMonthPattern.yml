### YamlMime:ManagedReference
items:
- uid: NodaTime.Text.YearMonthPattern
  commentId: T:NodaTime.Text.YearMonthPattern
  id: YearMonthPattern
  parent: NodaTime.Text
  children:
  - NodaTime.Text.YearMonthPattern.AppendFormat(NodaTime.YearMonth,System.Text.StringBuilder)
  - NodaTime.Text.YearMonthPattern.Create(System.String,System.Globalization.CultureInfo)
  - NodaTime.Text.YearMonthPattern.Create(System.String,System.Globalization.CultureInfo,NodaTime.YearMonth)
  - NodaTime.Text.YearMonthPattern.CreateWithCurrentCulture(System.String)
  - NodaTime.Text.YearMonthPattern.CreateWithInvariantCulture(System.String)
  - NodaTime.Text.YearMonthPattern.Format(NodaTime.YearMonth)
  - NodaTime.Text.YearMonthPattern.Iso
  - NodaTime.Text.YearMonthPattern.Parse(System.String)
  - NodaTime.Text.YearMonthPattern.PatternText
  - NodaTime.Text.YearMonthPattern.TemplateValue
  - NodaTime.Text.YearMonthPattern.TwoDigitYearMax
  - NodaTime.Text.YearMonthPattern.WithCulture(System.Globalization.CultureInfo)
  - NodaTime.Text.YearMonthPattern.WithTemplateValue(NodaTime.YearMonth)
  - NodaTime.Text.YearMonthPattern.WithTwoDigitYearMax(System.Int32)
  langs:
  - csharp
  - vb
  name: YearMonthPattern
  nameWithType: YearMonthPattern
  fullName: NodaTime.Text.YearMonthPattern
  type: Class
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: Represents a pattern for parsing and formatting <xref href="NodaTime.YearMonth" data-throw-if-not-resolved="false"></xref> values.
  example: []
  syntax:
    content: 'public class YearMonthPattern : IPattern<YearMonth>'
    content.vb: Public Class YearMonthPattern Implements IPattern(Of YearMonth)
  inheritance:
  - System.Object
  implements:
  - NodaTime.Text.IPattern{NodaTime.YearMonth}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: NodaTime.Text.YearMonthPattern.Iso
  commentId: P:NodaTime.Text.YearMonthPattern.Iso
  id: Iso
  parent: NodaTime.Text.YearMonthPattern
  langs:
  - csharp
  - vb
  name: Iso
  nameWithType: YearMonthPattern.Iso
  fullName: NodaTime.Text.YearMonthPattern.Iso
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: >-
    Gets an invariant year/month pattern which is ISO-8601 compatible.

    This corresponds to the text pattern "uuuu'-'MM".
  remarks: This pattern corresponds to the 'g' standard pattern.
  example: []
  syntax:
    content: public static YearMonthPattern Iso { get; }
    parameters: []
    return:
      type: NodaTime.Text.YearMonthPattern
      description: An invariant year/month pattern which is ISO-8601 compatible.
    content.vb: Public Shared ReadOnly Property Iso As YearMonthPattern
  overload: NodaTime.Text.YearMonthPattern.Iso*
- uid: NodaTime.Text.YearMonthPattern.PatternText
  commentId: P:NodaTime.Text.YearMonthPattern.PatternText
  id: PatternText
  parent: NodaTime.Text.YearMonthPattern
  langs:
  - csharp
  - vb
  name: PatternText
  nameWithType: YearMonthPattern.PatternText
  fullName: NodaTime.Text.YearMonthPattern.PatternText
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: Gets the pattern text for this pattern, as supplied on creation.
  example: []
  syntax:
    content: public string PatternText { get; }
    parameters: []
    return:
      type: System.String
      description: The pattern text for this pattern, as supplied on creation.
    content.vb: Public ReadOnly Property PatternText As String
  overload: NodaTime.Text.YearMonthPattern.PatternText*
- uid: NodaTime.Text.YearMonthPattern.TemplateValue
  commentId: P:NodaTime.Text.YearMonthPattern.TemplateValue
  id: TemplateValue
  parent: NodaTime.Text.YearMonthPattern
  langs:
  - csharp
  - vb
  name: TemplateValue
  nameWithType: YearMonthPattern.TemplateValue
  fullName: NodaTime.Text.YearMonthPattern.TemplateValue
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: >-
    Gets the value used as a template for parsing: any field values unspecified

    in the pattern are taken from the template.
  example: []
  syntax:
    content: public YearMonth TemplateValue { get; }
    parameters: []
    return:
      type: NodaTime.YearMonth
      description: The value used as a template for parsing.
    content.vb: Public ReadOnly Property TemplateValue As YearMonth
  overload: NodaTime.Text.YearMonthPattern.TemplateValue*
- uid: NodaTime.Text.YearMonthPattern.TwoDigitYearMax
  commentId: P:NodaTime.Text.YearMonthPattern.TwoDigitYearMax
  id: TwoDigitYearMax
  parent: NodaTime.Text.YearMonthPattern
  langs:
  - csharp
  - vb
  name: TwoDigitYearMax
  nameWithType: YearMonthPattern.TwoDigitYearMax
  fullName: NodaTime.Text.YearMonthPattern.TwoDigitYearMax
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: >-
    Maximum two-digit-year in the template to treat as the current century.

    If the value parsed is higher than this, the result is adjusted to the previous century.

    This value defaults to 30. To create a pattern with a different value, use <xref href="NodaTime.Text.YearMonthPattern.WithTwoDigitYearMax(System.Int32)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public int TwoDigitYearMax { get; }
    parameters: []
    return:
      type: System.Int32
      description: The value used for the maximum two-digit-year, in the range 0-99 inclusive.
    content.vb: Public ReadOnly Property TwoDigitYearMax As Integer
  overload: NodaTime.Text.YearMonthPattern.TwoDigitYearMax*
- uid: NodaTime.Text.YearMonthPattern.Parse(System.String)
  commentId: M:NodaTime.Text.YearMonthPattern.Parse(System.String)
  id: Parse(System.String)
  parent: NodaTime.Text.YearMonthPattern
  langs:
  - csharp
  - vb
  name: Parse(string)
  nameWithType: YearMonthPattern.Parse(string)
  fullName: NodaTime.Text.YearMonthPattern.Parse(string)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: Parses the given text value according to the rules of this pattern.
  remarks: >-
    This method never throws an exception (barring a bug in Noda Time itself). Even errors such as

    the argument being null are wrapped in a parse result.
  example: []
  syntax:
    content: public ParseResult<YearMonth> Parse(string text)
    parameters:
    - id: text
      type: System.String
      description: The text value to parse.
    return:
      type: NodaTime.Text.ParseResult{NodaTime.YearMonth}
      description: The result of parsing, which may be successful or unsuccessful.
    content.vb: Public Function Parse(text As String) As ParseResult(Of YearMonth)
  overload: NodaTime.Text.YearMonthPattern.Parse*
  implements:
  - NodaTime.Text.IPattern{NodaTime.YearMonth}.Parse(System.String)
  nameWithType.vb: YearMonthPattern.Parse(String)
  fullName.vb: NodaTime.Text.YearMonthPattern.Parse(String)
  name.vb: Parse(String)
- uid: NodaTime.Text.YearMonthPattern.Format(NodaTime.YearMonth)
  commentId: M:NodaTime.Text.YearMonthPattern.Format(NodaTime.YearMonth)
  id: Format(NodaTime.YearMonth)
  parent: NodaTime.Text.YearMonthPattern
  langs:
  - csharp
  - vb
  name: Format(YearMonth)
  nameWithType: YearMonthPattern.Format(YearMonth)
  fullName: NodaTime.Text.YearMonthPattern.Format(NodaTime.YearMonth)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: Formats the given year/month as text according to the rules of this pattern.
  example: []
  syntax:
    content: public string Format(YearMonth value)
    parameters:
    - id: value
      type: NodaTime.YearMonth
      description: The value to format.
    return:
      type: System.String
      description: The year/month formatted according to this pattern.
    content.vb: Public Function Format(value As YearMonth) As String
  overload: NodaTime.Text.YearMonthPattern.Format*
  implements:
  - NodaTime.Text.IPattern{NodaTime.YearMonth}.Format(NodaTime.YearMonth)
- uid: NodaTime.Text.YearMonthPattern.AppendFormat(NodaTime.YearMonth,System.Text.StringBuilder)
  commentId: M:NodaTime.Text.YearMonthPattern.AppendFormat(NodaTime.YearMonth,System.Text.StringBuilder)
  id: AppendFormat(NodaTime.YearMonth,System.Text.StringBuilder)
  parent: NodaTime.Text.YearMonthPattern
  langs:
  - csharp
  - vb
  name: AppendFormat(YearMonth, StringBuilder)
  nameWithType: YearMonthPattern.AppendFormat(YearMonth, StringBuilder)
  fullName: NodaTime.Text.YearMonthPattern.AppendFormat(NodaTime.YearMonth, System.Text.StringBuilder)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: >-
    Formats the given value as text according to the rules of this pattern,

    appending to the given <xref href="System.Text.StringBuilder" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public StringBuilder AppendFormat(YearMonth value, StringBuilder builder)
    parameters:
    - id: value
      type: NodaTime.YearMonth
      description: The value to format.
    - id: builder
      type: System.Text.StringBuilder
      description: The <code>StringBuilder</code> to append to.
    return:
      type: System.Text.StringBuilder
      description: The builder passed in as <code class="paramref">builder</code>.
    content.vb: Public Function AppendFormat(value As YearMonth, builder As StringBuilder) As StringBuilder
  overload: NodaTime.Text.YearMonthPattern.AppendFormat*
  implements:
  - NodaTime.Text.IPattern{NodaTime.YearMonth}.AppendFormat(NodaTime.YearMonth,System.Text.StringBuilder)
- uid: NodaTime.Text.YearMonthPattern.Create(System.String,System.Globalization.CultureInfo,NodaTime.YearMonth)
  commentId: M:NodaTime.Text.YearMonthPattern.Create(System.String,System.Globalization.CultureInfo,NodaTime.YearMonth)
  id: Create(System.String,System.Globalization.CultureInfo,NodaTime.YearMonth)
  parent: NodaTime.Text.YearMonthPattern
  langs:
  - csharp
  - vb
  name: Create(string, CultureInfo, YearMonth)
  nameWithType: YearMonthPattern.Create(string, CultureInfo, YearMonth)
  fullName: NodaTime.Text.YearMonthPattern.Create(string, System.Globalization.CultureInfo, NodaTime.YearMonth)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: Creates a pattern for the given pattern text, culture, and template value.
  remarks: See the user guide for the available pattern text options.
  example: []
  syntax:
    content: public static YearMonthPattern Create(string patternText, CultureInfo cultureInfo, YearMonth templateValue)
    parameters:
    - id: patternText
      type: System.String
      description: Pattern text to create the pattern for
    - id: cultureInfo
      type: System.Globalization.CultureInfo
      description: The culture to use in the pattern
    - id: templateValue
      type: NodaTime.YearMonth
      description: Template value to use for unspecified fields
    return:
      type: NodaTime.Text.YearMonthPattern
      description: A pattern for parsing and formatting year/months.
    content.vb: Public Shared Function Create(patternText As String, cultureInfo As CultureInfo, templateValue As YearMonth) As YearMonthPattern
  overload: NodaTime.Text.YearMonthPattern.Create*
  exceptions:
  - type: NodaTime.Text.InvalidPatternException
    commentId: T:NodaTime.Text.InvalidPatternException
    description: The pattern text was invalid.
  nameWithType.vb: YearMonthPattern.Create(String, CultureInfo, YearMonth)
  fullName.vb: NodaTime.Text.YearMonthPattern.Create(String, System.Globalization.CultureInfo, NodaTime.YearMonth)
  name.vb: Create(String, CultureInfo, YearMonth)
- uid: NodaTime.Text.YearMonthPattern.Create(System.String,System.Globalization.CultureInfo)
  commentId: M:NodaTime.Text.YearMonthPattern.Create(System.String,System.Globalization.CultureInfo)
  id: Create(System.String,System.Globalization.CultureInfo)
  parent: NodaTime.Text.YearMonthPattern
  langs:
  - csharp
  - vb
  name: Create(string, CultureInfo)
  nameWithType: YearMonthPattern.Create(string, CultureInfo)
  fullName: NodaTime.Text.YearMonthPattern.Create(string, System.Globalization.CultureInfo)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: Creates a pattern for the given pattern text and culture, with a template value of 2000-01.
  remarks: See the user guide for the available pattern text options.
  example: []
  syntax:
    content: public static YearMonthPattern Create(string patternText, CultureInfo cultureInfo)
    parameters:
    - id: patternText
      type: System.String
      description: Pattern text to create the pattern for
    - id: cultureInfo
      type: System.Globalization.CultureInfo
      description: The culture to use in the pattern
    return:
      type: NodaTime.Text.YearMonthPattern
      description: A pattern for parsing and formatting year/months.
    content.vb: Public Shared Function Create(patternText As String, cultureInfo As CultureInfo) As YearMonthPattern
  overload: NodaTime.Text.YearMonthPattern.Create*
  exceptions:
  - type: NodaTime.Text.InvalidPatternException
    commentId: T:NodaTime.Text.InvalidPatternException
    description: The pattern text was invalid.
  nameWithType.vb: YearMonthPattern.Create(String, CultureInfo)
  fullName.vb: NodaTime.Text.YearMonthPattern.Create(String, System.Globalization.CultureInfo)
  name.vb: Create(String, CultureInfo)
- uid: NodaTime.Text.YearMonthPattern.CreateWithCurrentCulture(System.String)
  commentId: M:NodaTime.Text.YearMonthPattern.CreateWithCurrentCulture(System.String)
  id: CreateWithCurrentCulture(System.String)
  parent: NodaTime.Text.YearMonthPattern
  langs:
  - csharp
  - vb
  name: CreateWithCurrentCulture(string)
  nameWithType: YearMonthPattern.CreateWithCurrentCulture(string)
  fullName: NodaTime.Text.YearMonthPattern.CreateWithCurrentCulture(string)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: Creates a pattern for the given pattern text in the current thread's current culture.
  remarks: >-
    See the user guide for the available pattern text options. Note that the current culture

    is captured at the time this method is called - it is not captured at the point of parsing

    or formatting values.
  example: []
  syntax:
    content: public static YearMonthPattern CreateWithCurrentCulture(string patternText)
    parameters:
    - id: patternText
      type: System.String
      description: Pattern text to create the pattern for
    return:
      type: NodaTime.Text.YearMonthPattern
      description: A pattern for parsing and formatting year/month values.
    content.vb: Public Shared Function CreateWithCurrentCulture(patternText As String) As YearMonthPattern
  overload: NodaTime.Text.YearMonthPattern.CreateWithCurrentCulture*
  exceptions:
  - type: NodaTime.Text.InvalidPatternException
    commentId: T:NodaTime.Text.InvalidPatternException
    description: The pattern text was invalid.
  nameWithType.vb: YearMonthPattern.CreateWithCurrentCulture(String)
  fullName.vb: NodaTime.Text.YearMonthPattern.CreateWithCurrentCulture(String)
  name.vb: CreateWithCurrentCulture(String)
- uid: NodaTime.Text.YearMonthPattern.CreateWithInvariantCulture(System.String)
  commentId: M:NodaTime.Text.YearMonthPattern.CreateWithInvariantCulture(System.String)
  id: CreateWithInvariantCulture(System.String)
  parent: NodaTime.Text.YearMonthPattern
  langs:
  - csharp
  - vb
  name: CreateWithInvariantCulture(string)
  nameWithType: YearMonthPattern.CreateWithInvariantCulture(string)
  fullName: NodaTime.Text.YearMonthPattern.CreateWithInvariantCulture(string)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: Creates a pattern for the given pattern text in the invariant culture.
  remarks: See the user guide for the available pattern text options.
  example: []
  syntax:
    content: public static YearMonthPattern CreateWithInvariantCulture(string patternText)
    parameters:
    - id: patternText
      type: System.String
      description: Pattern text to create the pattern for
    return:
      type: NodaTime.Text.YearMonthPattern
      description: A pattern for parsing and formatting year/month values.
    content.vb: Public Shared Function CreateWithInvariantCulture(patternText As String) As YearMonthPattern
  overload: NodaTime.Text.YearMonthPattern.CreateWithInvariantCulture*
  exceptions:
  - type: NodaTime.Text.InvalidPatternException
    commentId: T:NodaTime.Text.InvalidPatternException
    description: The pattern text was invalid.
  nameWithType.vb: YearMonthPattern.CreateWithInvariantCulture(String)
  fullName.vb: NodaTime.Text.YearMonthPattern.CreateWithInvariantCulture(String)
  name.vb: CreateWithInvariantCulture(String)
- uid: NodaTime.Text.YearMonthPattern.WithCulture(System.Globalization.CultureInfo)
  commentId: M:NodaTime.Text.YearMonthPattern.WithCulture(System.Globalization.CultureInfo)
  id: WithCulture(System.Globalization.CultureInfo)
  parent: NodaTime.Text.YearMonthPattern
  langs:
  - csharp
  - vb
  name: WithCulture(CultureInfo)
  nameWithType: YearMonthPattern.WithCulture(CultureInfo)
  fullName: NodaTime.Text.YearMonthPattern.WithCulture(System.Globalization.CultureInfo)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: >-
    Creates a pattern for the same original pattern text as this pattern, but with the specified

    culture.
  example: []
  syntax:
    content: public YearMonthPattern WithCulture(CultureInfo cultureInfo)
    parameters:
    - id: cultureInfo
      type: System.Globalization.CultureInfo
      description: The culture to use in the new pattern.
    return:
      type: NodaTime.Text.YearMonthPattern
      description: A new pattern with the given culture.
    content.vb: Public Function WithCulture(cultureInfo As CultureInfo) As YearMonthPattern
  overload: NodaTime.Text.YearMonthPattern.WithCulture*
- uid: NodaTime.Text.YearMonthPattern.WithTemplateValue(NodaTime.YearMonth)
  commentId: M:NodaTime.Text.YearMonthPattern.WithTemplateValue(NodaTime.YearMonth)
  id: WithTemplateValue(NodaTime.YearMonth)
  parent: NodaTime.Text.YearMonthPattern
  langs:
  - csharp
  - vb
  name: WithTemplateValue(YearMonth)
  nameWithType: YearMonthPattern.WithTemplateValue(YearMonth)
  fullName: NodaTime.Text.YearMonthPattern.WithTemplateValue(NodaTime.YearMonth)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: Creates a pattern like this one, but with the specified template value.
  example: []
  syntax:
    content: public YearMonthPattern WithTemplateValue(YearMonth newTemplateValue)
    parameters:
    - id: newTemplateValue
      type: NodaTime.YearMonth
      description: The template value for the new pattern, used to fill in unspecified fields.
    return:
      type: NodaTime.Text.YearMonthPattern
      description: A new pattern with the given template value.
    content.vb: Public Function WithTemplateValue(newTemplateValue As YearMonth) As YearMonthPattern
  overload: NodaTime.Text.YearMonthPattern.WithTemplateValue*
- uid: NodaTime.Text.YearMonthPattern.WithTwoDigitYearMax(System.Int32)
  commentId: M:NodaTime.Text.YearMonthPattern.WithTwoDigitYearMax(System.Int32)
  id: WithTwoDigitYearMax(System.Int32)
  parent: NodaTime.Text.YearMonthPattern
  langs:
  - csharp
  - vb
  name: WithTwoDigitYearMax(int)
  nameWithType: YearMonthPattern.WithTwoDigitYearMax(int)
  fullName: NodaTime.Text.YearMonthPattern.WithTwoDigitYearMax(int)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: Creates a pattern like this one, but with a different <xref href="NodaTime.Text.YearMonthPattern.TwoDigitYearMax" data-throw-if-not-resolved="false"></xref> value.
  example: []
  syntax:
    content: public YearMonthPattern WithTwoDigitYearMax(int twoDigitYearMax)
    parameters:
    - id: twoDigitYearMax
      type: System.Int32
      description: The value to use for <xref href="NodaTime.Text.YearMonthPattern.TwoDigitYearMax" data-throw-if-not-resolved="false"></xref> in the new pattern, in the range 0-99 inclusive.
    return:
      type: NodaTime.Text.YearMonthPattern
      description: A new pattern with the specified maximum two-digit-year.
    content.vb: Public Function WithTwoDigitYearMax(twoDigitYearMax As Integer) As YearMonthPattern
  overload: NodaTime.Text.YearMonthPattern.WithTwoDigitYearMax*
  nameWithType.vb: YearMonthPattern.WithTwoDigitYearMax(Integer)
  fullName.vb: NodaTime.Text.YearMonthPattern.WithTwoDigitYearMax(Integer)
  name.vb: WithTwoDigitYearMax(Integer)
references:
- uid: NodaTime.YearMonth
  commentId: T:NodaTime.YearMonth
  parent: NodaTime
  href: NodaTime.YearMonth.html
  name: YearMonth
  nameWithType: YearMonth
  fullName: NodaTime.YearMonth
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.globalization.cultureinfo
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: NodaTime.Text
  commentId: N:NodaTime.Text
  href: NodaTime.html
  name: NodaTime.Text
  nameWithType: NodaTime.Text
  fullName: NodaTime.Text
  spec.csharp:
  - uid: NodaTime
    name: NodaTime
    href: NodaTime.html
  - name: .
  - uid: NodaTime.Text
    name: Text
    href: NodaTime.Text.html
  spec.vb:
  - uid: NodaTime
    name: NodaTime
    href: NodaTime.html
  - name: .
  - uid: NodaTime.Text
    name: Text
    href: NodaTime.Text.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: NodaTime.Text.IPattern{NodaTime.YearMonth}
  commentId: T:NodaTime.Text.IPattern{NodaTime.YearMonth}
  parent: NodaTime.Text
  definition: NodaTime.Text.IPattern`1
  href: NodaTime.Text.IPattern-1.html
  name: IPattern<YearMonth>
  nameWithType: IPattern<YearMonth>
  fullName: NodaTime.Text.IPattern<NodaTime.YearMonth>
  nameWithType.vb: IPattern(Of YearMonth)
  fullName.vb: NodaTime.Text.IPattern(Of NodaTime.YearMonth)
  name.vb: IPattern(Of YearMonth)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    href: NodaTime.Text.IPattern-1.html
  - name: <
  - uid: NodaTime.YearMonth
    name: YearMonth
    href: NodaTime.YearMonth.html
  - name: '>'
  spec.vb:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    href: NodaTime.Text.IPattern-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: NodaTime.YearMonth
    name: YearMonth
    href: NodaTime.YearMonth.html
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: NodaTime
  commentId: N:NodaTime
  href: NodaTime.html
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Globalization
    name: Globalization
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.globalization
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Globalization
    name: Globalization
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.globalization
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: NodaTime.Text.IPattern`1
  commentId: T:NodaTime.Text.IPattern`1
  href: NodaTime.Text.IPattern-1.html
  name: IPattern<T>
  nameWithType: IPattern<T>
  fullName: NodaTime.Text.IPattern<T>
  nameWithType.vb: IPattern(Of T)
  fullName.vb: NodaTime.Text.IPattern(Of T)
  name.vb: IPattern(Of T)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    href: NodaTime.Text.IPattern-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    href: NodaTime.Text.IPattern-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NodaTime.Text.YearMonthPattern.Iso*
  commentId: Overload:NodaTime.Text.YearMonthPattern.Iso
  href: NodaTime.Text.YearMonthPattern.html#NodaTime_Text_YearMonthPattern_Iso
  name: Iso
  nameWithType: YearMonthPattern.Iso
  fullName: NodaTime.Text.YearMonthPattern.Iso
- uid: NodaTime.Text.YearMonthPattern
  commentId: T:NodaTime.Text.YearMonthPattern
  parent: NodaTime.Text
  href: NodaTime.Text.YearMonthPattern.html
  name: YearMonthPattern
  nameWithType: YearMonthPattern
  fullName: NodaTime.Text.YearMonthPattern
- uid: NodaTime.Text.YearMonthPattern.PatternText*
  commentId: Overload:NodaTime.Text.YearMonthPattern.PatternText
  href: NodaTime.Text.YearMonthPattern.html#NodaTime_Text_YearMonthPattern_PatternText
  name: PatternText
  nameWithType: YearMonthPattern.PatternText
  fullName: NodaTime.Text.YearMonthPattern.PatternText
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: NodaTime.Text.YearMonthPattern.TemplateValue*
  commentId: Overload:NodaTime.Text.YearMonthPattern.TemplateValue
  href: NodaTime.Text.YearMonthPattern.html#NodaTime_Text_YearMonthPattern_TemplateValue
  name: TemplateValue
  nameWithType: YearMonthPattern.TemplateValue
  fullName: NodaTime.Text.YearMonthPattern.TemplateValue
- uid: NodaTime.Text.YearMonthPattern.WithTwoDigitYearMax(System.Int32)
  commentId: M:NodaTime.Text.YearMonthPattern.WithTwoDigitYearMax(System.Int32)
  isExternal: true
  href: NodaTime.Text.YearMonthPattern.html#NodaTime_Text_YearMonthPattern_WithTwoDigitYearMax_System_Int32_
  name: WithTwoDigitYearMax(int)
  nameWithType: YearMonthPattern.WithTwoDigitYearMax(int)
  fullName: NodaTime.Text.YearMonthPattern.WithTwoDigitYearMax(int)
  nameWithType.vb: YearMonthPattern.WithTwoDigitYearMax(Integer)
  fullName.vb: NodaTime.Text.YearMonthPattern.WithTwoDigitYearMax(Integer)
  name.vb: WithTwoDigitYearMax(Integer)
  spec.csharp:
  - uid: NodaTime.Text.YearMonthPattern.WithTwoDigitYearMax(System.Int32)
    name: WithTwoDigitYearMax
    href: NodaTime.Text.YearMonthPattern.html#NodaTime_Text_YearMonthPattern_WithTwoDigitYearMax_System_Int32_
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: NodaTime.Text.YearMonthPattern.WithTwoDigitYearMax(System.Int32)
    name: WithTwoDigitYearMax
    href: NodaTime.Text.YearMonthPattern.html#NodaTime_Text_YearMonthPattern_WithTwoDigitYearMax_System_Int32_
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: NodaTime.Text.YearMonthPattern.TwoDigitYearMax*
  commentId: Overload:NodaTime.Text.YearMonthPattern.TwoDigitYearMax
  href: NodaTime.Text.YearMonthPattern.html#NodaTime_Text_YearMonthPattern_TwoDigitYearMax
  name: TwoDigitYearMax
  nameWithType: YearMonthPattern.TwoDigitYearMax
  fullName: NodaTime.Text.YearMonthPattern.TwoDigitYearMax
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: NodaTime.Text.YearMonthPattern.Parse*
  commentId: Overload:NodaTime.Text.YearMonthPattern.Parse
  href: NodaTime.Text.YearMonthPattern.html#NodaTime_Text_YearMonthPattern_Parse_System_String_
  name: Parse
  nameWithType: YearMonthPattern.Parse
  fullName: NodaTime.Text.YearMonthPattern.Parse
- uid: NodaTime.Text.IPattern{NodaTime.YearMonth}.Parse(System.String)
  commentId: M:NodaTime.Text.IPattern{NodaTime.YearMonth}.Parse(System.String)
  parent: NodaTime.Text.IPattern{NodaTime.YearMonth}
  definition: NodaTime.Text.IPattern`1.Parse(System.String)
  href: NodaTime.Text.IPattern-1.html#NodaTime_Text_IPattern_1_Parse_System_String_
  name: Parse(string)
  nameWithType: IPattern<YearMonth>.Parse(string)
  fullName: NodaTime.Text.IPattern<NodaTime.YearMonth>.Parse(string)
  nameWithType.vb: IPattern(Of YearMonth).Parse(String)
  fullName.vb: NodaTime.Text.IPattern(Of NodaTime.YearMonth).Parse(String)
  name.vb: Parse(String)
  spec.csharp:
  - uid: NodaTime.Text.IPattern{NodaTime.YearMonth}.Parse(System.String)
    name: Parse
    href: NodaTime.Text.IPattern-1.html#NodaTime_Text_IPattern_1_Parse_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: NodaTime.Text.IPattern{NodaTime.YearMonth}.Parse(System.String)
    name: Parse
    href: NodaTime.Text.IPattern-1.html#NodaTime_Text_IPattern_1_Parse_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: NodaTime.Text.ParseResult{NodaTime.YearMonth}
  commentId: T:NodaTime.Text.ParseResult{NodaTime.YearMonth}
  parent: NodaTime.Text
  definition: NodaTime.Text.ParseResult`1
  href: NodaTime.Text.ParseResult-1.html
  name: ParseResult<YearMonth>
  nameWithType: ParseResult<YearMonth>
  fullName: NodaTime.Text.ParseResult<NodaTime.YearMonth>
  nameWithType.vb: ParseResult(Of YearMonth)
  fullName.vb: NodaTime.Text.ParseResult(Of NodaTime.YearMonth)
  name.vb: ParseResult(Of YearMonth)
  spec.csharp:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    href: NodaTime.Text.ParseResult-1.html
  - name: <
  - uid: NodaTime.YearMonth
    name: YearMonth
    href: NodaTime.YearMonth.html
  - name: '>'
  spec.vb:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    href: NodaTime.Text.ParseResult-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: NodaTime.YearMonth
    name: YearMonth
    href: NodaTime.YearMonth.html
  - name: )
- uid: NodaTime.Text.IPattern`1.Parse(System.String)
  commentId: M:NodaTime.Text.IPattern`1.Parse(System.String)
  isExternal: true
  href: NodaTime.Text.IPattern-1.html#NodaTime_Text_IPattern_1_Parse_System_String_
  name: Parse(string)
  nameWithType: IPattern<T>.Parse(string)
  fullName: NodaTime.Text.IPattern<T>.Parse(string)
  nameWithType.vb: IPattern(Of T).Parse(String)
  fullName.vb: NodaTime.Text.IPattern(Of T).Parse(String)
  name.vb: Parse(String)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1.Parse(System.String)
    name: Parse
    href: NodaTime.Text.IPattern-1.html#NodaTime_Text_IPattern_1_Parse_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: NodaTime.Text.IPattern`1.Parse(System.String)
    name: Parse
    href: NodaTime.Text.IPattern-1.html#NodaTime_Text_IPattern_1_Parse_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: NodaTime.Text.ParseResult`1
  commentId: T:NodaTime.Text.ParseResult`1
  parent: NodaTime.Text
  href: NodaTime.Text.ParseResult-1.html
  name: ParseResult<T>
  nameWithType: ParseResult<T>
  fullName: NodaTime.Text.ParseResult<T>
  nameWithType.vb: ParseResult(Of T)
  fullName.vb: NodaTime.Text.ParseResult(Of T)
  name.vb: ParseResult(Of T)
  spec.csharp:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    href: NodaTime.Text.ParseResult-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    href: NodaTime.Text.ParseResult-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NodaTime.Text.YearMonthPattern.Format*
  commentId: Overload:NodaTime.Text.YearMonthPattern.Format
  href: NodaTime.Text.YearMonthPattern.html#NodaTime_Text_YearMonthPattern_Format_NodaTime_YearMonth_
  name: Format
  nameWithType: YearMonthPattern.Format
  fullName: NodaTime.Text.YearMonthPattern.Format
- uid: NodaTime.Text.IPattern{NodaTime.YearMonth}.Format(NodaTime.YearMonth)
  commentId: M:NodaTime.Text.IPattern{NodaTime.YearMonth}.Format(NodaTime.YearMonth)
  parent: NodaTime.Text.IPattern{NodaTime.YearMonth}
  definition: NodaTime.Text.IPattern`1.Format(`0)
  href: NodaTime.Text.IPattern-1.html#NodaTime_Text_IPattern_1_Format__0_
  name: Format(YearMonth)
  nameWithType: IPattern<YearMonth>.Format(YearMonth)
  fullName: NodaTime.Text.IPattern<NodaTime.YearMonth>.Format(NodaTime.YearMonth)
  nameWithType.vb: IPattern(Of YearMonth).Format(YearMonth)
  fullName.vb: NodaTime.Text.IPattern(Of NodaTime.YearMonth).Format(NodaTime.YearMonth)
  spec.csharp:
  - uid: NodaTime.Text.IPattern{NodaTime.YearMonth}.Format(NodaTime.YearMonth)
    name: Format
    href: NodaTime.Text.IPattern-1.html#NodaTime_Text_IPattern_1_Format__0_
  - name: (
  - uid: NodaTime.YearMonth
    name: YearMonth
    href: NodaTime.YearMonth.html
  - name: )
  spec.vb:
  - uid: NodaTime.Text.IPattern{NodaTime.YearMonth}.Format(NodaTime.YearMonth)
    name: Format
    href: NodaTime.Text.IPattern-1.html#NodaTime_Text_IPattern_1_Format__0_
  - name: (
  - uid: NodaTime.YearMonth
    name: YearMonth
    href: NodaTime.YearMonth.html
  - name: )
- uid: NodaTime.Text.IPattern`1.Format(`0)
  commentId: M:NodaTime.Text.IPattern`1.Format(`0)
  href: NodaTime.Text.IPattern-1.html#NodaTime_Text_IPattern_1_Format__0_
  name: Format(T)
  nameWithType: IPattern<T>.Format(T)
  fullName: NodaTime.Text.IPattern<T>.Format(T)
  nameWithType.vb: IPattern(Of T).Format(T)
  fullName.vb: NodaTime.Text.IPattern(Of T).Format(T)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1.Format(`0)
    name: Format
    href: NodaTime.Text.IPattern-1.html#NodaTime_Text_IPattern_1_Format__0_
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NodaTime.Text.IPattern`1.Format(`0)
    name: Format
    href: NodaTime.Text.IPattern-1.html#NodaTime_Text_IPattern_1_Format__0_
  - name: (
  - name: T
  - name: )
- uid: System.Text.StringBuilder
  commentId: T:System.Text.StringBuilder
  parent: System.Text
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.text.stringbuilder
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: NodaTime.Text.YearMonthPattern.AppendFormat*
  commentId: Overload:NodaTime.Text.YearMonthPattern.AppendFormat
  href: NodaTime.Text.YearMonthPattern.html#NodaTime_Text_YearMonthPattern_AppendFormat_NodaTime_YearMonth_System_Text_StringBuilder_
  name: AppendFormat
  nameWithType: YearMonthPattern.AppendFormat
  fullName: NodaTime.Text.YearMonthPattern.AppendFormat
- uid: NodaTime.Text.IPattern{NodaTime.YearMonth}.AppendFormat(NodaTime.YearMonth,System.Text.StringBuilder)
  commentId: M:NodaTime.Text.IPattern{NodaTime.YearMonth}.AppendFormat(NodaTime.YearMonth,System.Text.StringBuilder)
  parent: NodaTime.Text.IPattern{NodaTime.YearMonth}
  definition: NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
  href: NodaTime.Text.IPattern-1.html#NodaTime_Text_IPattern_1_AppendFormat__0_System_Text_StringBuilder_
  name: AppendFormat(YearMonth, StringBuilder)
  nameWithType: IPattern<YearMonth>.AppendFormat(YearMonth, StringBuilder)
  fullName: NodaTime.Text.IPattern<NodaTime.YearMonth>.AppendFormat(NodaTime.YearMonth, System.Text.StringBuilder)
  nameWithType.vb: IPattern(Of YearMonth).AppendFormat(YearMonth, StringBuilder)
  fullName.vb: NodaTime.Text.IPattern(Of NodaTime.YearMonth).AppendFormat(NodaTime.YearMonth, System.Text.StringBuilder)
  spec.csharp:
  - uid: NodaTime.Text.IPattern{NodaTime.YearMonth}.AppendFormat(NodaTime.YearMonth,System.Text.StringBuilder)
    name: AppendFormat
    href: NodaTime.Text.IPattern-1.html#NodaTime_Text_IPattern_1_AppendFormat__0_System_Text_StringBuilder_
  - name: (
  - uid: NodaTime.YearMonth
    name: YearMonth
    href: NodaTime.YearMonth.html
  - name: ','
  - name: " "
  - uid: System.Text.StringBuilder
    name: StringBuilder
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text.stringbuilder
  - name: )
  spec.vb:
  - uid: NodaTime.Text.IPattern{NodaTime.YearMonth}.AppendFormat(NodaTime.YearMonth,System.Text.StringBuilder)
    name: AppendFormat
    href: NodaTime.Text.IPattern-1.html#NodaTime_Text_IPattern_1_AppendFormat__0_System_Text_StringBuilder_
  - name: (
  - uid: NodaTime.YearMonth
    name: YearMonth
    href: NodaTime.YearMonth.html
  - name: ','
  - name: " "
  - uid: System.Text.StringBuilder
    name: StringBuilder
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text.stringbuilder
  - name: )
- uid: System.Text
  commentId: N:System.Text
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Text
    name: Text
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Text
    name: Text
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text
- uid: NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
  commentId: M:NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
  isExternal: true
  href: NodaTime.Text.IPattern-1.html#NodaTime_Text_IPattern_1_AppendFormat__0_System_Text_StringBuilder_
  name: AppendFormat(T, StringBuilder)
  nameWithType: IPattern<T>.AppendFormat(T, StringBuilder)
  fullName: NodaTime.Text.IPattern<T>.AppendFormat(T, System.Text.StringBuilder)
  nameWithType.vb: IPattern(Of T).AppendFormat(T, StringBuilder)
  fullName.vb: NodaTime.Text.IPattern(Of T).AppendFormat(T, System.Text.StringBuilder)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
    name: AppendFormat
    href: NodaTime.Text.IPattern-1.html#NodaTime_Text_IPattern_1_AppendFormat__0_System_Text_StringBuilder_
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Text.StringBuilder
    name: StringBuilder
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text.stringbuilder
  - name: )
  spec.vb:
  - uid: NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
    name: AppendFormat
    href: NodaTime.Text.IPattern-1.html#NodaTime_Text_IPattern_1_AppendFormat__0_System_Text_StringBuilder_
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Text.StringBuilder
    name: StringBuilder
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text.stringbuilder
  - name: )
- uid: NodaTime.Text.InvalidPatternException
  commentId: T:NodaTime.Text.InvalidPatternException
  href: NodaTime.Text.InvalidPatternException.html
  name: InvalidPatternException
  nameWithType: InvalidPatternException
  fullName: NodaTime.Text.InvalidPatternException
- uid: NodaTime.Text.YearMonthPattern.Create*
  commentId: Overload:NodaTime.Text.YearMonthPattern.Create
  href: NodaTime.Text.YearMonthPattern.html#NodaTime_Text_YearMonthPattern_Create_System_String_System_Globalization_CultureInfo_NodaTime_YearMonth_
  name: Create
  nameWithType: YearMonthPattern.Create
  fullName: NodaTime.Text.YearMonthPattern.Create
- uid: NodaTime.Text.YearMonthPattern.CreateWithCurrentCulture*
  commentId: Overload:NodaTime.Text.YearMonthPattern.CreateWithCurrentCulture
  href: NodaTime.Text.YearMonthPattern.html#NodaTime_Text_YearMonthPattern_CreateWithCurrentCulture_System_String_
  name: CreateWithCurrentCulture
  nameWithType: YearMonthPattern.CreateWithCurrentCulture
  fullName: NodaTime.Text.YearMonthPattern.CreateWithCurrentCulture
- uid: NodaTime.Text.YearMonthPattern.CreateWithInvariantCulture*
  commentId: Overload:NodaTime.Text.YearMonthPattern.CreateWithInvariantCulture
  href: NodaTime.Text.YearMonthPattern.html#NodaTime_Text_YearMonthPattern_CreateWithInvariantCulture_System_String_
  name: CreateWithInvariantCulture
  nameWithType: YearMonthPattern.CreateWithInvariantCulture
  fullName: NodaTime.Text.YearMonthPattern.CreateWithInvariantCulture
- uid: NodaTime.Text.YearMonthPattern.WithCulture*
  commentId: Overload:NodaTime.Text.YearMonthPattern.WithCulture
  href: NodaTime.Text.YearMonthPattern.html#NodaTime_Text_YearMonthPattern_WithCulture_System_Globalization_CultureInfo_
  name: WithCulture
  nameWithType: YearMonthPattern.WithCulture
  fullName: NodaTime.Text.YearMonthPattern.WithCulture
- uid: NodaTime.Text.YearMonthPattern.WithTemplateValue*
  commentId: Overload:NodaTime.Text.YearMonthPattern.WithTemplateValue
  href: NodaTime.Text.YearMonthPattern.html#NodaTime_Text_YearMonthPattern_WithTemplateValue_NodaTime_YearMonth_
  name: WithTemplateValue
  nameWithType: YearMonthPattern.WithTemplateValue
  fullName: NodaTime.Text.YearMonthPattern.WithTemplateValue
- uid: NodaTime.Text.YearMonthPattern.TwoDigitYearMax
  commentId: P:NodaTime.Text.YearMonthPattern.TwoDigitYearMax
  href: NodaTime.Text.YearMonthPattern.html#NodaTime_Text_YearMonthPattern_TwoDigitYearMax
  name: TwoDigitYearMax
  nameWithType: YearMonthPattern.TwoDigitYearMax
  fullName: NodaTime.Text.YearMonthPattern.TwoDigitYearMax
- uid: NodaTime.Text.YearMonthPattern.WithTwoDigitYearMax*
  commentId: Overload:NodaTime.Text.YearMonthPattern.WithTwoDigitYearMax
  href: NodaTime.Text.YearMonthPattern.html#NodaTime_Text_YearMonthPattern_WithTwoDigitYearMax_System_Int32_
  name: WithTwoDigitYearMax
  nameWithType: YearMonthPattern.WithTwoDigitYearMax
  fullName: NodaTime.Text.YearMonthPattern.WithTwoDigitYearMax
shouldSkipMarkup: true
