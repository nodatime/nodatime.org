### YamlMime:ManagedReference
items:
- uid: NodaTime.Text.IPattern`1
  commentId: T:NodaTime.Text.IPattern`1
  id: IPattern`1
  parent: NodaTime.Text
  children:
  - NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
  - NodaTime.Text.IPattern`1.Format(`0)
  - NodaTime.Text.IPattern`1.Parse(System.String)
  langs:
  - csharp
  - vb
  name: IPattern<T>
  nameWithType: IPattern<T>
  fullName: NodaTime.Text.IPattern<T>
  type: Interface
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: >-
    Generic interface supporting parsing and formatting. Parsing always results in a

    <xref href="NodaTime.Text.ParseResult%601" data-throw-if-not-resolved="false"></xref> which can represent success or failure.
  remarks: >-
    Idiomatic text handling in Noda Time involves creating a pattern once and reusing it multiple

    times, rather than specifying the pattern text repeatedly. All patterns are immutable and thread-safe,

    and include the culture used for localization purposes.
  example: []
  syntax:
    content: public interface IPattern<T>
    typeParameters:
    - id: T
      description: Type of value to parse or format.
    content.vb: Public Interface IPattern(Of T)
  nameWithType.vb: IPattern(Of T)
  fullName.vb: NodaTime.Text.IPattern(Of T)
  name.vb: IPattern(Of T)
- uid: NodaTime.Text.IPattern`1.Parse(System.String)
  commentId: M:NodaTime.Text.IPattern`1.Parse(System.String)
  id: Parse(System.String)
  parent: NodaTime.Text.IPattern`1
  langs:
  - csharp
  - vb
  name: Parse(string)
  nameWithType: IPattern<T>.Parse(string)
  fullName: NodaTime.Text.IPattern<T>.Parse(string)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: Parses the given text value according to the rules of this pattern.
  remarks: >-
    This method never throws an exception (barring a bug in Noda Time itself). Even errors such as

    the argument being null are wrapped in a parse result.
  example: []
  syntax:
    content: ParseResult<T> Parse(string text)
    parameters:
    - id: text
      type: System.String
      description: The text value to parse.
    return:
      type: NodaTime.Text.ParseResult{{T}}
      description: The result of parsing, which may be successful or unsuccessful.
    content.vb: Function Parse(text As String) As ParseResult(Of T)
  overload: NodaTime.Text.IPattern`1.Parse*
  nameWithType.vb: IPattern(Of T).Parse(String)
  fullName.vb: NodaTime.Text.IPattern(Of T).Parse(String)
  name.vb: Parse(String)
- uid: NodaTime.Text.IPattern`1.Format(`0)
  commentId: M:NodaTime.Text.IPattern`1.Format(`0)
  id: Format(`0)
  parent: NodaTime.Text.IPattern`1
  langs:
  - csharp
  - vb
  name: Format(T)
  nameWithType: IPattern<T>.Format(T)
  fullName: NodaTime.Text.IPattern<T>.Format(T)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: Formats the given value as text according to the rules of this pattern.
  example: []
  syntax:
    content: string Format(T value)
    parameters:
    - id: value
      type: '{T}'
      description: The value to format.
    return:
      type: System.String
      description: The value formatted according to this pattern.
    content.vb: Function Format(value As T) As String
  overload: NodaTime.Text.IPattern`1.Format*
  nameWithType.vb: IPattern(Of T).Format(T)
  fullName.vb: NodaTime.Text.IPattern(Of T).Format(T)
- uid: NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
  commentId: M:NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
  id: AppendFormat(`0,System.Text.StringBuilder)
  parent: NodaTime.Text.IPattern`1
  langs:
  - csharp
  - vb
  name: AppendFormat(T, StringBuilder)
  nameWithType: IPattern<T>.AppendFormat(T, StringBuilder)
  fullName: NodaTime.Text.IPattern<T>.AppendFormat(T, System.Text.StringBuilder)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: >-
    Formats the given value as text according to the rules of this pattern,

    appending to the given <xref href="System.Text.StringBuilder" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: StringBuilder AppendFormat(T value, StringBuilder builder)
    parameters:
    - id: value
      type: '{T}'
      description: The value to format.
    - id: builder
      type: System.Text.StringBuilder
      description: The <code>StringBuilder</code> to append to.
    return:
      type: System.Text.StringBuilder
      description: The builder passed in as <code class="paramref">builder</code>.
    content.vb: Function AppendFormat(value As T, builder As StringBuilder) As StringBuilder
  overload: NodaTime.Text.IPattern`1.AppendFormat*
  nameWithType.vb: IPattern(Of T).AppendFormat(T, StringBuilder)
  fullName.vb: NodaTime.Text.IPattern(Of T).AppendFormat(T, System.Text.StringBuilder)
references:
- uid: NodaTime.Text.ParseResult`1
  commentId: T:NodaTime.Text.ParseResult`1
  parent: NodaTime.Text
  href: NodaTime.Text.ParseResult-1.html
  name: ParseResult<T>
  nameWithType: ParseResult<T>
  fullName: NodaTime.Text.ParseResult<T>
  nameWithType.vb: ParseResult(Of T)
  fullName.vb: NodaTime.Text.ParseResult(Of T)
  name.vb: ParseResult(Of T)
  spec.csharp:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    href: NodaTime.Text.ParseResult-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    href: NodaTime.Text.ParseResult-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NodaTime.Text
  commentId: N:NodaTime.Text
  href: NodaTime.html
  name: NodaTime.Text
  nameWithType: NodaTime.Text
  fullName: NodaTime.Text
  spec.csharp:
  - uid: NodaTime
    name: NodaTime
    href: NodaTime.html
  - name: .
  - uid: NodaTime.Text
    name: Text
    href: NodaTime.Text.html
  spec.vb:
  - uid: NodaTime
    name: NodaTime
    href: NodaTime.html
  - name: .
  - uid: NodaTime.Text
    name: Text
    href: NodaTime.Text.html
- uid: NodaTime.Text.IPattern`1.Parse*
  commentId: Overload:NodaTime.Text.IPattern`1.Parse
  href: NodaTime.Text.IPattern-1.html#NodaTime_Text_IPattern_1_Parse_System_String_
  name: Parse
  nameWithType: IPattern<T>.Parse
  fullName: NodaTime.Text.IPattern<T>.Parse
  nameWithType.vb: IPattern(Of T).Parse
  fullName.vb: NodaTime.Text.IPattern(Of T).Parse
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: NodaTime.Text.ParseResult{{T}}
  commentId: T:NodaTime.Text.ParseResult{`0}
  parent: NodaTime.Text
  definition: NodaTime.Text.ParseResult`1
  href: NodaTime.Text.ParseResult-1.html
  name: ParseResult<T>
  nameWithType: ParseResult<T>
  fullName: NodaTime.Text.ParseResult<T>
  nameWithType.vb: ParseResult(Of T)
  fullName.vb: NodaTime.Text.ParseResult(Of T)
  name.vb: ParseResult(Of T)
  spec.csharp:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    href: NodaTime.Text.ParseResult-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    href: NodaTime.Text.ParseResult-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: NodaTime.Text.IPattern`1.Format*
  commentId: Overload:NodaTime.Text.IPattern`1.Format
  href: NodaTime.Text.IPattern-1.html#NodaTime_Text_IPattern_1_Format__0_
  name: Format
  nameWithType: IPattern<T>.Format
  fullName: NodaTime.Text.IPattern<T>.Format
  nameWithType.vb: IPattern(Of T).Format
  fullName.vb: NodaTime.Text.IPattern(Of T).Format
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Text.StringBuilder
  commentId: T:System.Text.StringBuilder
  parent: System.Text
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.text.stringbuilder
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: NodaTime.Text.IPattern`1.AppendFormat*
  commentId: Overload:NodaTime.Text.IPattern`1.AppendFormat
  href: NodaTime.Text.IPattern-1.html#NodaTime_Text_IPattern_1_AppendFormat__0_System_Text_StringBuilder_
  name: AppendFormat
  nameWithType: IPattern<T>.AppendFormat
  fullName: NodaTime.Text.IPattern<T>.AppendFormat
  nameWithType.vb: IPattern(Of T).AppendFormat
  fullName.vb: NodaTime.Text.IPattern(Of T).AppendFormat
- uid: System.Text
  commentId: N:System.Text
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Text
    name: Text
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Text
    name: Text
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text
shouldSkipMarkup: true
