### YamlMime:ManagedReference
items:
- uid: NodaTime.LocalTime
  commentId: T:NodaTime.LocalTime
  id: LocalTime
  parent: NodaTime
  children:
  - NodaTime.LocalTime.#ctor(System.Int32,System.Int32)
  - NodaTime.LocalTime.#ctor(System.Int32,System.Int32,System.Int32)
  - NodaTime.LocalTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
  - NodaTime.LocalTime.Add(NodaTime.LocalTime,NodaTime.Period)
  - NodaTime.LocalTime.AddSchema(System.Xml.Schema.XmlSchemaSet)
  - NodaTime.LocalTime.ClockHourOfHalfDay
  - NodaTime.LocalTime.CompareTo(NodaTime.LocalTime)
  - NodaTime.LocalTime.Deconstruct(System.Int32@,System.Int32@,System.Int32@)
  - NodaTime.LocalTime.Equals(NodaTime.LocalTime)
  - NodaTime.LocalTime.Equals(System.Object)
  - NodaTime.LocalTime.FromHourMinuteSecondMillisecondTick(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - NodaTime.LocalTime.FromHourMinuteSecondNanosecond(System.Int32,System.Int32,System.Int32,System.Int64)
  - NodaTime.LocalTime.FromHourMinuteSecondTick(System.Int32,System.Int32,System.Int32,System.Int32)
  - NodaTime.LocalTime.FromHoursSinceMidnight(System.Int32)
  - NodaTime.LocalTime.FromMillisecondsSinceMidnight(System.Int32)
  - NodaTime.LocalTime.FromMinutesSinceMidnight(System.Int32)
  - NodaTime.LocalTime.FromNanosecondsSinceMidnight(System.Int64)
  - NodaTime.LocalTime.FromSecondsSinceMidnight(System.Int32)
  - NodaTime.LocalTime.FromTicksSinceMidnight(System.Int64)
  - NodaTime.LocalTime.FromTimeOnly(System.TimeOnly)
  - NodaTime.LocalTime.GetHashCode
  - NodaTime.LocalTime.Hour
  - NodaTime.LocalTime.Max(NodaTime.LocalTime,NodaTime.LocalTime)
  - NodaTime.LocalTime.MaxValue
  - NodaTime.LocalTime.Midnight
  - NodaTime.LocalTime.Millisecond
  - NodaTime.LocalTime.Min(NodaTime.LocalTime,NodaTime.LocalTime)
  - NodaTime.LocalTime.MinValue
  - NodaTime.LocalTime.Minus(NodaTime.LocalTime)
  - NodaTime.LocalTime.Minus(NodaTime.Period)
  - NodaTime.LocalTime.Minute
  - NodaTime.LocalTime.NanosecondOfDay
  - NodaTime.LocalTime.NanosecondOfSecond
  - NodaTime.LocalTime.Noon
  - NodaTime.LocalTime.On(NodaTime.LocalDate)
  - NodaTime.LocalTime.Plus(NodaTime.Period)
  - NodaTime.LocalTime.PlusHours(System.Int64)
  - NodaTime.LocalTime.PlusMilliseconds(System.Int64)
  - NodaTime.LocalTime.PlusMinutes(System.Int64)
  - NodaTime.LocalTime.PlusNanoseconds(System.Int64)
  - NodaTime.LocalTime.PlusSeconds(System.Int64)
  - NodaTime.LocalTime.PlusTicks(System.Int64)
  - NodaTime.LocalTime.Second
  - NodaTime.LocalTime.Subtract(NodaTime.LocalTime,NodaTime.LocalTime)
  - NodaTime.LocalTime.Subtract(NodaTime.LocalTime,NodaTime.Period)
  - NodaTime.LocalTime.System#IComparable#CompareTo(System.Object)
  - NodaTime.LocalTime.System#Xml#Serialization#IXmlSerializable#GetSchema
  - NodaTime.LocalTime.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  - NodaTime.LocalTime.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  - NodaTime.LocalTime.TickOfDay
  - NodaTime.LocalTime.TickOfSecond
  - NodaTime.LocalTime.ToString
  - NodaTime.LocalTime.ToString(System.String,System.IFormatProvider)
  - NodaTime.LocalTime.ToTimeOnly
  - NodaTime.LocalTime.With(System.Func{NodaTime.LocalTime,NodaTime.LocalTime})
  - NodaTime.LocalTime.WithOffset(NodaTime.Offset)
  - NodaTime.LocalTime.op_Addition(NodaTime.LocalTime,NodaTime.Period)
  - NodaTime.LocalTime.op_Equality(NodaTime.LocalTime,NodaTime.LocalTime)
  - NodaTime.LocalTime.op_GreaterThan(NodaTime.LocalTime,NodaTime.LocalTime)
  - NodaTime.LocalTime.op_GreaterThanOrEqual(NodaTime.LocalTime,NodaTime.LocalTime)
  - NodaTime.LocalTime.op_Inequality(NodaTime.LocalTime,NodaTime.LocalTime)
  - NodaTime.LocalTime.op_LessThan(NodaTime.LocalTime,NodaTime.LocalTime)
  - NodaTime.LocalTime.op_LessThanOrEqual(NodaTime.LocalTime,NodaTime.LocalTime)
  - NodaTime.LocalTime.op_Subtraction(NodaTime.LocalTime,NodaTime.LocalTime)
  - NodaTime.LocalTime.op_Subtraction(NodaTime.LocalTime,NodaTime.Period)
  langs:
  - csharp
  - vb
  name: LocalTime
  nameWithType: LocalTime
  fullName: NodaTime.LocalTime
  type: Struct
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    LocalTime is an immutable struct representing a time of day, with no reference

    to a particular calendar, time zone or date.
  remarks: >-
    <p>

    Ordering and equality are defined in the natural way, simply comparing the number of "nanoseconds since midnight".

    </p>

    <p>The default value of this type is <xref href="NodaTime.LocalTime.Midnight" data-throw-if-not-resolved="false"></xref>.</p>
  example: []
  syntax:
    content: >-
      [TypeConverter(typeof(LocalTimeTypeConverter))]

      public readonly struct LocalTime : IEquatable<LocalTime>, IComparable<LocalTime>, IFormattable, IComparable, IXmlSerializable, IAdditionOperators<LocalTime, Period, LocalTime>, ISubtractionOperators<LocalTime, LocalTime, Period>, ISubtractionOperators<LocalTime, Period, LocalTime>, IComparisonOperators<LocalTime, LocalTime, bool>, IEqualityOperators<LocalTime, LocalTime, bool>, IMinMaxValue<LocalTime>
    content.vb: >-
      <TypeConverter(GetType(LocalTimeTypeConverter))>

      Public Structure LocalTime Implements IEquatable(Of LocalTime), IComparable(Of LocalTime), IFormattable, IComparable, IXmlSerializable, IAdditionOperators(Of LocalTime, Period, LocalTime), ISubtractionOperators(Of LocalTime, LocalTime, Period), ISubtractionOperators(Of LocalTime, Period, LocalTime), IComparisonOperators(Of LocalTime, LocalTime, Boolean), IEqualityOperators(Of LocalTime, LocalTime, Boolean), IMinMaxValue(Of LocalTime)
  implements:
  - System.IEquatable{NodaTime.LocalTime}
  - System.IComparable{NodaTime.LocalTime}
  - System.IFormattable
  - System.IComparable
  - System.Xml.Serialization.IXmlSerializable
  - System.Numerics.IAdditionOperators{NodaTime.LocalTime,NodaTime.Period,NodaTime.LocalTime}
  - System.Numerics.ISubtractionOperators{NodaTime.LocalTime,NodaTime.LocalTime,NodaTime.Period}
  - System.Numerics.ISubtractionOperators{NodaTime.LocalTime,NodaTime.Period,NodaTime.LocalTime}
  - System.Numerics.IComparisonOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}
  - System.Numerics.IEqualityOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}
  - System.Numerics.IMinMaxValue{NodaTime.LocalTime}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
- uid: NodaTime.LocalTime.Midnight
  commentId: P:NodaTime.LocalTime.Midnight
  id: Midnight
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: Midnight
  nameWithType: LocalTime.Midnight
  fullName: NodaTime.LocalTime.Midnight
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Local time at midnight, i.e. 0 hours, 0 minutes, 0 seconds.
  example: []
  syntax:
    content: public static LocalTime Midnight { get; }
    parameters: []
    return:
      type: NodaTime.LocalTime
    content.vb: Public Shared ReadOnly Property Midnight As LocalTime
  overload: NodaTime.LocalTime.Midnight*
- uid: NodaTime.LocalTime.MinValue
  commentId: P:NodaTime.LocalTime.MinValue
  id: MinValue
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: MinValue
  nameWithType: LocalTime.MinValue
  fullName: NodaTime.LocalTime.MinValue
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: The minimum value of this type; equivalent to <xref href="NodaTime.LocalTime.Midnight" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static LocalTime MinValue { get; }
    parameters: []
    return:
      type: NodaTime.LocalTime
    content.vb: Public Shared ReadOnly Property MinValue As LocalTime
  overload: NodaTime.LocalTime.MinValue*
  implements:
  - System.Numerics.IMinMaxValue{NodaTime.LocalTime}.MinValue
- uid: NodaTime.LocalTime.Noon
  commentId: P:NodaTime.LocalTime.Noon
  id: Noon
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: Noon
  nameWithType: LocalTime.Noon
  fullName: NodaTime.LocalTime.Noon
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Local time at noon, i.e. 12 hours, 0 minutes, 0 seconds.
  example: []
  syntax:
    content: public static LocalTime Noon { get; }
    parameters: []
    return:
      type: NodaTime.LocalTime
    content.vb: Public Shared ReadOnly Property Noon As LocalTime
  overload: NodaTime.LocalTime.Noon*
- uid: NodaTime.LocalTime.MaxValue
  commentId: P:NodaTime.LocalTime.MaxValue
  id: MaxValue
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: MaxValue
  nameWithType: LocalTime.MaxValue
  fullName: NodaTime.LocalTime.MaxValue
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: The maximum value of this type, one nanosecond before midnight.
  remarks: >-
    This is useful if you have to use an inclusive upper bound for some reason.
        In general, it's better to use an exclusive upper bound, in which case use midnight of
        the following day.
  example: []
  syntax:
    content: public static LocalTime MaxValue { get; }
    parameters: []
    return:
      type: NodaTime.LocalTime
    content.vb: Public Shared ReadOnly Property MaxValue As LocalTime
  overload: NodaTime.LocalTime.MaxValue*
  implements:
  - System.Numerics.IMinMaxValue{NodaTime.LocalTime}.MaxValue
- uid: NodaTime.LocalTime.#ctor(System.Int32,System.Int32)
  commentId: M:NodaTime.LocalTime.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: LocalTime(int, int)
  nameWithType: LocalTime.LocalTime(int, int)
  fullName: NodaTime.LocalTime.LocalTime(int, int)
  type: Constructor
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Creates a local time at the given hour and minute, with second, millisecond-of-second

    and tick-of-millisecond values of zero.
  example: []
  syntax:
    content: public LocalTime(int hour, int minute)
    parameters:
    - id: hour
      type: System.Int32
      description: The hour of day.
    - id: minute
      type: System.Int32
      description: The minute of the hour.
    content.vb: Public Sub New(hour As Integer, minute As Integer)
  overload: NodaTime.LocalTime.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The parameters do not form a valid time.
  nameWithType.vb: LocalTime.New(Integer, Integer)
  fullName.vb: NodaTime.LocalTime.New(Integer, Integer)
  name.vb: New(Integer, Integer)
- uid: NodaTime.LocalTime.#ctor(System.Int32,System.Int32,System.Int32)
  commentId: M:NodaTime.LocalTime.#ctor(System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32,System.Int32)'
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: LocalTime(int, int, int)
  nameWithType: LocalTime.LocalTime(int, int, int)
  fullName: NodaTime.LocalTime.LocalTime(int, int, int)
  type: Constructor
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Creates a local time at the given hour, minute and second,

    with millisecond-of-second and tick-of-millisecond values of zero.
  example: []
  syntax:
    content: public LocalTime(int hour, int minute, int second)
    parameters:
    - id: hour
      type: System.Int32
      description: The hour of day.
    - id: minute
      type: System.Int32
      description: The minute of the hour.
    - id: second
      type: System.Int32
      description: The second of the minute.
    content.vb: Public Sub New(hour As Integer, minute As Integer, second As Integer)
  overload: NodaTime.LocalTime.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The parameters do not form a valid time.
  nameWithType.vb: LocalTime.New(Integer, Integer, Integer)
  fullName.vb: NodaTime.LocalTime.New(Integer, Integer, Integer)
  name.vb: New(Integer, Integer, Integer)
- uid: NodaTime.LocalTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:NodaTime.LocalTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Int32)'
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: LocalTime(int, int, int, int)
  nameWithType: LocalTime.LocalTime(int, int, int, int)
  fullName: NodaTime.LocalTime.LocalTime(int, int, int, int)
  type: Constructor
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Creates a local time at the given hour, minute, second and millisecond,

    with a tick-of-millisecond value of zero.
  example: []
  syntax:
    content: public LocalTime(int hour, int minute, int second, int millisecond)
    parameters:
    - id: hour
      type: System.Int32
      description: The hour of day.
    - id: minute
      type: System.Int32
      description: The minute of the hour.
    - id: second
      type: System.Int32
      description: The second of the minute.
    - id: millisecond
      type: System.Int32
      description: The millisecond of the second.
    content.vb: Public Sub New(hour As Integer, minute As Integer, second As Integer, millisecond As Integer)
  overload: NodaTime.LocalTime.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The parameters do not form a valid time.
  nameWithType.vb: LocalTime.New(Integer, Integer, Integer, Integer)
  fullName.vb: NodaTime.LocalTime.New(Integer, Integer, Integer, Integer)
  name.vb: New(Integer, Integer, Integer, Integer)
- uid: NodaTime.LocalTime.FromHourMinuteSecondMillisecondTick(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:NodaTime.LocalTime.FromHourMinuteSecondMillisecondTick(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: FromHourMinuteSecondMillisecondTick(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: FromHourMinuteSecondMillisecondTick(int, int, int, int, int)
  nameWithType: LocalTime.FromHourMinuteSecondMillisecondTick(int, int, int, int, int)
  fullName: NodaTime.LocalTime.FromHourMinuteSecondMillisecondTick(int, int, int, int, int)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Factory method to create a local time at the given hour, minute, second, millisecond and tick within millisecond.
  example: []
  syntax:
    content: public static LocalTime FromHourMinuteSecondMillisecondTick(int hour, int minute, int second, int millisecond, int tickWithinMillisecond)
    parameters:
    - id: hour
      type: System.Int32
      description: The hour of day.
    - id: minute
      type: System.Int32
      description: The minute of the hour.
    - id: second
      type: System.Int32
      description: The second of the minute.
    - id: millisecond
      type: System.Int32
      description: The millisecond of the second.
    - id: tickWithinMillisecond
      type: System.Int32
      description: The tick within the millisecond.
    return:
      type: NodaTime.LocalTime
      description: The resulting time.
    content.vb: Public Shared Function FromHourMinuteSecondMillisecondTick(hour As Integer, minute As Integer, second As Integer, millisecond As Integer, tickWithinMillisecond As Integer) As LocalTime
  overload: NodaTime.LocalTime.FromHourMinuteSecondMillisecondTick*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The parameters do not form a valid time.
  nameWithType.vb: LocalTime.FromHourMinuteSecondMillisecondTick(Integer, Integer, Integer, Integer, Integer)
  fullName.vb: NodaTime.LocalTime.FromHourMinuteSecondMillisecondTick(Integer, Integer, Integer, Integer, Integer)
  name.vb: FromHourMinuteSecondMillisecondTick(Integer, Integer, Integer, Integer, Integer)
- uid: NodaTime.LocalTime.FromHourMinuteSecondTick(System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:NodaTime.LocalTime.FromHourMinuteSecondTick(System.Int32,System.Int32,System.Int32,System.Int32)
  id: FromHourMinuteSecondTick(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: FromHourMinuteSecondTick(int, int, int, int)
  nameWithType: LocalTime.FromHourMinuteSecondTick(int, int, int, int)
  fullName: NodaTime.LocalTime.FromHourMinuteSecondTick(int, int, int, int)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Factory method for creating a local time from the hour of day, minute of hour, second of minute, and tick of second.
  remarks: This is not a constructor overload as it would have the same signature as the one taking millisecond of second.
  example: []
  syntax:
    content: public static LocalTime FromHourMinuteSecondTick(int hour, int minute, int second, int tickWithinSecond)
    parameters:
    - id: hour
      type: System.Int32
      description: The hour of day in the desired time, in the range [0, 23].
    - id: minute
      type: System.Int32
      description: The minute of hour in the desired time, in the range [0, 59].
    - id: second
      type: System.Int32
      description: The second of minute in the desired time, in the range [0, 59].
    - id: tickWithinSecond
      type: System.Int32
      description: The tick within the second in the desired time, in the range [0, 9999999].
    return:
      type: NodaTime.LocalTime
      description: The resulting time.
    content.vb: Public Shared Function FromHourMinuteSecondTick(hour As Integer, minute As Integer, second As Integer, tickWithinSecond As Integer) As LocalTime
  overload: NodaTime.LocalTime.FromHourMinuteSecondTick*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The parameters do not form a valid time.
  nameWithType.vb: LocalTime.FromHourMinuteSecondTick(Integer, Integer, Integer, Integer)
  fullName.vb: NodaTime.LocalTime.FromHourMinuteSecondTick(Integer, Integer, Integer, Integer)
  name.vb: FromHourMinuteSecondTick(Integer, Integer, Integer, Integer)
- uid: NodaTime.LocalTime.FromHourMinuteSecondNanosecond(System.Int32,System.Int32,System.Int32,System.Int64)
  commentId: M:NodaTime.LocalTime.FromHourMinuteSecondNanosecond(System.Int32,System.Int32,System.Int32,System.Int64)
  id: FromHourMinuteSecondNanosecond(System.Int32,System.Int32,System.Int32,System.Int64)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: FromHourMinuteSecondNanosecond(int, int, int, long)
  nameWithType: LocalTime.FromHourMinuteSecondNanosecond(int, int, int, long)
  fullName: NodaTime.LocalTime.FromHourMinuteSecondNanosecond(int, int, int, long)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Factory method for creating a local time from the hour of day, minute of hour, second of minute, and nanosecond of second.
  remarks: This is not a constructor overload as it would have the same signature as the one taking millisecond of second.
  example: []
  syntax:
    content: public static LocalTime FromHourMinuteSecondNanosecond(int hour, int minute, int second, long nanosecondWithinSecond)
    parameters:
    - id: hour
      type: System.Int32
      description: The hour of day in the desired time, in the range [0, 23].
    - id: minute
      type: System.Int32
      description: The minute of hour in the desired time, in the range [0, 59].
    - id: second
      type: System.Int32
      description: The second of minute in the desired time, in the range [0, 59].
    - id: nanosecondWithinSecond
      type: System.Int64
      description: The nanosecond within the second in the desired time, in the range [0, 999999999].
    return:
      type: NodaTime.LocalTime
      description: The resulting time.
    content.vb: Public Shared Function FromHourMinuteSecondNanosecond(hour As Integer, minute As Integer, second As Integer, nanosecondWithinSecond As Long) As LocalTime
  overload: NodaTime.LocalTime.FromHourMinuteSecondNanosecond*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The parameters do not form a valid time.
  nameWithType.vb: LocalTime.FromHourMinuteSecondNanosecond(Integer, Integer, Integer, Long)
  fullName.vb: NodaTime.LocalTime.FromHourMinuteSecondNanosecond(Integer, Integer, Integer, Long)
  name.vb: FromHourMinuteSecondNanosecond(Integer, Integer, Integer, Long)
- uid: NodaTime.LocalTime.FromNanosecondsSinceMidnight(System.Int64)
  commentId: M:NodaTime.LocalTime.FromNanosecondsSinceMidnight(System.Int64)
  id: FromNanosecondsSinceMidnight(System.Int64)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: FromNanosecondsSinceMidnight(long)
  nameWithType: LocalTime.FromNanosecondsSinceMidnight(long)
  fullName: NodaTime.LocalTime.FromNanosecondsSinceMidnight(long)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Factory method for creating a local time from the number of nanoseconds which have elapsed since midnight.
  example: []
  syntax:
    content: public static LocalTime FromNanosecondsSinceMidnight(long nanoseconds)
    parameters:
    - id: nanoseconds
      type: System.Int64
      description: The number of nanoseconds, in the range [0, 86,399,999,999,999]
    return:
      type: NodaTime.LocalTime
      description: The resulting time.
    content.vb: Public Shared Function FromNanosecondsSinceMidnight(nanoseconds As Long) As LocalTime
  overload: NodaTime.LocalTime.FromNanosecondsSinceMidnight*
  nameWithType.vb: LocalTime.FromNanosecondsSinceMidnight(Long)
  fullName.vb: NodaTime.LocalTime.FromNanosecondsSinceMidnight(Long)
  name.vb: FromNanosecondsSinceMidnight(Long)
- uid: NodaTime.LocalTime.FromTicksSinceMidnight(System.Int64)
  commentId: M:NodaTime.LocalTime.FromTicksSinceMidnight(System.Int64)
  id: FromTicksSinceMidnight(System.Int64)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: FromTicksSinceMidnight(long)
  nameWithType: LocalTime.FromTicksSinceMidnight(long)
  fullName: NodaTime.LocalTime.FromTicksSinceMidnight(long)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Factory method for creating a local time from the number of ticks which have elapsed since midnight.
  example: []
  syntax:
    content: public static LocalTime FromTicksSinceMidnight(long ticks)
    parameters:
    - id: ticks
      type: System.Int64
      description: The number of ticks, in the range [0, 863,999,999,999]
    return:
      type: NodaTime.LocalTime
      description: The resulting time.
    content.vb: Public Shared Function FromTicksSinceMidnight(ticks As Long) As LocalTime
  overload: NodaTime.LocalTime.FromTicksSinceMidnight*
  nameWithType.vb: LocalTime.FromTicksSinceMidnight(Long)
  fullName.vb: NodaTime.LocalTime.FromTicksSinceMidnight(Long)
  name.vb: FromTicksSinceMidnight(Long)
- uid: NodaTime.LocalTime.FromMillisecondsSinceMidnight(System.Int32)
  commentId: M:NodaTime.LocalTime.FromMillisecondsSinceMidnight(System.Int32)
  id: FromMillisecondsSinceMidnight(System.Int32)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: FromMillisecondsSinceMidnight(int)
  nameWithType: LocalTime.FromMillisecondsSinceMidnight(int)
  fullName: NodaTime.LocalTime.FromMillisecondsSinceMidnight(int)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Factory method for creating a local time from the number of milliseconds which have elapsed since midnight.
  example: []
  syntax:
    content: public static LocalTime FromMillisecondsSinceMidnight(int milliseconds)
    parameters:
    - id: milliseconds
      type: System.Int32
      description: The number of milliseconds, in the range [0, 86,399,999]
    return:
      type: NodaTime.LocalTime
      description: The resulting time.
    content.vb: Public Shared Function FromMillisecondsSinceMidnight(milliseconds As Integer) As LocalTime
  overload: NodaTime.LocalTime.FromMillisecondsSinceMidnight*
  nameWithType.vb: LocalTime.FromMillisecondsSinceMidnight(Integer)
  fullName.vb: NodaTime.LocalTime.FromMillisecondsSinceMidnight(Integer)
  name.vb: FromMillisecondsSinceMidnight(Integer)
- uid: NodaTime.LocalTime.FromSecondsSinceMidnight(System.Int32)
  commentId: M:NodaTime.LocalTime.FromSecondsSinceMidnight(System.Int32)
  id: FromSecondsSinceMidnight(System.Int32)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: FromSecondsSinceMidnight(int)
  nameWithType: LocalTime.FromSecondsSinceMidnight(int)
  fullName: NodaTime.LocalTime.FromSecondsSinceMidnight(int)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Factory method for creating a local time from the number of seconds which have elapsed since midnight.
  example: []
  syntax:
    content: public static LocalTime FromSecondsSinceMidnight(int seconds)
    parameters:
    - id: seconds
      type: System.Int32
      description: The number of seconds, in the range [0, 86,399]
    return:
      type: NodaTime.LocalTime
      description: The resulting time.
    content.vb: Public Shared Function FromSecondsSinceMidnight(seconds As Integer) As LocalTime
  overload: NodaTime.LocalTime.FromSecondsSinceMidnight*
  nameWithType.vb: LocalTime.FromSecondsSinceMidnight(Integer)
  fullName.vb: NodaTime.LocalTime.FromSecondsSinceMidnight(Integer)
  name.vb: FromSecondsSinceMidnight(Integer)
- uid: NodaTime.LocalTime.FromMinutesSinceMidnight(System.Int32)
  commentId: M:NodaTime.LocalTime.FromMinutesSinceMidnight(System.Int32)
  id: FromMinutesSinceMidnight(System.Int32)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: FromMinutesSinceMidnight(int)
  nameWithType: LocalTime.FromMinutesSinceMidnight(int)
  fullName: NodaTime.LocalTime.FromMinutesSinceMidnight(int)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Factory method for creating a local time from the number of minutes which have elapsed since midnight.
  example: []
  syntax:
    content: public static LocalTime FromMinutesSinceMidnight(int minutes)
    parameters:
    - id: minutes
      type: System.Int32
      description: The number of minutes, in the range [0, 1439]
    return:
      type: NodaTime.LocalTime
      description: The resulting time.
    content.vb: Public Shared Function FromMinutesSinceMidnight(minutes As Integer) As LocalTime
  overload: NodaTime.LocalTime.FromMinutesSinceMidnight*
  nameWithType.vb: LocalTime.FromMinutesSinceMidnight(Integer)
  fullName.vb: NodaTime.LocalTime.FromMinutesSinceMidnight(Integer)
  name.vb: FromMinutesSinceMidnight(Integer)
- uid: NodaTime.LocalTime.FromHoursSinceMidnight(System.Int32)
  commentId: M:NodaTime.LocalTime.FromHoursSinceMidnight(System.Int32)
  id: FromHoursSinceMidnight(System.Int32)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: FromHoursSinceMidnight(int)
  nameWithType: LocalTime.FromHoursSinceMidnight(int)
  fullName: NodaTime.LocalTime.FromHoursSinceMidnight(int)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Factory method for creating a local time from the number of hours which have elapsed since midnight.
  example: []
  syntax:
    content: public static LocalTime FromHoursSinceMidnight(int hours)
    parameters:
    - id: hours
      type: System.Int32
      description: The number of hours, in the range [0, 23]
    return:
      type: NodaTime.LocalTime
      description: The resulting time.
    content.vb: Public Shared Function FromHoursSinceMidnight(hours As Integer) As LocalTime
  overload: NodaTime.LocalTime.FromHoursSinceMidnight*
  nameWithType.vb: LocalTime.FromHoursSinceMidnight(Integer)
  fullName.vb: NodaTime.LocalTime.FromHoursSinceMidnight(Integer)
  name.vb: FromHoursSinceMidnight(Integer)
- uid: NodaTime.LocalTime.Hour
  commentId: P:NodaTime.LocalTime.Hour
  id: Hour
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: Hour
  nameWithType: LocalTime.Hour
  fullName: NodaTime.LocalTime.Hour
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the hour of day of this local time, in the range 0 to 23 inclusive.
  example: []
  syntax:
    content: public int Hour { get; }
    parameters: []
    return:
      type: System.Int32
      description: The hour of day of this local time, in the range 0 to 23 inclusive.
    content.vb: Public ReadOnly Property Hour As Integer
  overload: NodaTime.LocalTime.Hour*
- uid: NodaTime.LocalTime.ClockHourOfHalfDay
  commentId: P:NodaTime.LocalTime.ClockHourOfHalfDay
  id: ClockHourOfHalfDay
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: ClockHourOfHalfDay
  nameWithType: LocalTime.ClockHourOfHalfDay
  fullName: NodaTime.LocalTime.ClockHourOfHalfDay
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the hour of the half-day of this local time, in the range 1 to 12 inclusive.
  example: []
  syntax:
    content: public int ClockHourOfHalfDay { get; }
    parameters: []
    return:
      type: System.Int32
      description: The hour of the half-day of this local time, in the range 1 to 12 inclusive.
    content.vb: Public ReadOnly Property ClockHourOfHalfDay As Integer
  overload: NodaTime.LocalTime.ClockHourOfHalfDay*
- uid: NodaTime.LocalTime.Minute
  commentId: P:NodaTime.LocalTime.Minute
  id: Minute
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: Minute
  nameWithType: LocalTime.Minute
  fullName: NodaTime.LocalTime.Minute
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the minute of this local time, in the range 0 to 59 inclusive.
  example: []
  syntax:
    content: public int Minute { get; }
    parameters: []
    return:
      type: System.Int32
      description: The minute of this local time, in the range 0 to 59 inclusive.
    content.vb: Public ReadOnly Property Minute As Integer
  overload: NodaTime.LocalTime.Minute*
- uid: NodaTime.LocalTime.Second
  commentId: P:NodaTime.LocalTime.Second
  id: Second
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: Second
  nameWithType: LocalTime.Second
  fullName: NodaTime.LocalTime.Second
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the second of this local time within the minute, in the range 0 to 59 inclusive.
  example: []
  syntax:
    content: public int Second { get; }
    parameters: []
    return:
      type: System.Int32
      description: The second of this local time within the minute, in the range 0 to 59 inclusive.
    content.vb: Public ReadOnly Property Second As Integer
  overload: NodaTime.LocalTime.Second*
- uid: NodaTime.LocalTime.Millisecond
  commentId: P:NodaTime.LocalTime.Millisecond
  id: Millisecond
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: Millisecond
  nameWithType: LocalTime.Millisecond
  fullName: NodaTime.LocalTime.Millisecond
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the millisecond of this local time within the second, in the range 0 to 999 inclusive.
  example: []
  syntax:
    content: public int Millisecond { get; }
    parameters: []
    return:
      type: System.Int32
      description: The millisecond of this local time within the second, in the range 0 to 999 inclusive.
    content.vb: Public ReadOnly Property Millisecond As Integer
  overload: NodaTime.LocalTime.Millisecond*
- uid: NodaTime.LocalTime.TickOfSecond
  commentId: P:NodaTime.LocalTime.TickOfSecond
  id: TickOfSecond
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: TickOfSecond
  nameWithType: LocalTime.TickOfSecond
  fullName: NodaTime.LocalTime.TickOfSecond
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the tick of this local time within the second, in the range 0 to 9,999,999 inclusive.
  example: []
  syntax:
    content: public int TickOfSecond { get; }
    parameters: []
    return:
      type: System.Int32
      description: The tick of this local time within the second, in the range 0 to 9,999,999 inclusive.
    content.vb: Public ReadOnly Property TickOfSecond As Integer
  overload: NodaTime.LocalTime.TickOfSecond*
- uid: NodaTime.LocalTime.TickOfDay
  commentId: P:NodaTime.LocalTime.TickOfDay
  id: TickOfDay
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: TickOfDay
  nameWithType: LocalTime.TickOfDay
  fullName: NodaTime.LocalTime.TickOfDay
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the tick of this local time within the day, in the range 0 to 863,999,999,999 inclusive.
  remarks: If the value does not fall on a tick boundary, it will be truncated towards zero.
  example: []
  syntax:
    content: public long TickOfDay { get; }
    parameters: []
    return:
      type: System.Int64
      description: The tick of this local time within the day, in the range 0 to 863,999,999,999 inclusive.
    content.vb: Public ReadOnly Property TickOfDay As Long
  overload: NodaTime.LocalTime.TickOfDay*
- uid: NodaTime.LocalTime.NanosecondOfSecond
  commentId: P:NodaTime.LocalTime.NanosecondOfSecond
  id: NanosecondOfSecond
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: NanosecondOfSecond
  nameWithType: LocalTime.NanosecondOfSecond
  fullName: NodaTime.LocalTime.NanosecondOfSecond
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the nanosecond of this local time within the second, in the range 0 to 999,999,999 inclusive.
  example: []
  syntax:
    content: public int NanosecondOfSecond { get; }
    parameters: []
    return:
      type: System.Int32
      description: The nanosecond of this local time within the second, in the range 0 to 999,999,999 inclusive.
    content.vb: Public ReadOnly Property NanosecondOfSecond As Integer
  overload: NodaTime.LocalTime.NanosecondOfSecond*
- uid: NodaTime.LocalTime.NanosecondOfDay
  commentId: P:NodaTime.LocalTime.NanosecondOfDay
  id: NanosecondOfDay
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: NanosecondOfDay
  nameWithType: LocalTime.NanosecondOfDay
  fullName: NodaTime.LocalTime.NanosecondOfDay
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the nanosecond of this local time within the day, in the range 0 to 86,399,999,999,999 inclusive.
  example: []
  syntax:
    content: public long NanosecondOfDay { get; }
    parameters: []
    return:
      type: System.Int64
      description: The nanosecond of this local time within the day, in the range 0 to 86,399,999,999,999 inclusive.
    content.vb: Public ReadOnly Property NanosecondOfDay As Long
  overload: NodaTime.LocalTime.NanosecondOfDay*
- uid: NodaTime.LocalTime.op_Addition(NodaTime.LocalTime,NodaTime.Period)
  commentId: M:NodaTime.LocalTime.op_Addition(NodaTime.LocalTime,NodaTime.Period)
  id: op_Addition(NodaTime.LocalTime,NodaTime.Period)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: operator +(LocalTime, Period)
  nameWithType: LocalTime.operator +(LocalTime, Period)
  fullName: NodaTime.LocalTime.operator +(NodaTime.LocalTime, NodaTime.Period)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Creates a new local time by adding a period to an existing time. The period must not contain

    any date-related units (days etc) with non-zero values.
  example: []
  syntax:
    content: public static LocalTime operator +(LocalTime time, Period period)
    parameters:
    - id: time
      type: NodaTime.LocalTime
      description: The time to add the period to
    - id: period
      type: NodaTime.Period
      description: The period to add
    return:
      type: NodaTime.LocalTime
      description: The result of adding the period to the time, wrapping via midnight if necessary
    content.vb: Public Shared Operator +(time As LocalTime, period As Period) As LocalTime
  overload: NodaTime.LocalTime.op_Addition*
  implements:
  - System.Numerics.IAdditionOperators{NodaTime.LocalTime,NodaTime.Period,NodaTime.LocalTime}.op_Addition(NodaTime.LocalTime,NodaTime.Period)
  nameWithType.vb: LocalTime.+(LocalTime, Period)
  fullName.vb: NodaTime.LocalTime.+(NodaTime.LocalTime, NodaTime.Period)
  name.vb: +(LocalTime, Period)
- uid: NodaTime.LocalTime.Add(NodaTime.LocalTime,NodaTime.Period)
  commentId: M:NodaTime.LocalTime.Add(NodaTime.LocalTime,NodaTime.Period)
  id: Add(NodaTime.LocalTime,NodaTime.Period)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: Add(LocalTime, Period)
  nameWithType: LocalTime.Add(LocalTime, Period)
  fullName: NodaTime.LocalTime.Add(NodaTime.LocalTime, NodaTime.Period)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Adds the specified period to the time. Friendly alternative to <code>operator+()</code>.
  example: []
  syntax:
    content: public static LocalTime Add(LocalTime time, Period period)
    parameters:
    - id: time
      type: NodaTime.LocalTime
      description: The time to add the period to
    - id: period
      type: NodaTime.Period
      description: The period to add. Must not contain any (non-zero) date units.
    return:
      type: NodaTime.LocalTime
      description: The sum of the given time and period
    content.vb: Public Shared Function Add(time As LocalTime, period As Period) As LocalTime
  overload: NodaTime.LocalTime.Add*
- uid: NodaTime.LocalTime.Plus(NodaTime.Period)
  commentId: M:NodaTime.LocalTime.Plus(NodaTime.Period)
  id: Plus(NodaTime.Period)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: Plus(Period)
  nameWithType: LocalTime.Plus(Period)
  fullName: NodaTime.LocalTime.Plus(NodaTime.Period)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Adds the specified period to this time. Fluent alternative to <code>operator+()</code>.
  example: []
  syntax:
    content: public LocalTime Plus(Period period)
    parameters:
    - id: period
      type: NodaTime.Period
      description: The period to add. Must not contain any (non-zero) date units.
    return:
      type: NodaTime.LocalTime
      description: The sum of this time and the given period
    content.vb: Public Function Plus(period As Period) As LocalTime
  overload: NodaTime.LocalTime.Plus*
- uid: NodaTime.LocalTime.op_Subtraction(NodaTime.LocalTime,NodaTime.Period)
  commentId: M:NodaTime.LocalTime.op_Subtraction(NodaTime.LocalTime,NodaTime.Period)
  id: op_Subtraction(NodaTime.LocalTime,NodaTime.Period)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: operator -(LocalTime, Period)
  nameWithType: LocalTime.operator -(LocalTime, Period)
  fullName: NodaTime.LocalTime.operator -(NodaTime.LocalTime, NodaTime.Period)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Creates a new local time by subtracting a period from an existing time. The period must not contain

    any date-related units (days etc) with non-zero values.

    This is a convenience operator over the <xref href="NodaTime.LocalTime.Minus(NodaTime.Period)" data-throw-if-not-resolved="false"></xref> method.
  example: []
  syntax:
    content: public static LocalTime operator -(LocalTime time, Period period)
    parameters:
    - id: time
      type: NodaTime.LocalTime
      description: The time to subtract the period from
    - id: period
      type: NodaTime.Period
      description: The period to subtract
    return:
      type: NodaTime.LocalTime
      description: The result of subtract the period from the time, wrapping via midnight if necessary
    content.vb: Public Shared Operator -(time As LocalTime, period As Period) As LocalTime
  overload: NodaTime.LocalTime.op_Subtraction*
  implements:
  - System.Numerics.ISubtractionOperators{NodaTime.LocalTime,NodaTime.Period,NodaTime.LocalTime}.op_Subtraction(NodaTime.LocalTime,NodaTime.Period)
  nameWithType.vb: LocalTime.-(LocalTime, Period)
  fullName.vb: NodaTime.LocalTime.-(NodaTime.LocalTime, NodaTime.Period)
  name.vb: -(LocalTime, Period)
- uid: NodaTime.LocalTime.Subtract(NodaTime.LocalTime,NodaTime.Period)
  commentId: M:NodaTime.LocalTime.Subtract(NodaTime.LocalTime,NodaTime.Period)
  id: Subtract(NodaTime.LocalTime,NodaTime.Period)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: Subtract(LocalTime, Period)
  nameWithType: LocalTime.Subtract(LocalTime, Period)
  fullName: NodaTime.LocalTime.Subtract(NodaTime.LocalTime, NodaTime.Period)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Subtracts the specified period from the time. Friendly alternative to <code>operator-()</code>.
  example: []
  syntax:
    content: public static LocalTime Subtract(LocalTime time, Period period)
    parameters:
    - id: time
      type: NodaTime.LocalTime
      description: The time to subtract the period from
    - id: period
      type: NodaTime.Period
      description: The period to subtract. Must not contain any (non-zero) date units.
    return:
      type: NodaTime.LocalTime
      description: The result of subtracting the given period from the time.
    content.vb: Public Shared Function Subtract(time As LocalTime, period As Period) As LocalTime
  overload: NodaTime.LocalTime.Subtract*
- uid: NodaTime.LocalTime.Minus(NodaTime.Period)
  commentId: M:NodaTime.LocalTime.Minus(NodaTime.Period)
  id: Minus(NodaTime.Period)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: Minus(Period)
  nameWithType: LocalTime.Minus(Period)
  fullName: NodaTime.LocalTime.Minus(NodaTime.Period)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Subtracts the specified period from this time. Fluent alternative to <code>operator-()</code>.
  example: []
  syntax:
    content: public LocalTime Minus(Period period)
    parameters:
    - id: period
      type: NodaTime.Period
      description: The period to subtract. Must not contain any (non-zero) date units.
    return:
      type: NodaTime.LocalTime
      description: The result of subtracting the given period from this time.
    content.vb: Public Function Minus(period As Period) As LocalTime
  overload: NodaTime.LocalTime.Minus*
- uid: NodaTime.LocalTime.op_Subtraction(NodaTime.LocalTime,NodaTime.LocalTime)
  commentId: M:NodaTime.LocalTime.op_Subtraction(NodaTime.LocalTime,NodaTime.LocalTime)
  id: op_Subtraction(NodaTime.LocalTime,NodaTime.LocalTime)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: operator -(LocalTime, LocalTime)
  nameWithType: LocalTime.operator -(LocalTime, LocalTime)
  fullName: NodaTime.LocalTime.operator -(NodaTime.LocalTime, NodaTime.LocalTime)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Subtracts one time from another, returning the result as a <xref href="NodaTime.Period" data-throw-if-not-resolved="false"></xref>.
  remarks: This is simply a convenience operator for calling <xref href="NodaTime.Period.Between(NodaTime.LocalTime%2cNodaTime.LocalTime)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static Period operator -(LocalTime lhs, LocalTime rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalTime
      description: The time to subtract from
    - id: rhs
      type: NodaTime.LocalTime
      description: The time to subtract
    return:
      type: NodaTime.Period
      description: The result of subtracting one time from another.
    content.vb: Public Shared Operator -(lhs As LocalTime, rhs As LocalTime) As Period
  overload: NodaTime.LocalTime.op_Subtraction*
  implements:
  - System.Numerics.ISubtractionOperators{NodaTime.LocalTime,NodaTime.LocalTime,NodaTime.Period}.op_Subtraction(NodaTime.LocalTime,NodaTime.LocalTime)
  nameWithType.vb: LocalTime.-(LocalTime, LocalTime)
  fullName.vb: NodaTime.LocalTime.-(NodaTime.LocalTime, NodaTime.LocalTime)
  name.vb: -(LocalTime, LocalTime)
- uid: NodaTime.LocalTime.Subtract(NodaTime.LocalTime,NodaTime.LocalTime)
  commentId: M:NodaTime.LocalTime.Subtract(NodaTime.LocalTime,NodaTime.LocalTime)
  id: Subtract(NodaTime.LocalTime,NodaTime.LocalTime)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: Subtract(LocalTime, LocalTime)
  nameWithType: LocalTime.Subtract(LocalTime, LocalTime)
  fullName: NodaTime.LocalTime.Subtract(NodaTime.LocalTime, NodaTime.LocalTime)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Subtracts one time from another, returning the result as a <xref href="NodaTime.Period" data-throw-if-not-resolved="false"></xref> with units of years, months and days.
  remarks: This is simply a convenience method for calling <xref href="NodaTime.Period.Between(NodaTime.LocalTime%2cNodaTime.LocalTime)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static Period Subtract(LocalTime lhs, LocalTime rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalTime
      description: The time to subtract from
    - id: rhs
      type: NodaTime.LocalTime
      description: The time to subtract
    return:
      type: NodaTime.Period
      description: The result of subtracting one time from another.
    content.vb: Public Shared Function Subtract(lhs As LocalTime, rhs As LocalTime) As Period
  overload: NodaTime.LocalTime.Subtract*
- uid: NodaTime.LocalTime.Minus(NodaTime.LocalTime)
  commentId: M:NodaTime.LocalTime.Minus(NodaTime.LocalTime)
  id: Minus(NodaTime.LocalTime)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: Minus(LocalTime)
  nameWithType: LocalTime.Minus(LocalTime)
  fullName: NodaTime.LocalTime.Minus(NodaTime.LocalTime)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Subtracts the specified time from this time, returning the result as a <xref href="NodaTime.Period" data-throw-if-not-resolved="false"></xref>.

    Fluent alternative to <code>operator-()</code>.
  example: []
  syntax:
    content: public Period Minus(LocalTime time)
    parameters:
    - id: time
      type: NodaTime.LocalTime
      description: The time to subtract from this
    return:
      type: NodaTime.Period
      description: The difference between the specified time and this one
    content.vb: Public Function Minus(time As LocalTime) As Period
  overload: NodaTime.LocalTime.Minus*
- uid: NodaTime.LocalTime.op_Equality(NodaTime.LocalTime,NodaTime.LocalTime)
  commentId: M:NodaTime.LocalTime.op_Equality(NodaTime.LocalTime,NodaTime.LocalTime)
  id: op_Equality(NodaTime.LocalTime,NodaTime.LocalTime)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: operator ==(LocalTime, LocalTime)
  nameWithType: LocalTime.operator ==(LocalTime, LocalTime)
  fullName: NodaTime.LocalTime.operator ==(NodaTime.LocalTime, NodaTime.LocalTime)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Compares two local times for equality.

    See the type documentation for a description of equality semantics.
  example: []
  syntax:
    content: public static bool operator ==(LocalTime lhs, LocalTime rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalTime
      description: The first value to compare
    - id: rhs
      type: NodaTime.LocalTime
      description: The second value to compare
    return:
      type: System.Boolean
      description: True if the two times are the same; false otherwise
    content.vb: Public Shared Operator =(lhs As LocalTime, rhs As LocalTime) As Boolean
  overload: NodaTime.LocalTime.op_Equality*
  implements:
  - System.Numerics.IEqualityOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}.op_Equality(NodaTime.LocalTime,NodaTime.LocalTime)
  nameWithType.vb: LocalTime.=(LocalTime, LocalTime)
  fullName.vb: NodaTime.LocalTime.=(NodaTime.LocalTime, NodaTime.LocalTime)
  name.vb: =(LocalTime, LocalTime)
- uid: NodaTime.LocalTime.op_Inequality(NodaTime.LocalTime,NodaTime.LocalTime)
  commentId: M:NodaTime.LocalTime.op_Inequality(NodaTime.LocalTime,NodaTime.LocalTime)
  id: op_Inequality(NodaTime.LocalTime,NodaTime.LocalTime)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: operator !=(LocalTime, LocalTime)
  nameWithType: LocalTime.operator !=(LocalTime, LocalTime)
  fullName: NodaTime.LocalTime.operator !=(NodaTime.LocalTime, NodaTime.LocalTime)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Compares two local times for inequality.

    See the type documentation for a description of equality semantics.
  example: []
  syntax:
    content: public static bool operator !=(LocalTime lhs, LocalTime rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalTime
      description: The first value to compare
    - id: rhs
      type: NodaTime.LocalTime
      description: The second value to compare
    return:
      type: System.Boolean
      description: False if the two times are the same; true otherwise
    content.vb: Public Shared Operator <>(lhs As LocalTime, rhs As LocalTime) As Boolean
  overload: NodaTime.LocalTime.op_Inequality*
  implements:
  - System.Numerics.IEqualityOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}.op_Inequality(NodaTime.LocalTime,NodaTime.LocalTime)
  nameWithType.vb: LocalTime.<>(LocalTime, LocalTime)
  fullName.vb: NodaTime.LocalTime.<>(NodaTime.LocalTime, NodaTime.LocalTime)
  name.vb: <>(LocalTime, LocalTime)
- uid: NodaTime.LocalTime.op_LessThan(NodaTime.LocalTime,NodaTime.LocalTime)
  commentId: M:NodaTime.LocalTime.op_LessThan(NodaTime.LocalTime,NodaTime.LocalTime)
  id: op_LessThan(NodaTime.LocalTime,NodaTime.LocalTime)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: operator <(LocalTime, LocalTime)
  nameWithType: LocalTime.operator <(LocalTime, LocalTime)
  fullName: NodaTime.LocalTime.operator <(NodaTime.LocalTime, NodaTime.LocalTime)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Compares two LocalTime values to see if the left one is strictly earlier than the right one.

    See the type documentation for a description of ordering semantics.
  example: []
  syntax:
    content: public static bool operator <(LocalTime lhs, LocalTime rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalTime
      description: First operand of the comparison
    - id: rhs
      type: NodaTime.LocalTime
      description: Second operand of the comparison
    return:
      type: System.Boolean
      description: true if the <code class="paramref">lhs</code> is strictly earlier than <code class="paramref">rhs</code>, false otherwise.
    content.vb: Public Shared Operator <(lhs As LocalTime, rhs As LocalTime) As Boolean
  overload: NodaTime.LocalTime.op_LessThan*
  implements:
  - System.Numerics.IComparisonOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}.op_LessThan(NodaTime.LocalTime,NodaTime.LocalTime)
  nameWithType.vb: LocalTime.<(LocalTime, LocalTime)
  fullName.vb: NodaTime.LocalTime.<(NodaTime.LocalTime, NodaTime.LocalTime)
  name.vb: <(LocalTime, LocalTime)
- uid: NodaTime.LocalTime.op_LessThanOrEqual(NodaTime.LocalTime,NodaTime.LocalTime)
  commentId: M:NodaTime.LocalTime.op_LessThanOrEqual(NodaTime.LocalTime,NodaTime.LocalTime)
  id: op_LessThanOrEqual(NodaTime.LocalTime,NodaTime.LocalTime)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: operator <=(LocalTime, LocalTime)
  nameWithType: LocalTime.operator <=(LocalTime, LocalTime)
  fullName: NodaTime.LocalTime.operator <=(NodaTime.LocalTime, NodaTime.LocalTime)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Compares two LocalTime values to see if the left one is earlier than or equal to the right one.

    See the type documentation for a description of ordering semantics.
  example: []
  syntax:
    content: public static bool operator <=(LocalTime lhs, LocalTime rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalTime
      description: First operand of the comparison
    - id: rhs
      type: NodaTime.LocalTime
      description: Second operand of the comparison
    return:
      type: System.Boolean
      description: true if the <code class="paramref">lhs</code> is earlier than or equal to <code class="paramref">rhs</code>, false otherwise.
    content.vb: Public Shared Operator <=(lhs As LocalTime, rhs As LocalTime) As Boolean
  overload: NodaTime.LocalTime.op_LessThanOrEqual*
  implements:
  - System.Numerics.IComparisonOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}.op_LessThanOrEqual(NodaTime.LocalTime,NodaTime.LocalTime)
  nameWithType.vb: LocalTime.<=(LocalTime, LocalTime)
  fullName.vb: NodaTime.LocalTime.<=(NodaTime.LocalTime, NodaTime.LocalTime)
  name.vb: <=(LocalTime, LocalTime)
- uid: NodaTime.LocalTime.op_GreaterThan(NodaTime.LocalTime,NodaTime.LocalTime)
  commentId: M:NodaTime.LocalTime.op_GreaterThan(NodaTime.LocalTime,NodaTime.LocalTime)
  id: op_GreaterThan(NodaTime.LocalTime,NodaTime.LocalTime)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: operator >(LocalTime, LocalTime)
  nameWithType: LocalTime.operator >(LocalTime, LocalTime)
  fullName: NodaTime.LocalTime.operator >(NodaTime.LocalTime, NodaTime.LocalTime)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Compares two LocalTime values to see if the left one is strictly later than the right one.

    See the type documentation for a description of ordering semantics.
  example: []
  syntax:
    content: public static bool operator >(LocalTime lhs, LocalTime rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalTime
      description: First operand of the comparison
    - id: rhs
      type: NodaTime.LocalTime
      description: Second operand of the comparison
    return:
      type: System.Boolean
      description: true if the <code class="paramref">lhs</code> is strictly later than <code class="paramref">rhs</code>, false otherwise.
    content.vb: Public Shared Operator >(lhs As LocalTime, rhs As LocalTime) As Boolean
  overload: NodaTime.LocalTime.op_GreaterThan*
  implements:
  - System.Numerics.IComparisonOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}.op_GreaterThan(NodaTime.LocalTime,NodaTime.LocalTime)
  nameWithType.vb: LocalTime.>(LocalTime, LocalTime)
  fullName.vb: NodaTime.LocalTime.>(NodaTime.LocalTime, NodaTime.LocalTime)
  name.vb: '>(LocalTime, LocalTime)'
- uid: NodaTime.LocalTime.op_GreaterThanOrEqual(NodaTime.LocalTime,NodaTime.LocalTime)
  commentId: M:NodaTime.LocalTime.op_GreaterThanOrEqual(NodaTime.LocalTime,NodaTime.LocalTime)
  id: op_GreaterThanOrEqual(NodaTime.LocalTime,NodaTime.LocalTime)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: operator >=(LocalTime, LocalTime)
  nameWithType: LocalTime.operator >=(LocalTime, LocalTime)
  fullName: NodaTime.LocalTime.operator >=(NodaTime.LocalTime, NodaTime.LocalTime)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Compares two LocalTime values to see if the left one is later than or equal to the right one.

    See the type documentation for a description of ordering semantics.
  example: []
  syntax:
    content: public static bool operator >=(LocalTime lhs, LocalTime rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalTime
      description: First operand of the comparison
    - id: rhs
      type: NodaTime.LocalTime
      description: Second operand of the comparison
    return:
      type: System.Boolean
      description: true if the <code class="paramref">lhs</code> is later than or equal to <code class="paramref">rhs</code>, false otherwise.
    content.vb: Public Shared Operator >=(lhs As LocalTime, rhs As LocalTime) As Boolean
  overload: NodaTime.LocalTime.op_GreaterThanOrEqual*
  implements:
  - System.Numerics.IComparisonOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}.op_GreaterThanOrEqual(NodaTime.LocalTime,NodaTime.LocalTime)
  nameWithType.vb: LocalTime.>=(LocalTime, LocalTime)
  fullName.vb: NodaTime.LocalTime.>=(NodaTime.LocalTime, NodaTime.LocalTime)
  name.vb: '>=(LocalTime, LocalTime)'
- uid: NodaTime.LocalTime.CompareTo(NodaTime.LocalTime)
  commentId: M:NodaTime.LocalTime.CompareTo(NodaTime.LocalTime)
  id: CompareTo(NodaTime.LocalTime)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: CompareTo(LocalTime)
  nameWithType: LocalTime.CompareTo(LocalTime)
  fullName: NodaTime.LocalTime.CompareTo(NodaTime.LocalTime)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Indicates whether this time is earlier, later or the same as another one.

    See the type documentation for a description of ordering semantics.
  example: []
  syntax:
    content: public int CompareTo(LocalTime other)
    parameters:
    - id: other
      type: NodaTime.LocalTime
      description: The other date/time to compare this one with
    return:
      type: System.Int32
      description: >-
        A value less than zero if this time is earlier than <code class="paramref">other</code>;
            zero if this time is the same as <code class="paramref">other</code>; a value greater than zero if this time is
            later than <code class="paramref">other</code>.
    content.vb: Public Function CompareTo(other As LocalTime) As Integer
  overload: NodaTime.LocalTime.CompareTo*
  implements:
  - System.IComparable{NodaTime.LocalTime}.CompareTo(NodaTime.LocalTime)
- uid: NodaTime.LocalTime.System#IComparable#CompareTo(System.Object)
  commentId: M:NodaTime.LocalTime.System#IComparable#CompareTo(System.Object)
  id: System#IComparable#CompareTo(System.Object)
  isEii: true
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: IComparable.CompareTo(object?)
  nameWithType: LocalTime.IComparable.CompareTo(object?)
  fullName: NodaTime.LocalTime.System.IComparable.CompareTo(object?)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Implementation of <xref href="System.IComparable.CompareTo(System.Object)" data-throw-if-not-resolved="false"></xref> to compare two LocalTimes.

    See the type documentation for a description of ordering semantics.
  remarks: This uses explicit interface implementation to avoid it being called accidentally. The generic implementation should usually be preferred.
  example: []
  syntax:
    content: int IComparable.CompareTo(object? obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare this value with.
    return:
      type: System.Int32
      description: >-
        The result of comparing this LocalTime with another one; see <xref href="NodaTime.LocalTime.CompareTo(NodaTime.LocalTime)" data-throw-if-not-resolved="false"></xref> for general details.
            If <code class="paramref">obj</code> is null, this method returns a value greater than 0.
    content.vb: ''
  overload: NodaTime.LocalTime.System#IComparable#CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code class="paramref">obj</code> is non-null but does not refer to an instance of <xref href="NodaTime.LocalTime" data-throw-if-not-resolved="false"></xref>.
  implements:
  - System.IComparable.CompareTo(System.Object)
  nameWithType.vb: ''
  fullName.vb: ''
  name.vb: ''
- uid: NodaTime.LocalTime.GetHashCode
  commentId: M:NodaTime.LocalTime.GetHashCode
  id: GetHashCode
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: LocalTime.GetHashCode()
  fullName: NodaTime.LocalTime.GetHashCode()
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Returns a hash code for this local time.

    See the type documentation for a description of equality semantics.
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A hash code for this local time.
    content.vb: Public Overrides Function GetHashCode() As Integer
  overridden: System.ValueType.GetHashCode
  overload: NodaTime.LocalTime.GetHashCode*
- uid: NodaTime.LocalTime.Equals(NodaTime.LocalTime)
  commentId: M:NodaTime.LocalTime.Equals(NodaTime.LocalTime)
  id: Equals(NodaTime.LocalTime)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: Equals(LocalTime)
  nameWithType: LocalTime.Equals(LocalTime)
  fullName: NodaTime.LocalTime.Equals(NodaTime.LocalTime)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Compares this local time with the specified one for equality.

    See the type documentation for a description of equality semantics.
  example: []
  syntax:
    content: public bool Equals(LocalTime other)
    parameters:
    - id: other
      type: NodaTime.LocalTime
      description: The other local time to compare this one with
    return:
      type: System.Boolean
      description: True if the specified time is equal to this one; false otherwise
    content.vb: Public Function Equals(other As LocalTime) As Boolean
  overload: NodaTime.LocalTime.Equals*
  implements:
  - System.IEquatable{NodaTime.LocalTime}.Equals(NodaTime.LocalTime)
- uid: NodaTime.LocalTime.Equals(System.Object)
  commentId: M:NodaTime.LocalTime.Equals(System.Object)
  id: Equals(System.Object)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: Equals(object?)
  nameWithType: LocalTime.Equals(object?)
  fullName: NodaTime.LocalTime.Equals(object?)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Compares this local time with the specified reference.

    See the type documentation for a description of equality semantics.
  example: []
  syntax:
    content: public override bool Equals(object? obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare this one with
    return:
      type: System.Boolean
      description: True if the specified value is a local time which is equal to this one; false otherwise
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: NodaTime.LocalTime.Equals*
  nameWithType.vb: LocalTime.Equals(Object)
  fullName.vb: NodaTime.LocalTime.Equals(Object)
  name.vb: Equals(Object)
- uid: NodaTime.LocalTime.PlusHours(System.Int64)
  commentId: M:NodaTime.LocalTime.PlusHours(System.Int64)
  id: PlusHours(System.Int64)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: PlusHours(long)
  nameWithType: LocalTime.PlusHours(long)
  fullName: NodaTime.LocalTime.PlusHours(long)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns a new LocalTime representing the current value with the given number of hours added.
  remarks: If the value goes past the start or end of the day, it wraps - so 11pm plus two hours is 1am, for example.
  example: []
  syntax:
    content: public LocalTime PlusHours(long hours)
    parameters:
    - id: hours
      type: System.Int64
      description: The number of hours to add
    return:
      type: NodaTime.LocalTime
      description: The current value plus the given number of hours.
    content.vb: Public Function PlusHours(hours As Long) As LocalTime
  overload: NodaTime.LocalTime.PlusHours*
  nameWithType.vb: LocalTime.PlusHours(Long)
  fullName.vb: NodaTime.LocalTime.PlusHours(Long)
  name.vb: PlusHours(Long)
- uid: NodaTime.LocalTime.PlusMinutes(System.Int64)
  commentId: M:NodaTime.LocalTime.PlusMinutes(System.Int64)
  id: PlusMinutes(System.Int64)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: PlusMinutes(long)
  nameWithType: LocalTime.PlusMinutes(long)
  fullName: NodaTime.LocalTime.PlusMinutes(long)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns a new LocalTime representing the current value with the given number of minutes added.
  remarks: If the value goes past the start or end of the day, it wraps - so 11pm plus 120 minutes is 1am, for example.
  example: []
  syntax:
    content: public LocalTime PlusMinutes(long minutes)
    parameters:
    - id: minutes
      type: System.Int64
      description: The number of minutes to add
    return:
      type: NodaTime.LocalTime
      description: The current value plus the given number of minutes.
    content.vb: Public Function PlusMinutes(minutes As Long) As LocalTime
  overload: NodaTime.LocalTime.PlusMinutes*
  nameWithType.vb: LocalTime.PlusMinutes(Long)
  fullName.vb: NodaTime.LocalTime.PlusMinutes(Long)
  name.vb: PlusMinutes(Long)
- uid: NodaTime.LocalTime.PlusSeconds(System.Int64)
  commentId: M:NodaTime.LocalTime.PlusSeconds(System.Int64)
  id: PlusSeconds(System.Int64)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: PlusSeconds(long)
  nameWithType: LocalTime.PlusSeconds(long)
  fullName: NodaTime.LocalTime.PlusSeconds(long)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns a new LocalTime representing the current value with the given number of seconds added.
  remarks: If the value goes past the start or end of the day, it wraps - so 11:59pm plus 120 seconds is 12:01am, for example.
  example: []
  syntax:
    content: public LocalTime PlusSeconds(long seconds)
    parameters:
    - id: seconds
      type: System.Int64
      description: The number of seconds to add
    return:
      type: NodaTime.LocalTime
      description: The current value plus the given number of seconds.
    content.vb: Public Function PlusSeconds(seconds As Long) As LocalTime
  overload: NodaTime.LocalTime.PlusSeconds*
  nameWithType.vb: LocalTime.PlusSeconds(Long)
  fullName.vb: NodaTime.LocalTime.PlusSeconds(Long)
  name.vb: PlusSeconds(Long)
- uid: NodaTime.LocalTime.PlusMilliseconds(System.Int64)
  commentId: M:NodaTime.LocalTime.PlusMilliseconds(System.Int64)
  id: PlusMilliseconds(System.Int64)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: PlusMilliseconds(long)
  nameWithType: LocalTime.PlusMilliseconds(long)
  fullName: NodaTime.LocalTime.PlusMilliseconds(long)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns a new LocalTime representing the current value with the given number of milliseconds added.
  example: []
  syntax:
    content: public LocalTime PlusMilliseconds(long milliseconds)
    parameters:
    - id: milliseconds
      type: System.Int64
      description: The number of milliseconds to add
    return:
      type: NodaTime.LocalTime
      description: The current value plus the given number of milliseconds.
    content.vb: Public Function PlusMilliseconds(milliseconds As Long) As LocalTime
  overload: NodaTime.LocalTime.PlusMilliseconds*
  nameWithType.vb: LocalTime.PlusMilliseconds(Long)
  fullName.vb: NodaTime.LocalTime.PlusMilliseconds(Long)
  name.vb: PlusMilliseconds(Long)
- uid: NodaTime.LocalTime.PlusTicks(System.Int64)
  commentId: M:NodaTime.LocalTime.PlusTicks(System.Int64)
  id: PlusTicks(System.Int64)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: PlusTicks(long)
  nameWithType: LocalTime.PlusTicks(long)
  fullName: NodaTime.LocalTime.PlusTicks(long)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns a new LocalTime representing the current value with the given number of ticks added.
  example: []
  syntax:
    content: public LocalTime PlusTicks(long ticks)
    parameters:
    - id: ticks
      type: System.Int64
      description: The number of ticks to add
    return:
      type: NodaTime.LocalTime
      description: The current value plus the given number of ticks.
    content.vb: Public Function PlusTicks(ticks As Long) As LocalTime
  overload: NodaTime.LocalTime.PlusTicks*
  nameWithType.vb: LocalTime.PlusTicks(Long)
  fullName.vb: NodaTime.LocalTime.PlusTicks(Long)
  name.vb: PlusTicks(Long)
- uid: NodaTime.LocalTime.PlusNanoseconds(System.Int64)
  commentId: M:NodaTime.LocalTime.PlusNanoseconds(System.Int64)
  id: PlusNanoseconds(System.Int64)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: PlusNanoseconds(long)
  nameWithType: LocalTime.PlusNanoseconds(long)
  fullName: NodaTime.LocalTime.PlusNanoseconds(long)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns a new LocalTime representing the current value with the given number of nanoseconds added.
  example: []
  syntax:
    content: public LocalTime PlusNanoseconds(long nanoseconds)
    parameters:
    - id: nanoseconds
      type: System.Int64
      description: The number of nanoseconds to add
    return:
      type: NodaTime.LocalTime
      description: The current value plus the given number of ticks.
    content.vb: Public Function PlusNanoseconds(nanoseconds As Long) As LocalTime
  overload: NodaTime.LocalTime.PlusNanoseconds*
  nameWithType.vb: LocalTime.PlusNanoseconds(Long)
  fullName.vb: NodaTime.LocalTime.PlusNanoseconds(Long)
  name.vb: PlusNanoseconds(Long)
- uid: NodaTime.LocalTime.With(System.Func{NodaTime.LocalTime,NodaTime.LocalTime})
  commentId: M:NodaTime.LocalTime.With(System.Func{NodaTime.LocalTime,NodaTime.LocalTime})
  id: With(System.Func{NodaTime.LocalTime,NodaTime.LocalTime})
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: With(Func<LocalTime, LocalTime>)
  nameWithType: LocalTime.With(Func<LocalTime, LocalTime>)
  fullName: NodaTime.LocalTime.With(System.Func<NodaTime.LocalTime, NodaTime.LocalTime>)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns this time, with the given adjuster applied to it.
  remarks: >-
    If the adjuster attempts to construct an invalid time, any exception thrown by

    that construction attempt will be propagated through this method.
  example: []
  syntax:
    content: public LocalTime With(Func<LocalTime, LocalTime> adjuster)
    parameters:
    - id: adjuster
      type: System.Func{NodaTime.LocalTime,NodaTime.LocalTime}
      description: The adjuster to apply.
    return:
      type: NodaTime.LocalTime
      description: The adjusted time.
    content.vb: Public Function [With](adjuster As Func(Of LocalTime, LocalTime)) As LocalTime
  overload: NodaTime.LocalTime.With*
  nameWithType.vb: LocalTime.With(Func(Of LocalTime, LocalTime))
  fullName.vb: NodaTime.LocalTime.With(System.Func(Of NodaTime.LocalTime, NodaTime.LocalTime))
  name.vb: With(Func(Of LocalTime, LocalTime))
- uid: NodaTime.LocalTime.WithOffset(NodaTime.Offset)
  commentId: M:NodaTime.LocalTime.WithOffset(NodaTime.Offset)
  id: WithOffset(NodaTime.Offset)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: WithOffset(Offset)
  nameWithType: LocalTime.WithOffset(Offset)
  fullName: NodaTime.LocalTime.WithOffset(NodaTime.Offset)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns an <xref href="NodaTime.OffsetTime" data-throw-if-not-resolved="false"></xref> for this time-of-day with the given offset.
  remarks: This method is purely a convenient alternative to calling the <xref href="NodaTime.OffsetTime" data-throw-if-not-resolved="false"></xref> constructor directly.
  example: []
  syntax:
    content: public OffsetTime WithOffset(Offset offset)
    parameters:
    - id: offset
      type: NodaTime.Offset
      description: The offset to apply.
    return:
      type: NodaTime.OffsetTime
      description: The result of this time-of-day offset by the given amount.
    content.vb: Public Function WithOffset(offset As Offset) As OffsetTime
  overload: NodaTime.LocalTime.WithOffset*
- uid: NodaTime.LocalTime.On(NodaTime.LocalDate)
  commentId: M:NodaTime.LocalTime.On(NodaTime.LocalDate)
  id: On(NodaTime.LocalDate)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: On(LocalDate)
  nameWithType: LocalTime.On(LocalDate)
  fullName: NodaTime.LocalTime.On(NodaTime.LocalDate)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Combines this <xref href="NodaTime.LocalTime" data-throw-if-not-resolved="false"></xref> with the given <xref href="NodaTime.LocalDate" data-throw-if-not-resolved="false"></xref>

    into a single <xref href="NodaTime.LocalDateTime" data-throw-if-not-resolved="false"></xref>.

    Fluent alternative to <code>operator+()</code>.
  example: []
  syntax:
    content: public LocalDateTime On(LocalDate date)
    parameters:
    - id: date
      type: NodaTime.LocalDate
      description: The date to combine with this time
    return:
      type: NodaTime.LocalDateTime
      description: The <xref href="NodaTime.LocalDateTime" data-throw-if-not-resolved="false"></xref> representation of the given time on this date
    content.vb: Public Function [On]([date] As LocalDate) As LocalDateTime
  overload: NodaTime.LocalTime.On*
- uid: NodaTime.LocalTime.Deconstruct(System.Int32@,System.Int32@,System.Int32@)
  commentId: M:NodaTime.LocalTime.Deconstruct(System.Int32@,System.Int32@,System.Int32@)
  id: Deconstruct(System.Int32@,System.Int32@,System.Int32@)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: Deconstruct(out int, out int, out int)
  nameWithType: LocalTime.Deconstruct(out int, out int, out int)
  fullName: NodaTime.LocalTime.Deconstruct(out int, out int, out int)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Deconstruct this time into its components.
  example: []
  syntax:
    content: public void Deconstruct(out int hour, out int minute, out int second)
    parameters:
    - id: hour
      type: System.Int32
      description: The hour of the time.
    - id: minute
      type: System.Int32
      description: The minute of the hour.
    - id: second
      type: System.Int32
      description: The second within the minute.
    content.vb: Public Sub Deconstruct(hour As Integer, minute As Integer, second As Integer)
  overload: NodaTime.LocalTime.Deconstruct*
  nameWithType.vb: LocalTime.Deconstruct(Integer, Integer, Integer)
  fullName.vb: NodaTime.LocalTime.Deconstruct(Integer, Integer, Integer)
  name.vb: Deconstruct(Integer, Integer, Integer)
- uid: NodaTime.LocalTime.Max(NodaTime.LocalTime,NodaTime.LocalTime)
  commentId: M:NodaTime.LocalTime.Max(NodaTime.LocalTime,NodaTime.LocalTime)
  id: Max(NodaTime.LocalTime,NodaTime.LocalTime)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: Max(LocalTime, LocalTime)
  nameWithType: LocalTime.Max(LocalTime, LocalTime)
  fullName: NodaTime.LocalTime.Max(NodaTime.LocalTime, NodaTime.LocalTime)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns the later time of the given two.
  example: []
  syntax:
    content: public static LocalTime Max(LocalTime x, LocalTime y)
    parameters:
    - id: x
      type: NodaTime.LocalTime
      description: The first time to compare.
    - id: y
      type: NodaTime.LocalTime
      description: The second time to compare.
    return:
      type: NodaTime.LocalTime
      description: The later instant of <code class="paramref">x</code> or <code class="paramref">y</code>.
    content.vb: Public Shared Function Max(x As LocalTime, y As LocalTime) As LocalTime
  overload: NodaTime.LocalTime.Max*
- uid: NodaTime.LocalTime.Min(NodaTime.LocalTime,NodaTime.LocalTime)
  commentId: M:NodaTime.LocalTime.Min(NodaTime.LocalTime,NodaTime.LocalTime)
  id: Min(NodaTime.LocalTime,NodaTime.LocalTime)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: Min(LocalTime, LocalTime)
  nameWithType: LocalTime.Min(LocalTime, LocalTime)
  fullName: NodaTime.LocalTime.Min(NodaTime.LocalTime, NodaTime.LocalTime)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns the earlier time of the given two.
  example: []
  syntax:
    content: public static LocalTime Min(LocalTime x, LocalTime y)
    parameters:
    - id: x
      type: NodaTime.LocalTime
      description: The first time to compare.
    - id: y
      type: NodaTime.LocalTime
      description: The second time to compare.
    return:
      type: NodaTime.LocalTime
      description: The earlier time of <code class="paramref">x</code> or <code class="paramref">y</code>.
    content.vb: Public Shared Function Min(x As LocalTime, y As LocalTime) As LocalTime
  overload: NodaTime.LocalTime.Min*
- uid: NodaTime.LocalTime.ToString
  commentId: M:NodaTime.LocalTime.ToString
  id: ToString
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: LocalTime.ToString()
  fullName: NodaTime.LocalTime.ToString()
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this instance.
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: >-
        The value of the current instance in the default format pattern ("T"), using the current thread's

        culture to obtain a format provider.
    content.vb: Public Overrides Function ToString() As String
  overridden: System.ValueType.ToString
  overload: NodaTime.LocalTime.ToString*
- uid: NodaTime.LocalTime.ToString(System.String,System.IFormatProvider)
  commentId: M:NodaTime.LocalTime.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: ToString(string?, IFormatProvider?)
  nameWithType: LocalTime.ToString(string?, IFormatProvider?)
  fullName: NodaTime.LocalTime.ToString(string?, System.IFormatProvider?)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Formats the value of the current instance using the specified pattern.
  example: []
  syntax:
    content: public string ToString(string? patternText, IFormatProvider? formatProvider)
    parameters:
    - id: patternText
      type: System.String
      description: >-
        The <xref href="System.String" data-throw-if-not-resolved="false"></xref> specifying the pattern to use,
            or null to use the default format pattern ("T").
    - id: formatProvider
      type: System.IFormatProvider
      description: >-
        The <xref href="System.IFormatProvider" data-throw-if-not-resolved="false"></xref> to use when formatting the value,
            or null to use the current thread's culture to obtain a format provider.
    return:
      type: System.String
      description: A <xref href="System.String" data-throw-if-not-resolved="false"></xref> containing the value of the current instance in the specified format.
    content.vb: Public Function ToString(patternText As String, formatProvider As IFormatProvider) As String
  overload: NodaTime.LocalTime.ToString*
  implements:
  - System.IFormattable.ToString(System.String,System.IFormatProvider)
  nameWithType.vb: LocalTime.ToString(String, IFormatProvider)
  fullName.vb: NodaTime.LocalTime.ToString(String, System.IFormatProvider)
  name.vb: ToString(String, IFormatProvider)
- uid: NodaTime.LocalTime.AddSchema(System.Xml.Schema.XmlSchemaSet)
  commentId: M:NodaTime.LocalTime.AddSchema(System.Xml.Schema.XmlSchemaSet)
  id: AddSchema(System.Xml.Schema.XmlSchemaSet)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: AddSchema(XmlSchemaSet)
  nameWithType: LocalTime.AddSchema(XmlSchemaSet)
  fullName: NodaTime.LocalTime.AddSchema(System.Xml.Schema.XmlSchemaSet)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Adds the XML schema type describing the structure of the <xref href="NodaTime.LocalTime" data-throw-if-not-resolved="false"></xref> XML serialization to the given <code class="paramref">xmlSchemaSet</code>.

    the <code class="paramref">xmlSchemaSet</code>.
  example: []
  syntax:
    content: public static XmlQualifiedName AddSchema(XmlSchemaSet xmlSchemaSet)
    parameters:
    - id: xmlSchemaSet
      type: System.Xml.Schema.XmlSchemaSet
      description: The XML schema set provided by <xref href="System.Xml.Serialization.XmlSchemaExporter" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Xml.XmlQualifiedName
      description: The qualified name of the schema type that was added to the <code class="paramref">xmlSchemaSet</code>.
    content.vb: Public Shared Function AddSchema(xmlSchemaSet As XmlSchemaSet) As XmlQualifiedName
  overload: NodaTime.LocalTime.AddSchema*
- uid: NodaTime.LocalTime.System#Xml#Serialization#IXmlSerializable#GetSchema
  commentId: M:NodaTime.LocalTime.System#Xml#Serialization#IXmlSerializable#GetSchema
  id: System#Xml#Serialization#IXmlSerializable#GetSchema
  isEii: true
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: IXmlSerializable.GetSchema()
  nameWithType: LocalTime.IXmlSerializable.GetSchema()
  fullName: NodaTime.LocalTime.System.Xml.Serialization.IXmlSerializable.GetSchema()
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: This method is reserved and should not be used. When implementing the <code>IXmlSerializable</code> interface, you should return <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> (<code>Nothing</code> in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <xref href="System.Xml.Serialization.XmlSchemaProviderAttribute" data-throw-if-not-resolved="false"></xref> to the class.
  example: []
  syntax:
    content: XmlSchema IXmlSerializable.GetSchema()
    return:
      type: System.Xml.Schema.XmlSchema
      description: An <xref href="System.Xml.Schema.XmlSchema" data-throw-if-not-resolved="false"></xref> that describes the XML representation of the object that is produced by the <xref href="System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" data-throw-if-not-resolved="false"></xref> method and consumed by the <xref href="System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" data-throw-if-not-resolved="false"></xref> method.
    content.vb: ''
  overload: NodaTime.LocalTime.System#Xml#Serialization#IXmlSerializable#GetSchema*
  nameWithType.vb: ''
  fullName.vb: ''
  name.vb: ''
- uid: NodaTime.LocalTime.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  commentId: M:NodaTime.LocalTime.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  id: System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  isEii: true
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: IXmlSerializable.ReadXml(XmlReader)
  nameWithType: LocalTime.IXmlSerializable.ReadXml(XmlReader)
  fullName: NodaTime.LocalTime.System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Generates an object from its XML representation.
  example: []
  syntax:
    content: void IXmlSerializable.ReadXml(XmlReader reader)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: The <xref href="System.Xml.XmlReader" data-throw-if-not-resolved="false"></xref> stream from which the object is deserialized.
    content.vb: ''
  overload: NodaTime.LocalTime.System#Xml#Serialization#IXmlSerializable#ReadXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  nameWithType.vb: ''
  fullName.vb: ''
  name.vb: ''
- uid: NodaTime.LocalTime.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  commentId: M:NodaTime.LocalTime.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  id: System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  isEii: true
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: LocalTime.IXmlSerializable.WriteXml(XmlWriter)
  fullName: NodaTime.LocalTime.System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Converts an object into its XML representation.
  example: []
  syntax:
    content: void IXmlSerializable.WriteXml(XmlWriter writer)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: The <xref href="System.Xml.XmlWriter" data-throw-if-not-resolved="false"></xref> stream to which the object is serialized.
    content.vb: ''
  overload: NodaTime.LocalTime.System#Xml#Serialization#IXmlSerializable#WriteXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  nameWithType.vb: ''
  fullName.vb: ''
  name.vb: ''
- uid: NodaTime.LocalTime.ToTimeOnly
  commentId: M:NodaTime.LocalTime.ToTimeOnly
  id: ToTimeOnly
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: ToTimeOnly()
  nameWithType: LocalTime.ToTimeOnly()
  fullName: NodaTime.LocalTime.ToTimeOnly()
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Converts this value to an equivalent <xref href="System.TimeOnly" data-throw-if-not-resolved="false"></xref>.
  remarks: If the value does not fall on a tick boundary, it will be truncated to the earlier tick boundary.
  example: []
  syntax:
    content: public TimeOnly ToTimeOnly()
    return:
      type: System.TimeOnly
      description: A <xref href="System.TimeOnly" data-throw-if-not-resolved="false"></xref> value equivalent to this one.
    content.vb: Public Function ToTimeOnly() As TimeOnly
  overload: NodaTime.LocalTime.ToTimeOnly*
- uid: NodaTime.LocalTime.FromTimeOnly(System.TimeOnly)
  commentId: M:NodaTime.LocalTime.FromTimeOnly(System.TimeOnly)
  id: FromTimeOnly(System.TimeOnly)
  parent: NodaTime.LocalTime
  langs:
  - csharp
  - vb
  name: FromTimeOnly(TimeOnly)
  nameWithType: LocalTime.FromTimeOnly(TimeOnly)
  fullName: NodaTime.LocalTime.FromTimeOnly(System.TimeOnly)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Constructs a <xref href="NodaTime.LocalTime" data-throw-if-not-resolved="false"></xref> from a <xref href="System.TimeOnly" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static LocalTime FromTimeOnly(TimeOnly time)
    parameters:
    - id: time
      type: System.TimeOnly
      description: The time of day to convert.
    return:
      type: NodaTime.LocalTime
      description: The <xref href="NodaTime.LocalTime" data-throw-if-not-resolved="false"></xref> equivalent.
    content.vb: Public Shared Function FromTimeOnly(time As TimeOnly) As LocalTime
  overload: NodaTime.LocalTime.FromTimeOnly*
references:
- uid: NodaTime.LocalTime.Midnight
  commentId: P:NodaTime.LocalTime.Midnight
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_Midnight
  name: Midnight
  nameWithType: LocalTime.Midnight
  fullName: NodaTime.LocalTime.Midnight
- uid: NodaTime
  commentId: N:NodaTime
  href: NodaTime.html
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System.IEquatable{NodaTime.LocalTime}
  commentId: T:System.IEquatable{NodaTime.LocalTime}
  parent: System
  definition: System.IEquatable`1
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<LocalTime>
  nameWithType: IEquatable<LocalTime>
  fullName: System.IEquatable<NodaTime.LocalTime>
  nameWithType.vb: IEquatable(Of LocalTime)
  fullName.vb: System.IEquatable(Of NodaTime.LocalTime)
  name.vb: IEquatable(Of LocalTime)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: )
- uid: System.IComparable{NodaTime.LocalTime}
  commentId: T:System.IComparable{NodaTime.LocalTime}
  parent: System
  definition: System.IComparable`1
  href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  name: IComparable<LocalTime>
  nameWithType: IComparable<LocalTime>
  fullName: System.IComparable<NodaTime.LocalTime>
  nameWithType.vb: IComparable(Of LocalTime)
  fullName.vb: System.IComparable(Of NodaTime.LocalTime)
  name.vb: IComparable(Of LocalTime)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: <
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: (
  - name: Of
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: )
- uid: System.IFormattable
  commentId: T:System.IFormattable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iformattable
  name: IFormattable
  nameWithType: IFormattable
  fullName: System.IFormattable
- uid: System.IComparable
  commentId: T:System.IComparable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.Xml.Serialization.IXmlSerializable
  commentId: T:System.Xml.Serialization.IXmlSerializable
  parent: System.Xml.Serialization
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable
  name: IXmlSerializable
  nameWithType: IXmlSerializable
  fullName: System.Xml.Serialization.IXmlSerializable
- uid: System.Numerics.IAdditionOperators{NodaTime.LocalTime,NodaTime.Period,NodaTime.LocalTime}
  commentId: T:System.Numerics.IAdditionOperators{NodaTime.LocalTime,NodaTime.Period,NodaTime.LocalTime}
  parent: System.Numerics
  definition: System.Numerics.IAdditionOperators`3
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3
  name: IAdditionOperators<LocalTime, Period, LocalTime>
  nameWithType: IAdditionOperators<LocalTime, Period, LocalTime>
  fullName: System.Numerics.IAdditionOperators<NodaTime.LocalTime, NodaTime.Period, NodaTime.LocalTime>
  nameWithType.vb: IAdditionOperators(Of LocalTime, Period, LocalTime)
  fullName.vb: System.Numerics.IAdditionOperators(Of NodaTime.LocalTime, NodaTime.Period, NodaTime.LocalTime)
  name.vb: IAdditionOperators(Of LocalTime, Period, LocalTime)
  spec.csharp:
  - uid: System.Numerics.IAdditionOperators`3
    name: IAdditionOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3
  - name: <
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.Period
    name: Period
    href: NodaTime.Period.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IAdditionOperators`3
    name: IAdditionOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3
  - name: (
  - name: Of
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.Period
    name: Period
    href: NodaTime.Period.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: )
- uid: System.Numerics.ISubtractionOperators{NodaTime.LocalTime,NodaTime.LocalTime,NodaTime.Period}
  commentId: T:System.Numerics.ISubtractionOperators{NodaTime.LocalTime,NodaTime.LocalTime,NodaTime.Period}
  parent: System.Numerics
  definition: System.Numerics.ISubtractionOperators`3
  href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3
  name: ISubtractionOperators<LocalTime, LocalTime, Period>
  nameWithType: ISubtractionOperators<LocalTime, LocalTime, Period>
  fullName: System.Numerics.ISubtractionOperators<NodaTime.LocalTime, NodaTime.LocalTime, NodaTime.Period>
  nameWithType.vb: ISubtractionOperators(Of LocalTime, LocalTime, Period)
  fullName.vb: System.Numerics.ISubtractionOperators(Of NodaTime.LocalTime, NodaTime.LocalTime, NodaTime.Period)
  name.vb: ISubtractionOperators(Of LocalTime, LocalTime, Period)
  spec.csharp:
  - uid: System.Numerics.ISubtractionOperators`3
    name: ISubtractionOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3
  - name: <
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.Period
    name: Period
    href: NodaTime.Period.html
  - name: '>'
  spec.vb:
  - uid: System.Numerics.ISubtractionOperators`3
    name: ISubtractionOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3
  - name: (
  - name: Of
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.Period
    name: Period
    href: NodaTime.Period.html
  - name: )
- uid: System.Numerics.ISubtractionOperators{NodaTime.LocalTime,NodaTime.Period,NodaTime.LocalTime}
  commentId: T:System.Numerics.ISubtractionOperators{NodaTime.LocalTime,NodaTime.Period,NodaTime.LocalTime}
  parent: System.Numerics
  definition: System.Numerics.ISubtractionOperators`3
  href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3
  name: ISubtractionOperators<LocalTime, Period, LocalTime>
  nameWithType: ISubtractionOperators<LocalTime, Period, LocalTime>
  fullName: System.Numerics.ISubtractionOperators<NodaTime.LocalTime, NodaTime.Period, NodaTime.LocalTime>
  nameWithType.vb: ISubtractionOperators(Of LocalTime, Period, LocalTime)
  fullName.vb: System.Numerics.ISubtractionOperators(Of NodaTime.LocalTime, NodaTime.Period, NodaTime.LocalTime)
  name.vb: ISubtractionOperators(Of LocalTime, Period, LocalTime)
  spec.csharp:
  - uid: System.Numerics.ISubtractionOperators`3
    name: ISubtractionOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3
  - name: <
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.Period
    name: Period
    href: NodaTime.Period.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: '>'
  spec.vb:
  - uid: System.Numerics.ISubtractionOperators`3
    name: ISubtractionOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3
  - name: (
  - name: Of
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.Period
    name: Period
    href: NodaTime.Period.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: )
- uid: System.Numerics.IComparisonOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}
  commentId: T:System.Numerics.IComparisonOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}
  parent: System.Numerics
  definition: System.Numerics.IComparisonOperators`3
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3
  name: IComparisonOperators<LocalTime, LocalTime, bool>
  nameWithType: IComparisonOperators<LocalTime, LocalTime, bool>
  fullName: System.Numerics.IComparisonOperators<NodaTime.LocalTime, NodaTime.LocalTime, bool>
  nameWithType.vb: IComparisonOperators(Of LocalTime, LocalTime, Boolean)
  fullName.vb: System.Numerics.IComparisonOperators(Of NodaTime.LocalTime, NodaTime.LocalTime, Boolean)
  name.vb: IComparisonOperators(Of LocalTime, LocalTime, Boolean)
  spec.csharp:
  - uid: System.Numerics.IComparisonOperators`3
    name: IComparisonOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3
  - name: <
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IComparisonOperators`3
    name: IComparisonOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3
  - name: (
  - name: Of
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Numerics.IEqualityOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}
  commentId: T:System.Numerics.IEqualityOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}
  parent: System.Numerics
  definition: System.Numerics.IEqualityOperators`3
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3
  name: IEqualityOperators<LocalTime, LocalTime, bool>
  nameWithType: IEqualityOperators<LocalTime, LocalTime, bool>
  fullName: System.Numerics.IEqualityOperators<NodaTime.LocalTime, NodaTime.LocalTime, bool>
  nameWithType.vb: IEqualityOperators(Of LocalTime, LocalTime, Boolean)
  fullName.vb: System.Numerics.IEqualityOperators(Of NodaTime.LocalTime, NodaTime.LocalTime, Boolean)
  name.vb: IEqualityOperators(Of LocalTime, LocalTime, Boolean)
  spec.csharp:
  - uid: System.Numerics.IEqualityOperators`3
    name: IEqualityOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3
  - name: <
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IEqualityOperators`3
    name: IEqualityOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3
  - name: (
  - name: Of
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Numerics.IMinMaxValue{NodaTime.LocalTime}
  commentId: T:System.Numerics.IMinMaxValue{NodaTime.LocalTime}
  parent: System.Numerics
  definition: System.Numerics.IMinMaxValue`1
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iminmaxvalue-1
  name: IMinMaxValue<LocalTime>
  nameWithType: IMinMaxValue<LocalTime>
  fullName: System.Numerics.IMinMaxValue<NodaTime.LocalTime>
  nameWithType.vb: IMinMaxValue(Of LocalTime)
  fullName.vb: System.Numerics.IMinMaxValue(Of NodaTime.LocalTime)
  name.vb: IMinMaxValue(Of LocalTime)
  spec.csharp:
  - uid: System.Numerics.IMinMaxValue`1
    name: IMinMaxValue
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iminmaxvalue-1
  - name: <
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IMinMaxValue`1
    name: IMinMaxValue
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iminmaxvalue-1
  - name: (
  - name: Of
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Xml.Serialization
  commentId: N:System.Xml.Serialization
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Xml.Serialization
  nameWithType: System.Xml.Serialization
  fullName: System.Xml.Serialization
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Xml
    name: Xml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml
  - name: .
  - uid: System.Xml.Serialization
    name: Serialization
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.serialization
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Xml
    name: Xml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml
  - name: .
  - uid: System.Xml.Serialization
    name: Serialization
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.serialization
- uid: System.Numerics.IAdditionOperators`3
  commentId: T:System.Numerics.IAdditionOperators`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3
  name: IAdditionOperators<TSelf, TOther, TResult>
  nameWithType: IAdditionOperators<TSelf, TOther, TResult>
  fullName: System.Numerics.IAdditionOperators<TSelf, TOther, TResult>
  nameWithType.vb: IAdditionOperators(Of TSelf, TOther, TResult)
  fullName.vb: System.Numerics.IAdditionOperators(Of TSelf, TOther, TResult)
  name.vb: IAdditionOperators(Of TSelf, TOther, TResult)
  spec.csharp:
  - uid: System.Numerics.IAdditionOperators`3
    name: IAdditionOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3
  - name: <
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IAdditionOperators`3
    name: IAdditionOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3
  - name: (
  - name: Of
  - name: " "
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Numerics
  commentId: N:System.Numerics
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Numerics
  nameWithType: System.Numerics
  fullName: System.Numerics
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Numerics
    name: Numerics
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Numerics
    name: Numerics
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics
- uid: System.Numerics.ISubtractionOperators`3
  commentId: T:System.Numerics.ISubtractionOperators`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3
  name: ISubtractionOperators<TSelf, TOther, TResult>
  nameWithType: ISubtractionOperators<TSelf, TOther, TResult>
  fullName: System.Numerics.ISubtractionOperators<TSelf, TOther, TResult>
  nameWithType.vb: ISubtractionOperators(Of TSelf, TOther, TResult)
  fullName.vb: System.Numerics.ISubtractionOperators(Of TSelf, TOther, TResult)
  name.vb: ISubtractionOperators(Of TSelf, TOther, TResult)
  spec.csharp:
  - uid: System.Numerics.ISubtractionOperators`3
    name: ISubtractionOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3
  - name: <
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Numerics.ISubtractionOperators`3
    name: ISubtractionOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3
  - name: (
  - name: Of
  - name: " "
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Numerics.IComparisonOperators`3
  commentId: T:System.Numerics.IComparisonOperators`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3
  name: IComparisonOperators<TSelf, TOther, TResult>
  nameWithType: IComparisonOperators<TSelf, TOther, TResult>
  fullName: System.Numerics.IComparisonOperators<TSelf, TOther, TResult>
  nameWithType.vb: IComparisonOperators(Of TSelf, TOther, TResult)
  fullName.vb: System.Numerics.IComparisonOperators(Of TSelf, TOther, TResult)
  name.vb: IComparisonOperators(Of TSelf, TOther, TResult)
  spec.csharp:
  - uid: System.Numerics.IComparisonOperators`3
    name: IComparisonOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3
  - name: <
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IComparisonOperators`3
    name: IComparisonOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3
  - name: (
  - name: Of
  - name: " "
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Numerics.IEqualityOperators`3
  commentId: T:System.Numerics.IEqualityOperators`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3
  name: IEqualityOperators<TSelf, TOther, TResult>
  nameWithType: IEqualityOperators<TSelf, TOther, TResult>
  fullName: System.Numerics.IEqualityOperators<TSelf, TOther, TResult>
  nameWithType.vb: IEqualityOperators(Of TSelf, TOther, TResult)
  fullName.vb: System.Numerics.IEqualityOperators(Of TSelf, TOther, TResult)
  name.vb: IEqualityOperators(Of TSelf, TOther, TResult)
  spec.csharp:
  - uid: System.Numerics.IEqualityOperators`3
    name: IEqualityOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3
  - name: <
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IEqualityOperators`3
    name: IEqualityOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3
  - name: (
  - name: Of
  - name: " "
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Numerics.IMinMaxValue`1
  commentId: T:System.Numerics.IMinMaxValue`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iminmaxvalue-1
  name: IMinMaxValue<TSelf>
  nameWithType: IMinMaxValue<TSelf>
  fullName: System.Numerics.IMinMaxValue<TSelf>
  nameWithType.vb: IMinMaxValue(Of TSelf)
  fullName.vb: System.Numerics.IMinMaxValue(Of TSelf)
  name.vb: IMinMaxValue(Of TSelf)
  spec.csharp:
  - uid: System.Numerics.IMinMaxValue`1
    name: IMinMaxValue
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iminmaxvalue-1
  - name: <
  - name: TSelf
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IMinMaxValue`1
    name: IMinMaxValue
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iminmaxvalue-1
  - name: (
  - name: Of
  - name: " "
  - name: TSelf
  - name: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: NodaTime.LocalTime.Midnight*
  commentId: Overload:NodaTime.LocalTime.Midnight
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_Midnight
  name: Midnight
  nameWithType: LocalTime.Midnight
  fullName: NodaTime.LocalTime.Midnight
- uid: NodaTime.LocalTime
  commentId: T:NodaTime.LocalTime
  parent: NodaTime
  href: NodaTime.LocalTime.html
  name: LocalTime
  nameWithType: LocalTime
  fullName: NodaTime.LocalTime
- uid: NodaTime.LocalTime.MinValue*
  commentId: Overload:NodaTime.LocalTime.MinValue
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_MinValue
  name: MinValue
  nameWithType: LocalTime.MinValue
  fullName: NodaTime.LocalTime.MinValue
- uid: System.Numerics.IMinMaxValue{NodaTime.LocalTime}.MinValue
  commentId: P:System.Numerics.IMinMaxValue{NodaTime.LocalTime}.MinValue
  parent: System.Numerics.IMinMaxValue{NodaTime.LocalTime}
  definition: System.Numerics.IMinMaxValue`1.MinValue
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iminmaxvalue-1.minvalue
  name: MinValue
  nameWithType: IMinMaxValue<LocalTime>.MinValue
  fullName: System.Numerics.IMinMaxValue<NodaTime.LocalTime>.MinValue
  nameWithType.vb: IMinMaxValue(Of LocalTime).MinValue
  fullName.vb: System.Numerics.IMinMaxValue(Of NodaTime.LocalTime).MinValue
- uid: System.Numerics.IMinMaxValue`1.MinValue
  commentId: P:System.Numerics.IMinMaxValue`1.MinValue
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iminmaxvalue-1.minvalue
  name: MinValue
  nameWithType: IMinMaxValue<TSelf>.MinValue
  fullName: System.Numerics.IMinMaxValue<TSelf>.MinValue
  nameWithType.vb: IMinMaxValue(Of TSelf).MinValue
  fullName.vb: System.Numerics.IMinMaxValue(Of TSelf).MinValue
- uid: NodaTime.LocalTime.Noon*
  commentId: Overload:NodaTime.LocalTime.Noon
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_Noon
  name: Noon
  nameWithType: LocalTime.Noon
  fullName: NodaTime.LocalTime.Noon
- uid: NodaTime.LocalTime.MaxValue*
  commentId: Overload:NodaTime.LocalTime.MaxValue
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_MaxValue
  name: MaxValue
  nameWithType: LocalTime.MaxValue
  fullName: NodaTime.LocalTime.MaxValue
- uid: System.Numerics.IMinMaxValue{NodaTime.LocalTime}.MaxValue
  commentId: P:System.Numerics.IMinMaxValue{NodaTime.LocalTime}.MaxValue
  parent: System.Numerics.IMinMaxValue{NodaTime.LocalTime}
  definition: System.Numerics.IMinMaxValue`1.MaxValue
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iminmaxvalue-1.maxvalue
  name: MaxValue
  nameWithType: IMinMaxValue<LocalTime>.MaxValue
  fullName: System.Numerics.IMinMaxValue<NodaTime.LocalTime>.MaxValue
  nameWithType.vb: IMinMaxValue(Of LocalTime).MaxValue
  fullName.vb: System.Numerics.IMinMaxValue(Of NodaTime.LocalTime).MaxValue
- uid: System.Numerics.IMinMaxValue`1.MaxValue
  commentId: P:System.Numerics.IMinMaxValue`1.MaxValue
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iminmaxvalue-1.maxvalue
  name: MaxValue
  nameWithType: IMinMaxValue<TSelf>.MaxValue
  fullName: System.Numerics.IMinMaxValue<TSelf>.MaxValue
  nameWithType.vb: IMinMaxValue(Of TSelf).MaxValue
  fullName.vb: System.Numerics.IMinMaxValue(Of TSelf).MaxValue
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: NodaTime.LocalTime.#ctor*
  commentId: Overload:NodaTime.LocalTime.#ctor
  href: NodaTime.LocalTime.html#NodaTime_LocalTime__ctor_System_Int32_System_Int32_
  name: LocalTime
  nameWithType: LocalTime.LocalTime
  fullName: NodaTime.LocalTime.LocalTime
  nameWithType.vb: LocalTime.New
  fullName.vb: NodaTime.LocalTime.New
  name.vb: New
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: NodaTime.LocalTime.FromHourMinuteSecondMillisecondTick*
  commentId: Overload:NodaTime.LocalTime.FromHourMinuteSecondMillisecondTick
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_FromHourMinuteSecondMillisecondTick_System_Int32_System_Int32_System_Int32_System_Int32_System_Int32_
  name: FromHourMinuteSecondMillisecondTick
  nameWithType: LocalTime.FromHourMinuteSecondMillisecondTick
  fullName: NodaTime.LocalTime.FromHourMinuteSecondMillisecondTick
- uid: NodaTime.LocalTime.FromHourMinuteSecondTick*
  commentId: Overload:NodaTime.LocalTime.FromHourMinuteSecondTick
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_FromHourMinuteSecondTick_System_Int32_System_Int32_System_Int32_System_Int32_
  name: FromHourMinuteSecondTick
  nameWithType: LocalTime.FromHourMinuteSecondTick
  fullName: NodaTime.LocalTime.FromHourMinuteSecondTick
- uid: NodaTime.LocalTime.FromHourMinuteSecondNanosecond*
  commentId: Overload:NodaTime.LocalTime.FromHourMinuteSecondNanosecond
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_FromHourMinuteSecondNanosecond_System_Int32_System_Int32_System_Int32_System_Int64_
  name: FromHourMinuteSecondNanosecond
  nameWithType: LocalTime.FromHourMinuteSecondNanosecond
  fullName: NodaTime.LocalTime.FromHourMinuteSecondNanosecond
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int64
  name: long
  nameWithType: long
  fullName: long
  nameWithType.vb: Long
  fullName.vb: Long
  name.vb: Long
- uid: NodaTime.LocalTime.FromNanosecondsSinceMidnight*
  commentId: Overload:NodaTime.LocalTime.FromNanosecondsSinceMidnight
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_FromNanosecondsSinceMidnight_System_Int64_
  name: FromNanosecondsSinceMidnight
  nameWithType: LocalTime.FromNanosecondsSinceMidnight
  fullName: NodaTime.LocalTime.FromNanosecondsSinceMidnight
- uid: NodaTime.LocalTime.FromTicksSinceMidnight*
  commentId: Overload:NodaTime.LocalTime.FromTicksSinceMidnight
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_FromTicksSinceMidnight_System_Int64_
  name: FromTicksSinceMidnight
  nameWithType: LocalTime.FromTicksSinceMidnight
  fullName: NodaTime.LocalTime.FromTicksSinceMidnight
- uid: NodaTime.LocalTime.FromMillisecondsSinceMidnight*
  commentId: Overload:NodaTime.LocalTime.FromMillisecondsSinceMidnight
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_FromMillisecondsSinceMidnight_System_Int32_
  name: FromMillisecondsSinceMidnight
  nameWithType: LocalTime.FromMillisecondsSinceMidnight
  fullName: NodaTime.LocalTime.FromMillisecondsSinceMidnight
- uid: NodaTime.LocalTime.FromSecondsSinceMidnight*
  commentId: Overload:NodaTime.LocalTime.FromSecondsSinceMidnight
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_FromSecondsSinceMidnight_System_Int32_
  name: FromSecondsSinceMidnight
  nameWithType: LocalTime.FromSecondsSinceMidnight
  fullName: NodaTime.LocalTime.FromSecondsSinceMidnight
- uid: NodaTime.LocalTime.FromMinutesSinceMidnight*
  commentId: Overload:NodaTime.LocalTime.FromMinutesSinceMidnight
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_FromMinutesSinceMidnight_System_Int32_
  name: FromMinutesSinceMidnight
  nameWithType: LocalTime.FromMinutesSinceMidnight
  fullName: NodaTime.LocalTime.FromMinutesSinceMidnight
- uid: NodaTime.LocalTime.FromHoursSinceMidnight*
  commentId: Overload:NodaTime.LocalTime.FromHoursSinceMidnight
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_FromHoursSinceMidnight_System_Int32_
  name: FromHoursSinceMidnight
  nameWithType: LocalTime.FromHoursSinceMidnight
  fullName: NodaTime.LocalTime.FromHoursSinceMidnight
- uid: NodaTime.LocalTime.Hour*
  commentId: Overload:NodaTime.LocalTime.Hour
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_Hour
  name: Hour
  nameWithType: LocalTime.Hour
  fullName: NodaTime.LocalTime.Hour
- uid: NodaTime.LocalTime.ClockHourOfHalfDay*
  commentId: Overload:NodaTime.LocalTime.ClockHourOfHalfDay
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_ClockHourOfHalfDay
  name: ClockHourOfHalfDay
  nameWithType: LocalTime.ClockHourOfHalfDay
  fullName: NodaTime.LocalTime.ClockHourOfHalfDay
- uid: NodaTime.LocalTime.Minute*
  commentId: Overload:NodaTime.LocalTime.Minute
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_Minute
  name: Minute
  nameWithType: LocalTime.Minute
  fullName: NodaTime.LocalTime.Minute
- uid: NodaTime.LocalTime.Second*
  commentId: Overload:NodaTime.LocalTime.Second
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_Second
  name: Second
  nameWithType: LocalTime.Second
  fullName: NodaTime.LocalTime.Second
- uid: NodaTime.LocalTime.Millisecond*
  commentId: Overload:NodaTime.LocalTime.Millisecond
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_Millisecond
  name: Millisecond
  nameWithType: LocalTime.Millisecond
  fullName: NodaTime.LocalTime.Millisecond
- uid: NodaTime.LocalTime.TickOfSecond*
  commentId: Overload:NodaTime.LocalTime.TickOfSecond
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_TickOfSecond
  name: TickOfSecond
  nameWithType: LocalTime.TickOfSecond
  fullName: NodaTime.LocalTime.TickOfSecond
- uid: NodaTime.LocalTime.TickOfDay*
  commentId: Overload:NodaTime.LocalTime.TickOfDay
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_TickOfDay
  name: TickOfDay
  nameWithType: LocalTime.TickOfDay
  fullName: NodaTime.LocalTime.TickOfDay
- uid: NodaTime.LocalTime.NanosecondOfSecond*
  commentId: Overload:NodaTime.LocalTime.NanosecondOfSecond
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_NanosecondOfSecond
  name: NanosecondOfSecond
  nameWithType: LocalTime.NanosecondOfSecond
  fullName: NodaTime.LocalTime.NanosecondOfSecond
- uid: NodaTime.LocalTime.NanosecondOfDay*
  commentId: Overload:NodaTime.LocalTime.NanosecondOfDay
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_NanosecondOfDay
  name: NanosecondOfDay
  nameWithType: LocalTime.NanosecondOfDay
  fullName: NodaTime.LocalTime.NanosecondOfDay
- uid: NodaTime.LocalTime.op_Addition*
  commentId: Overload:NodaTime.LocalTime.op_Addition
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_op_Addition_NodaTime_LocalTime_NodaTime_Period_
  name: operator +
  nameWithType: LocalTime.operator +
  fullName: NodaTime.LocalTime.operator +
  nameWithType.vb: LocalTime.+
  fullName.vb: NodaTime.LocalTime.+
  name.vb: +
  spec.csharp:
  - name: operator
  - name: " "
  - uid: NodaTime.LocalTime.op_Addition*
    name: +
    href: NodaTime.LocalTime.html#NodaTime_LocalTime_op_Addition_NodaTime_LocalTime_NodaTime_Period_
- uid: System.Numerics.IAdditionOperators{NodaTime.LocalTime,NodaTime.Period,NodaTime.LocalTime}.op_Addition(NodaTime.LocalTime,NodaTime.Period)
  commentId: M:System.Numerics.IAdditionOperators{NodaTime.LocalTime,NodaTime.Period,NodaTime.LocalTime}.op_Addition(NodaTime.LocalTime,NodaTime.Period)
  parent: System.Numerics.IAdditionOperators{NodaTime.LocalTime,NodaTime.Period,NodaTime.LocalTime}
  definition: System.Numerics.IAdditionOperators`3.op_Addition(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3.op_addition
  name: operator +(LocalTime, Period)
  nameWithType: IAdditionOperators<LocalTime, Period, LocalTime>.operator +(LocalTime, Period)
  fullName: System.Numerics.IAdditionOperators<NodaTime.LocalTime, NodaTime.Period, NodaTime.LocalTime>.operator +(NodaTime.LocalTime, NodaTime.Period)
  nameWithType.vb: IAdditionOperators(Of LocalTime, Period, LocalTime).+(LocalTime, Period)
  fullName.vb: System.Numerics.IAdditionOperators(Of NodaTime.LocalTime, NodaTime.Period, NodaTime.LocalTime).+(NodaTime.LocalTime, NodaTime.Period)
  name.vb: +(LocalTime, Period)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IAdditionOperators{NodaTime.LocalTime,NodaTime.Period,NodaTime.LocalTime}.op_Addition(NodaTime.LocalTime,NodaTime.Period)
    name: +
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3.op_addition
  - name: (
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.Period
    name: Period
    href: NodaTime.Period.html
  - name: )
  spec.vb:
  - name: +
  - name: (
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.Period
    name: Period
    href: NodaTime.Period.html
  - name: )
- uid: NodaTime.Period
  commentId: T:NodaTime.Period
  parent: NodaTime
  href: NodaTime.Period.html
  name: Period
  nameWithType: Period
  fullName: NodaTime.Period
- uid: System.Numerics.IAdditionOperators`3.op_Addition(`0,`1)
  commentId: M:System.Numerics.IAdditionOperators`3.op_Addition(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3.op_addition
  name: operator +(TSelf, TOther)
  nameWithType: IAdditionOperators<TSelf, TOther, TResult>.operator +(TSelf, TOther)
  fullName: System.Numerics.IAdditionOperators<TSelf, TOther, TResult>.operator +(TSelf, TOther)
  nameWithType.vb: IAdditionOperators(Of TSelf, TOther, TResult).+(TSelf, TOther)
  fullName.vb: System.Numerics.IAdditionOperators(Of TSelf, TOther, TResult).+(TSelf, TOther)
  name.vb: +(TSelf, TOther)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IAdditionOperators`3.op_Addition(`0,`1)
    name: +
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3.op_addition
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: +
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: NodaTime.LocalTime.Add*
  commentId: Overload:NodaTime.LocalTime.Add
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_Add_NodaTime_LocalTime_NodaTime_Period_
  name: Add
  nameWithType: LocalTime.Add
  fullName: NodaTime.LocalTime.Add
- uid: NodaTime.LocalTime.Plus*
  commentId: Overload:NodaTime.LocalTime.Plus
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_Plus_NodaTime_Period_
  name: Plus
  nameWithType: LocalTime.Plus
  fullName: NodaTime.LocalTime.Plus
- uid: NodaTime.LocalTime.Minus(NodaTime.Period)
  commentId: M:NodaTime.LocalTime.Minus(NodaTime.Period)
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_Minus_NodaTime_Period_
  name: Minus(Period)
  nameWithType: LocalTime.Minus(Period)
  fullName: NodaTime.LocalTime.Minus(NodaTime.Period)
  spec.csharp:
  - uid: NodaTime.LocalTime.Minus(NodaTime.Period)
    name: Minus
    href: NodaTime.LocalTime.html#NodaTime_LocalTime_Minus_NodaTime_Period_
  - name: (
  - uid: NodaTime.Period
    name: Period
    href: NodaTime.Period.html
  - name: )
  spec.vb:
  - uid: NodaTime.LocalTime.Minus(NodaTime.Period)
    name: Minus
    href: NodaTime.LocalTime.html#NodaTime_LocalTime_Minus_NodaTime_Period_
  - name: (
  - uid: NodaTime.Period
    name: Period
    href: NodaTime.Period.html
  - name: )
- uid: NodaTime.LocalTime.op_Subtraction*
  commentId: Overload:NodaTime.LocalTime.op_Subtraction
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_op_Subtraction_NodaTime_LocalTime_NodaTime_Period_
  name: operator -
  nameWithType: LocalTime.operator -
  fullName: NodaTime.LocalTime.operator -
  nameWithType.vb: LocalTime.-
  fullName.vb: NodaTime.LocalTime.-
  name.vb: '-'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: NodaTime.LocalTime.op_Subtraction*
    name: '-'
    href: NodaTime.LocalTime.html#NodaTime_LocalTime_op_Subtraction_NodaTime_LocalTime_NodaTime_Period_
- uid: System.Numerics.ISubtractionOperators{NodaTime.LocalTime,NodaTime.Period,NodaTime.LocalTime}.op_Subtraction(NodaTime.LocalTime,NodaTime.Period)
  commentId: M:System.Numerics.ISubtractionOperators{NodaTime.LocalTime,NodaTime.Period,NodaTime.LocalTime}.op_Subtraction(NodaTime.LocalTime,NodaTime.Period)
  parent: System.Numerics.ISubtractionOperators{NodaTime.LocalTime,NodaTime.Period,NodaTime.LocalTime}
  definition: System.Numerics.ISubtractionOperators`3.op_Subtraction(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3.op_subtraction
  name: operator -(LocalTime, Period)
  nameWithType: ISubtractionOperators<LocalTime, Period, LocalTime>.operator -(LocalTime, Period)
  fullName: System.Numerics.ISubtractionOperators<NodaTime.LocalTime, NodaTime.Period, NodaTime.LocalTime>.operator -(NodaTime.LocalTime, NodaTime.Period)
  nameWithType.vb: ISubtractionOperators(Of LocalTime, Period, LocalTime).-(LocalTime, Period)
  fullName.vb: System.Numerics.ISubtractionOperators(Of NodaTime.LocalTime, NodaTime.Period, NodaTime.LocalTime).-(NodaTime.LocalTime, NodaTime.Period)
  name.vb: -(LocalTime, Period)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.ISubtractionOperators{NodaTime.LocalTime,NodaTime.Period,NodaTime.LocalTime}.op_Subtraction(NodaTime.LocalTime,NodaTime.Period)
    name: '-'
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3.op_subtraction
  - name: (
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.Period
    name: Period
    href: NodaTime.Period.html
  - name: )
  spec.vb:
  - name: '-'
  - name: (
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.Period
    name: Period
    href: NodaTime.Period.html
  - name: )
- uid: System.Numerics.ISubtractionOperators`3.op_Subtraction(`0,`1)
  commentId: M:System.Numerics.ISubtractionOperators`3.op_Subtraction(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3.op_subtraction
  name: operator -(TSelf, TOther)
  nameWithType: ISubtractionOperators<TSelf, TOther, TResult>.operator -(TSelf, TOther)
  fullName: System.Numerics.ISubtractionOperators<TSelf, TOther, TResult>.operator -(TSelf, TOther)
  nameWithType.vb: ISubtractionOperators(Of TSelf, TOther, TResult).-(TSelf, TOther)
  fullName.vb: System.Numerics.ISubtractionOperators(Of TSelf, TOther, TResult).-(TSelf, TOther)
  name.vb: -(TSelf, TOther)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.ISubtractionOperators`3.op_Subtraction(`0,`1)
    name: '-'
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3.op_subtraction
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: '-'
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: NodaTime.LocalTime.Subtract*
  commentId: Overload:NodaTime.LocalTime.Subtract
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_Subtract_NodaTime_LocalTime_NodaTime_Period_
  name: Subtract
  nameWithType: LocalTime.Subtract
  fullName: NodaTime.LocalTime.Subtract
- uid: NodaTime.LocalTime.Minus*
  commentId: Overload:NodaTime.LocalTime.Minus
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_Minus_NodaTime_Period_
  name: Minus
  nameWithType: LocalTime.Minus
  fullName: NodaTime.LocalTime.Minus
- uid: NodaTime.Period.Between(NodaTime.LocalTime,NodaTime.LocalTime)
  commentId: M:NodaTime.Period.Between(NodaTime.LocalTime,NodaTime.LocalTime)
  href: NodaTime.Period.html#NodaTime_Period_Between_NodaTime_LocalTime_NodaTime_LocalTime_
  name: Between(LocalTime, LocalTime)
  nameWithType: Period.Between(LocalTime, LocalTime)
  fullName: NodaTime.Period.Between(NodaTime.LocalTime, NodaTime.LocalTime)
  spec.csharp:
  - uid: NodaTime.Period.Between(NodaTime.LocalTime,NodaTime.LocalTime)
    name: Between
    href: NodaTime.Period.html#NodaTime_Period_Between_NodaTime_LocalTime_NodaTime_LocalTime_
  - name: (
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: )
  spec.vb:
  - uid: NodaTime.Period.Between(NodaTime.LocalTime,NodaTime.LocalTime)
    name: Between
    href: NodaTime.Period.html#NodaTime_Period_Between_NodaTime_LocalTime_NodaTime_LocalTime_
  - name: (
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: )
- uid: System.Numerics.ISubtractionOperators{NodaTime.LocalTime,NodaTime.LocalTime,NodaTime.Period}.op_Subtraction(NodaTime.LocalTime,NodaTime.LocalTime)
  commentId: M:System.Numerics.ISubtractionOperators{NodaTime.LocalTime,NodaTime.LocalTime,NodaTime.Period}.op_Subtraction(NodaTime.LocalTime,NodaTime.LocalTime)
  parent: System.Numerics.ISubtractionOperators{NodaTime.LocalTime,NodaTime.LocalTime,NodaTime.Period}
  definition: System.Numerics.ISubtractionOperators`3.op_Subtraction(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3.op_subtraction
  name: operator -(LocalTime, LocalTime)
  nameWithType: ISubtractionOperators<LocalTime, LocalTime, Period>.operator -(LocalTime, LocalTime)
  fullName: System.Numerics.ISubtractionOperators<NodaTime.LocalTime, NodaTime.LocalTime, NodaTime.Period>.operator -(NodaTime.LocalTime, NodaTime.LocalTime)
  nameWithType.vb: ISubtractionOperators(Of LocalTime, LocalTime, Period).-(LocalTime, LocalTime)
  fullName.vb: System.Numerics.ISubtractionOperators(Of NodaTime.LocalTime, NodaTime.LocalTime, NodaTime.Period).-(NodaTime.LocalTime, NodaTime.LocalTime)
  name.vb: -(LocalTime, LocalTime)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.ISubtractionOperators{NodaTime.LocalTime,NodaTime.LocalTime,NodaTime.Period}.op_Subtraction(NodaTime.LocalTime,NodaTime.LocalTime)
    name: '-'
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3.op_subtraction
  - name: (
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: )
  spec.vb:
  - name: '-'
  - name: (
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: )
- uid: NodaTime.LocalTime.op_Equality*
  commentId: Overload:NodaTime.LocalTime.op_Equality
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_op_Equality_NodaTime_LocalTime_NodaTime_LocalTime_
  name: operator ==
  nameWithType: LocalTime.operator ==
  fullName: NodaTime.LocalTime.operator ==
  nameWithType.vb: LocalTime.=
  fullName.vb: NodaTime.LocalTime.=
  name.vb: =
  spec.csharp:
  - name: operator
  - name: " "
  - uid: NodaTime.LocalTime.op_Equality*
    name: ==
    href: NodaTime.LocalTime.html#NodaTime_LocalTime_op_Equality_NodaTime_LocalTime_NodaTime_LocalTime_
- uid: System.Numerics.IEqualityOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}.op_Equality(NodaTime.LocalTime,NodaTime.LocalTime)
  commentId: M:System.Numerics.IEqualityOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}.op_Equality(NodaTime.LocalTime,NodaTime.LocalTime)
  parent: System.Numerics.IEqualityOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}
  definition: System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_equality
  name: operator ==(LocalTime, LocalTime)
  nameWithType: IEqualityOperators<LocalTime, LocalTime, bool>.operator ==(LocalTime, LocalTime)
  fullName: System.Numerics.IEqualityOperators<NodaTime.LocalTime, NodaTime.LocalTime, bool>.operator ==(NodaTime.LocalTime, NodaTime.LocalTime)
  nameWithType.vb: IEqualityOperators(Of LocalTime, LocalTime, Boolean).=(LocalTime, LocalTime)
  fullName.vb: System.Numerics.IEqualityOperators(Of NodaTime.LocalTime, NodaTime.LocalTime, Boolean).=(NodaTime.LocalTime, NodaTime.LocalTime)
  name.vb: =(LocalTime, LocalTime)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IEqualityOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}.op_Equality(NodaTime.LocalTime,NodaTime.LocalTime)
    name: ==
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_equality
  - name: (
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: )
  spec.vb:
  - name: =
  - name: (
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)
  commentId: M:System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_equality
  name: operator ==(TSelf, TOther)
  nameWithType: IEqualityOperators<TSelf, TOther, TResult>.operator ==(TSelf, TOther)
  fullName: System.Numerics.IEqualityOperators<TSelf, TOther, TResult>.operator ==(TSelf, TOther)
  nameWithType.vb: IEqualityOperators(Of TSelf, TOther, TResult).=(TSelf, TOther)
  fullName.vb: System.Numerics.IEqualityOperators(Of TSelf, TOther, TResult).=(TSelf, TOther)
  name.vb: =(TSelf, TOther)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)
    name: ==
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_equality
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: =
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: NodaTime.LocalTime.op_Inequality*
  commentId: Overload:NodaTime.LocalTime.op_Inequality
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_op_Inequality_NodaTime_LocalTime_NodaTime_LocalTime_
  name: operator !=
  nameWithType: LocalTime.operator !=
  fullName: NodaTime.LocalTime.operator !=
  nameWithType.vb: LocalTime.<>
  fullName.vb: NodaTime.LocalTime.<>
  name.vb: <>
  spec.csharp:
  - name: operator
  - name: " "
  - uid: NodaTime.LocalTime.op_Inequality*
    name: '!='
    href: NodaTime.LocalTime.html#NodaTime_LocalTime_op_Inequality_NodaTime_LocalTime_NodaTime_LocalTime_
- uid: System.Numerics.IEqualityOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}.op_Inequality(NodaTime.LocalTime,NodaTime.LocalTime)
  commentId: M:System.Numerics.IEqualityOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}.op_Inequality(NodaTime.LocalTime,NodaTime.LocalTime)
  parent: System.Numerics.IEqualityOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}
  definition: System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_inequality
  name: operator !=(LocalTime, LocalTime)
  nameWithType: IEqualityOperators<LocalTime, LocalTime, bool>.operator !=(LocalTime, LocalTime)
  fullName: System.Numerics.IEqualityOperators<NodaTime.LocalTime, NodaTime.LocalTime, bool>.operator !=(NodaTime.LocalTime, NodaTime.LocalTime)
  nameWithType.vb: IEqualityOperators(Of LocalTime, LocalTime, Boolean).<>(LocalTime, LocalTime)
  fullName.vb: System.Numerics.IEqualityOperators(Of NodaTime.LocalTime, NodaTime.LocalTime, Boolean).<>(NodaTime.LocalTime, NodaTime.LocalTime)
  name.vb: <>(LocalTime, LocalTime)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IEqualityOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}.op_Inequality(NodaTime.LocalTime,NodaTime.LocalTime)
    name: '!='
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_inequality
  - name: (
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: )
  spec.vb:
  - name: <>
  - name: (
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: )
- uid: System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)
  commentId: M:System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_inequality
  name: operator !=(TSelf, TOther)
  nameWithType: IEqualityOperators<TSelf, TOther, TResult>.operator !=(TSelf, TOther)
  fullName: System.Numerics.IEqualityOperators<TSelf, TOther, TResult>.operator !=(TSelf, TOther)
  nameWithType.vb: IEqualityOperators(Of TSelf, TOther, TResult).<>(TSelf, TOther)
  fullName.vb: System.Numerics.IEqualityOperators(Of TSelf, TOther, TResult).<>(TSelf, TOther)
  name.vb: <>(TSelf, TOther)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)
    name: '!='
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_inequality
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: <>
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: NodaTime.LocalTime.op_LessThan*
  commentId: Overload:NodaTime.LocalTime.op_LessThan
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_op_LessThan_NodaTime_LocalTime_NodaTime_LocalTime_
  name: operator <
  nameWithType: LocalTime.operator <
  fullName: NodaTime.LocalTime.operator <
  nameWithType.vb: LocalTime.<
  fullName.vb: NodaTime.LocalTime.<
  name.vb: <
  spec.csharp:
  - name: operator
  - name: " "
  - uid: NodaTime.LocalTime.op_LessThan*
    name: <
    href: NodaTime.LocalTime.html#NodaTime_LocalTime_op_LessThan_NodaTime_LocalTime_NodaTime_LocalTime_
- uid: System.Numerics.IComparisonOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}.op_LessThan(NodaTime.LocalTime,NodaTime.LocalTime)
  commentId: M:System.Numerics.IComparisonOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}.op_LessThan(NodaTime.LocalTime,NodaTime.LocalTime)
  parent: System.Numerics.IComparisonOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}
  definition: System.Numerics.IComparisonOperators`3.op_LessThan(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_lessthan
  name: operator <(LocalTime, LocalTime)
  nameWithType: IComparisonOperators<LocalTime, LocalTime, bool>.operator <(LocalTime, LocalTime)
  fullName: System.Numerics.IComparisonOperators<NodaTime.LocalTime, NodaTime.LocalTime, bool>.operator <(NodaTime.LocalTime, NodaTime.LocalTime)
  nameWithType.vb: IComparisonOperators(Of LocalTime, LocalTime, Boolean).<(LocalTime, LocalTime)
  fullName.vb: System.Numerics.IComparisonOperators(Of NodaTime.LocalTime, NodaTime.LocalTime, Boolean).<(NodaTime.LocalTime, NodaTime.LocalTime)
  name.vb: <(LocalTime, LocalTime)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IComparisonOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}.op_LessThan(NodaTime.LocalTime,NodaTime.LocalTime)
    name: <
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_lessthan
  - name: (
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: )
  spec.vb:
  - name: <
  - name: (
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: )
- uid: System.Numerics.IComparisonOperators`3.op_LessThan(`0,`1)
  commentId: M:System.Numerics.IComparisonOperators`3.op_LessThan(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_lessthan
  name: operator <(TSelf, TOther)
  nameWithType: IComparisonOperators<TSelf, TOther, TResult>.operator <(TSelf, TOther)
  fullName: System.Numerics.IComparisonOperators<TSelf, TOther, TResult>.operator <(TSelf, TOther)
  nameWithType.vb: IComparisonOperators(Of TSelf, TOther, TResult).<(TSelf, TOther)
  fullName.vb: System.Numerics.IComparisonOperators(Of TSelf, TOther, TResult).<(TSelf, TOther)
  name.vb: <(TSelf, TOther)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IComparisonOperators`3.op_LessThan(`0,`1)
    name: <
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_lessthan
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: <
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: NodaTime.LocalTime.op_LessThanOrEqual*
  commentId: Overload:NodaTime.LocalTime.op_LessThanOrEqual
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_op_LessThanOrEqual_NodaTime_LocalTime_NodaTime_LocalTime_
  name: operator <=
  nameWithType: LocalTime.operator <=
  fullName: NodaTime.LocalTime.operator <=
  nameWithType.vb: LocalTime.<=
  fullName.vb: NodaTime.LocalTime.<=
  name.vb: <=
  spec.csharp:
  - name: operator
  - name: " "
  - uid: NodaTime.LocalTime.op_LessThanOrEqual*
    name: <=
    href: NodaTime.LocalTime.html#NodaTime_LocalTime_op_LessThanOrEqual_NodaTime_LocalTime_NodaTime_LocalTime_
- uid: System.Numerics.IComparisonOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}.op_LessThanOrEqual(NodaTime.LocalTime,NodaTime.LocalTime)
  commentId: M:System.Numerics.IComparisonOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}.op_LessThanOrEqual(NodaTime.LocalTime,NodaTime.LocalTime)
  parent: System.Numerics.IComparisonOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}
  definition: System.Numerics.IComparisonOperators`3.op_LessThanOrEqual(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_lessthanorequal
  name: operator <=(LocalTime, LocalTime)
  nameWithType: IComparisonOperators<LocalTime, LocalTime, bool>.operator <=(LocalTime, LocalTime)
  fullName: System.Numerics.IComparisonOperators<NodaTime.LocalTime, NodaTime.LocalTime, bool>.operator <=(NodaTime.LocalTime, NodaTime.LocalTime)
  nameWithType.vb: IComparisonOperators(Of LocalTime, LocalTime, Boolean).<=(LocalTime, LocalTime)
  fullName.vb: System.Numerics.IComparisonOperators(Of NodaTime.LocalTime, NodaTime.LocalTime, Boolean).<=(NodaTime.LocalTime, NodaTime.LocalTime)
  name.vb: <=(LocalTime, LocalTime)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IComparisonOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}.op_LessThanOrEqual(NodaTime.LocalTime,NodaTime.LocalTime)
    name: <=
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_lessthanorequal
  - name: (
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: )
  spec.vb:
  - name: <=
  - name: (
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: )
- uid: System.Numerics.IComparisonOperators`3.op_LessThanOrEqual(`0,`1)
  commentId: M:System.Numerics.IComparisonOperators`3.op_LessThanOrEqual(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_lessthanorequal
  name: operator <=(TSelf, TOther)
  nameWithType: IComparisonOperators<TSelf, TOther, TResult>.operator <=(TSelf, TOther)
  fullName: System.Numerics.IComparisonOperators<TSelf, TOther, TResult>.operator <=(TSelf, TOther)
  nameWithType.vb: IComparisonOperators(Of TSelf, TOther, TResult).<=(TSelf, TOther)
  fullName.vb: System.Numerics.IComparisonOperators(Of TSelf, TOther, TResult).<=(TSelf, TOther)
  name.vb: <=(TSelf, TOther)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IComparisonOperators`3.op_LessThanOrEqual(`0,`1)
    name: <=
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_lessthanorequal
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: <=
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: NodaTime.LocalTime.op_GreaterThan*
  commentId: Overload:NodaTime.LocalTime.op_GreaterThan
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_op_GreaterThan_NodaTime_LocalTime_NodaTime_LocalTime_
  name: operator >
  nameWithType: LocalTime.operator >
  fullName: NodaTime.LocalTime.operator >
  nameWithType.vb: LocalTime.>
  fullName.vb: NodaTime.LocalTime.>
  name.vb: '>'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: NodaTime.LocalTime.op_GreaterThan*
    name: '>'
    href: NodaTime.LocalTime.html#NodaTime_LocalTime_op_GreaterThan_NodaTime_LocalTime_NodaTime_LocalTime_
- uid: System.Numerics.IComparisonOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}.op_GreaterThan(NodaTime.LocalTime,NodaTime.LocalTime)
  commentId: M:System.Numerics.IComparisonOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}.op_GreaterThan(NodaTime.LocalTime,NodaTime.LocalTime)
  parent: System.Numerics.IComparisonOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}
  definition: System.Numerics.IComparisonOperators`3.op_GreaterThan(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_greaterthan
  name: operator >(LocalTime, LocalTime)
  nameWithType: IComparisonOperators<LocalTime, LocalTime, bool>.operator >(LocalTime, LocalTime)
  fullName: System.Numerics.IComparisonOperators<NodaTime.LocalTime, NodaTime.LocalTime, bool>.operator >(NodaTime.LocalTime, NodaTime.LocalTime)
  nameWithType.vb: IComparisonOperators(Of LocalTime, LocalTime, Boolean).>(LocalTime, LocalTime)
  fullName.vb: System.Numerics.IComparisonOperators(Of NodaTime.LocalTime, NodaTime.LocalTime, Boolean).>(NodaTime.LocalTime, NodaTime.LocalTime)
  name.vb: '>(LocalTime, LocalTime)'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IComparisonOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}.op_GreaterThan(NodaTime.LocalTime,NodaTime.LocalTime)
    name: '>'
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_greaterthan
  - name: (
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: )
  spec.vb:
  - name: '>'
  - name: (
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: )
- uid: System.Numerics.IComparisonOperators`3.op_GreaterThan(`0,`1)
  commentId: M:System.Numerics.IComparisonOperators`3.op_GreaterThan(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_greaterthan
  name: operator >(TSelf, TOther)
  nameWithType: IComparisonOperators<TSelf, TOther, TResult>.operator >(TSelf, TOther)
  fullName: System.Numerics.IComparisonOperators<TSelf, TOther, TResult>.operator >(TSelf, TOther)
  nameWithType.vb: IComparisonOperators(Of TSelf, TOther, TResult).>(TSelf, TOther)
  fullName.vb: System.Numerics.IComparisonOperators(Of TSelf, TOther, TResult).>(TSelf, TOther)
  name.vb: '>(TSelf, TOther)'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IComparisonOperators`3.op_GreaterThan(`0,`1)
    name: '>'
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_greaterthan
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: '>'
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: NodaTime.LocalTime.op_GreaterThanOrEqual*
  commentId: Overload:NodaTime.LocalTime.op_GreaterThanOrEqual
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_op_GreaterThanOrEqual_NodaTime_LocalTime_NodaTime_LocalTime_
  name: operator >=
  nameWithType: LocalTime.operator >=
  fullName: NodaTime.LocalTime.operator >=
  nameWithType.vb: LocalTime.>=
  fullName.vb: NodaTime.LocalTime.>=
  name.vb: '>='
  spec.csharp:
  - name: operator
  - name: " "
  - uid: NodaTime.LocalTime.op_GreaterThanOrEqual*
    name: '>='
    href: NodaTime.LocalTime.html#NodaTime_LocalTime_op_GreaterThanOrEqual_NodaTime_LocalTime_NodaTime_LocalTime_
- uid: System.Numerics.IComparisonOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}.op_GreaterThanOrEqual(NodaTime.LocalTime,NodaTime.LocalTime)
  commentId: M:System.Numerics.IComparisonOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}.op_GreaterThanOrEqual(NodaTime.LocalTime,NodaTime.LocalTime)
  parent: System.Numerics.IComparisonOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}
  definition: System.Numerics.IComparisonOperators`3.op_GreaterThanOrEqual(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_greaterthanorequal
  name: operator >=(LocalTime, LocalTime)
  nameWithType: IComparisonOperators<LocalTime, LocalTime, bool>.operator >=(LocalTime, LocalTime)
  fullName: System.Numerics.IComparisonOperators<NodaTime.LocalTime, NodaTime.LocalTime, bool>.operator >=(NodaTime.LocalTime, NodaTime.LocalTime)
  nameWithType.vb: IComparisonOperators(Of LocalTime, LocalTime, Boolean).>=(LocalTime, LocalTime)
  fullName.vb: System.Numerics.IComparisonOperators(Of NodaTime.LocalTime, NodaTime.LocalTime, Boolean).>=(NodaTime.LocalTime, NodaTime.LocalTime)
  name.vb: '>=(LocalTime, LocalTime)'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IComparisonOperators{NodaTime.LocalTime,NodaTime.LocalTime,System.Boolean}.op_GreaterThanOrEqual(NodaTime.LocalTime,NodaTime.LocalTime)
    name: '>='
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_greaterthanorequal
  - name: (
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: )
  spec.vb:
  - name: '>='
  - name: (
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: )
- uid: System.Numerics.IComparisonOperators`3.op_GreaterThanOrEqual(`0,`1)
  commentId: M:System.Numerics.IComparisonOperators`3.op_GreaterThanOrEqual(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_greaterthanorequal
  name: operator >=(TSelf, TOther)
  nameWithType: IComparisonOperators<TSelf, TOther, TResult>.operator >=(TSelf, TOther)
  fullName: System.Numerics.IComparisonOperators<TSelf, TOther, TResult>.operator >=(TSelf, TOther)
  nameWithType.vb: IComparisonOperators(Of TSelf, TOther, TResult).>=(TSelf, TOther)
  fullName.vb: System.Numerics.IComparisonOperators(Of TSelf, TOther, TResult).>=(TSelf, TOther)
  name.vb: '>=(TSelf, TOther)'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IComparisonOperators`3.op_GreaterThanOrEqual(`0,`1)
    name: '>='
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_greaterthanorequal
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: '>='
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: NodaTime.LocalTime.CompareTo*
  commentId: Overload:NodaTime.LocalTime.CompareTo
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_CompareTo_NodaTime_LocalTime_
  name: CompareTo
  nameWithType: LocalTime.CompareTo
  fullName: NodaTime.LocalTime.CompareTo
- uid: System.IComparable{NodaTime.LocalTime}.CompareTo(NodaTime.LocalTime)
  commentId: M:System.IComparable{NodaTime.LocalTime}.CompareTo(NodaTime.LocalTime)
  parent: System.IComparable{NodaTime.LocalTime}
  definition: System.IComparable`1.CompareTo(`0)
  href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  name: CompareTo(LocalTime)
  nameWithType: IComparable<LocalTime>.CompareTo(LocalTime)
  fullName: System.IComparable<NodaTime.LocalTime>.CompareTo(NodaTime.LocalTime)
  nameWithType.vb: IComparable(Of LocalTime).CompareTo(LocalTime)
  fullName.vb: System.IComparable(Of NodaTime.LocalTime).CompareTo(NodaTime.LocalTime)
  spec.csharp:
  - uid: System.IComparable{NodaTime.LocalTime}.CompareTo(NodaTime.LocalTime)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  - name: (
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: )
  spec.vb:
  - uid: System.IComparable{NodaTime.LocalTime}.CompareTo(NodaTime.LocalTime)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  - name: (
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  - name: (
  - name: T
  - name: )
- uid: System.IComparable.CompareTo(System.Object)
  commentId: M:System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable.compareto
  name: CompareTo(object)
  nameWithType: IComparable.CompareTo(object)
  fullName: System.IComparable.CompareTo(object)
  nameWithType.vb: IComparable.CompareTo(Object)
  fullName.vb: System.IComparable.CompareTo(Object)
  name.vb: CompareTo(Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable.compareto
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable.compareto
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: NodaTime.LocalTime.CompareTo(NodaTime.LocalTime)
  commentId: M:NodaTime.LocalTime.CompareTo(NodaTime.LocalTime)
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_CompareTo_NodaTime_LocalTime_
  name: CompareTo(LocalTime)
  nameWithType: LocalTime.CompareTo(LocalTime)
  fullName: NodaTime.LocalTime.CompareTo(NodaTime.LocalTime)
  spec.csharp:
  - uid: NodaTime.LocalTime.CompareTo(NodaTime.LocalTime)
    name: CompareTo
    href: NodaTime.LocalTime.html#NodaTime_LocalTime_CompareTo_NodaTime_LocalTime_
  - name: (
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: )
  spec.vb:
  - uid: NodaTime.LocalTime.CompareTo(NodaTime.LocalTime)
    name: CompareTo
    href: NodaTime.LocalTime.html#NodaTime_LocalTime_CompareTo_NodaTime_LocalTime_
  - name: (
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: )
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: NodaTime.LocalTime.System#IComparable#CompareTo*
  commentId: Overload:NodaTime.LocalTime.System#IComparable#CompareTo
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable
  name: IComparable.CompareTo
  nameWithType: LocalTime.IComparable.CompareTo
  fullName: NodaTime.LocalTime.System.IComparable.CompareTo
  spec.csharp:
  - uid: System.IComparable*
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable
  - name: .
  - uid: NodaTime.LocalTime.System#IComparable#CompareTo*
    name: CompareTo
    href: NodaTime.LocalTime.html#NodaTime_LocalTime_System_IComparable_CompareTo_System_Object_
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
- uid: NodaTime.LocalTime.GetHashCode*
  commentId: Overload:NodaTime.LocalTime.GetHashCode
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_GetHashCode
  name: GetHashCode
  nameWithType: LocalTime.GetHashCode
  fullName: NodaTime.LocalTime.GetHashCode
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: NodaTime.LocalTime.Equals*
  commentId: Overload:NodaTime.LocalTime.Equals
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_Equals_NodaTime_LocalTime_
  name: Equals
  nameWithType: LocalTime.Equals
  fullName: NodaTime.LocalTime.Equals
- uid: System.IEquatable{NodaTime.LocalTime}.Equals(NodaTime.LocalTime)
  commentId: M:System.IEquatable{NodaTime.LocalTime}.Equals(NodaTime.LocalTime)
  parent: System.IEquatable{NodaTime.LocalTime}
  definition: System.IEquatable`1.Equals(`0)
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(LocalTime)
  nameWithType: IEquatable<LocalTime>.Equals(LocalTime)
  fullName: System.IEquatable<NodaTime.LocalTime>.Equals(NodaTime.LocalTime)
  nameWithType.vb: IEquatable(Of LocalTime).Equals(LocalTime)
  fullName.vb: System.IEquatable(Of NodaTime.LocalTime).Equals(NodaTime.LocalTime)
  spec.csharp:
  - uid: System.IEquatable{NodaTime.LocalTime}.Equals(NodaTime.LocalTime)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: )
  spec.vb:
  - uid: System.IEquatable{NodaTime.LocalTime}.Equals(NodaTime.LocalTime)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: NodaTime.LocalTime.PlusHours*
  commentId: Overload:NodaTime.LocalTime.PlusHours
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_PlusHours_System_Int64_
  name: PlusHours
  nameWithType: LocalTime.PlusHours
  fullName: NodaTime.LocalTime.PlusHours
- uid: NodaTime.LocalTime.PlusMinutes*
  commentId: Overload:NodaTime.LocalTime.PlusMinutes
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_PlusMinutes_System_Int64_
  name: PlusMinutes
  nameWithType: LocalTime.PlusMinutes
  fullName: NodaTime.LocalTime.PlusMinutes
- uid: NodaTime.LocalTime.PlusSeconds*
  commentId: Overload:NodaTime.LocalTime.PlusSeconds
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_PlusSeconds_System_Int64_
  name: PlusSeconds
  nameWithType: LocalTime.PlusSeconds
  fullName: NodaTime.LocalTime.PlusSeconds
- uid: NodaTime.LocalTime.PlusMilliseconds*
  commentId: Overload:NodaTime.LocalTime.PlusMilliseconds
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_PlusMilliseconds_System_Int64_
  name: PlusMilliseconds
  nameWithType: LocalTime.PlusMilliseconds
  fullName: NodaTime.LocalTime.PlusMilliseconds
- uid: NodaTime.LocalTime.PlusTicks*
  commentId: Overload:NodaTime.LocalTime.PlusTicks
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_PlusTicks_System_Int64_
  name: PlusTicks
  nameWithType: LocalTime.PlusTicks
  fullName: NodaTime.LocalTime.PlusTicks
- uid: NodaTime.LocalTime.PlusNanoseconds*
  commentId: Overload:NodaTime.LocalTime.PlusNanoseconds
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_PlusNanoseconds_System_Int64_
  name: PlusNanoseconds
  nameWithType: LocalTime.PlusNanoseconds
  fullName: NodaTime.LocalTime.PlusNanoseconds
- uid: NodaTime.LocalTime.With*
  commentId: Overload:NodaTime.LocalTime.With
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_With_System_Func_NodaTime_LocalTime_NodaTime_LocalTime__
  name: With
  nameWithType: LocalTime.With
  fullName: NodaTime.LocalTime.With
- uid: System.Func{NodaTime.LocalTime,NodaTime.LocalTime}
  commentId: T:System.Func{NodaTime.LocalTime,NodaTime.LocalTime}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<LocalTime, LocalTime>
  nameWithType: Func<LocalTime, LocalTime>
  fullName: System.Func<NodaTime.LocalTime, NodaTime.LocalTime>
  nameWithType.vb: Func(Of LocalTime, LocalTime)
  fullName.vb: System.Func(Of NodaTime.LocalTime, NodaTime.LocalTime)
  name.vb: Func(Of LocalTime, LocalTime)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NodaTime.OffsetTime
  commentId: T:NodaTime.OffsetTime
  parent: NodaTime
  href: NodaTime.OffsetTime.html
  name: OffsetTime
  nameWithType: OffsetTime
  fullName: NodaTime.OffsetTime
- uid: NodaTime.LocalTime.WithOffset*
  commentId: Overload:NodaTime.LocalTime.WithOffset
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_WithOffset_NodaTime_Offset_
  name: WithOffset
  nameWithType: LocalTime.WithOffset
  fullName: NodaTime.LocalTime.WithOffset
- uid: NodaTime.Offset
  commentId: T:NodaTime.Offset
  parent: NodaTime
  href: NodaTime.Offset.html
  name: Offset
  nameWithType: Offset
  fullName: NodaTime.Offset
- uid: NodaTime.LocalDate
  commentId: T:NodaTime.LocalDate
  parent: NodaTime
  href: NodaTime.LocalDate.html
  name: LocalDate
  nameWithType: LocalDate
  fullName: NodaTime.LocalDate
- uid: NodaTime.LocalDateTime
  commentId: T:NodaTime.LocalDateTime
  parent: NodaTime
  href: NodaTime.LocalDateTime.html
  name: LocalDateTime
  nameWithType: LocalDateTime
  fullName: NodaTime.LocalDateTime
- uid: NodaTime.LocalTime.On*
  commentId: Overload:NodaTime.LocalTime.On
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_On_NodaTime_LocalDate_
  name: On
  nameWithType: LocalTime.On
  fullName: NodaTime.LocalTime.On
- uid: NodaTime.LocalTime.Deconstruct*
  commentId: Overload:NodaTime.LocalTime.Deconstruct
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_Deconstruct_System_Int32__System_Int32__System_Int32__
  name: Deconstruct
  nameWithType: LocalTime.Deconstruct
  fullName: NodaTime.LocalTime.Deconstruct
- uid: NodaTime.LocalTime.Max*
  commentId: Overload:NodaTime.LocalTime.Max
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_Max_NodaTime_LocalTime_NodaTime_LocalTime_
  name: Max
  nameWithType: LocalTime.Max
  fullName: NodaTime.LocalTime.Max
- uid: NodaTime.LocalTime.Min*
  commentId: Overload:NodaTime.LocalTime.Min
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_Min_NodaTime_LocalTime_NodaTime_LocalTime_
  name: Min
  nameWithType: LocalTime.Min
  fullName: NodaTime.LocalTime.Min
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
- uid: NodaTime.LocalTime.ToString*
  commentId: Overload:NodaTime.LocalTime.ToString
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_ToString
  name: ToString
  nameWithType: LocalTime.ToString
  fullName: NodaTime.LocalTime.ToString
- uid: System.IFormatProvider
  commentId: T:System.IFormatProvider
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iformatprovider
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)
  parent: System.IFormattable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iformattable.tostring
  name: ToString(string, IFormatProvider)
  nameWithType: IFormattable.ToString(string, IFormatProvider)
  fullName: System.IFormattable.ToString(string, System.IFormatProvider)
  nameWithType.vb: IFormattable.ToString(String, IFormatProvider)
  fullName.vb: System.IFormattable.ToString(String, System.IFormatProvider)
  name.vb: ToString(String, IFormatProvider)
  spec.csharp:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iformattable.tostring
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.IFormatProvider
    name: IFormatProvider
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iformatprovider
  - name: )
  spec.vb:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iformattable.tostring
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.IFormatProvider
    name: IFormatProvider
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iformatprovider
  - name: )
- uid: System.Xml.Serialization.XmlSchemaExporter
  commentId: T:System.Xml.Serialization.XmlSchemaExporter
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.xmlschemaexporter
  name: XmlSchemaExporter
  nameWithType: XmlSchemaExporter
  fullName: System.Xml.Serialization.XmlSchemaExporter
- uid: NodaTime.LocalTime.AddSchema*
  commentId: Overload:NodaTime.LocalTime.AddSchema
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_AddSchema_System_Xml_Schema_XmlSchemaSet_
  name: AddSchema
  nameWithType: LocalTime.AddSchema
  fullName: NodaTime.LocalTime.AddSchema
- uid: System.Xml.Schema.XmlSchemaSet
  commentId: T:System.Xml.Schema.XmlSchemaSet
  parent: System.Xml.Schema
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.schema.xmlschemaset
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
- uid: System.Xml.XmlQualifiedName
  commentId: T:System.Xml.XmlQualifiedName
  parent: System.Xml
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.xmlqualifiedname
  name: XmlQualifiedName
  nameWithType: XmlQualifiedName
  fullName: System.Xml.XmlQualifiedName
- uid: System.Xml.Schema
  commentId: N:System.Xml.Schema
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Xml.Schema
  nameWithType: System.Xml.Schema
  fullName: System.Xml.Schema
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Xml
    name: Xml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml
  - name: .
  - uid: System.Xml.Schema
    name: Schema
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.schema
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Xml
    name: Xml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml
  - name: .
  - uid: System.Xml.Schema
    name: Schema
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.schema
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Xml
    name: Xml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Xml
    name: Xml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml
- uid: System.Xml.Serialization.XmlSchemaProviderAttribute
  commentId: T:System.Xml.Serialization.XmlSchemaProviderAttribute
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.xmlschemaproviderattribute
  name: XmlSchemaProviderAttribute
  nameWithType: XmlSchemaProviderAttribute
  fullName: System.Xml.Serialization.XmlSchemaProviderAttribute
- uid: System.Xml.Schema.XmlSchema
  commentId: T:System.Xml.Schema.XmlSchema
  parent: System.Xml.Schema
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.schema.xmlschema
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema
- uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  commentId: M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable.writexml
  name: WriteXml(XmlWriter)
  nameWithType: IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable.writexml
  - name: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.xmlwriter
  - name: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable.writexml
  - name: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.xmlwriter
  - name: )
- uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  commentId: M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable.readxml
  name: ReadXml(XmlReader)
  nameWithType: IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable.readxml
  - name: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.xmlreader
  - name: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable.readxml
  - name: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.xmlreader
  - name: )
- uid: NodaTime.LocalTime.System#Xml#Serialization#IXmlSerializable#GetSchema*
  commentId: Overload:NodaTime.LocalTime.System#Xml#Serialization#IXmlSerializable#GetSchema
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable
  name: IXmlSerializable.GetSchema
  nameWithType: LocalTime.IXmlSerializable.GetSchema
  fullName: NodaTime.LocalTime.System.Xml.Serialization.IXmlSerializable.GetSchema
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable*
    name: IXmlSerializable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable
  - name: .
  - uid: NodaTime.LocalTime.System#Xml#Serialization#IXmlSerializable#GetSchema*
    name: GetSchema
    href: NodaTime.LocalTime.html#NodaTime_LocalTime_System_Xml_Serialization_IXmlSerializable_GetSchema
- uid: System.Xml.XmlReader
  commentId: T:System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.xmlreader
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: NodaTime.LocalTime.System#Xml#Serialization#IXmlSerializable#ReadXml*
  commentId: Overload:NodaTime.LocalTime.System#Xml#Serialization#IXmlSerializable#ReadXml
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable
  name: IXmlSerializable.ReadXml
  nameWithType: LocalTime.IXmlSerializable.ReadXml
  fullName: NodaTime.LocalTime.System.Xml.Serialization.IXmlSerializable.ReadXml
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable*
    name: IXmlSerializable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable
  - name: .
  - uid: NodaTime.LocalTime.System#Xml#Serialization#IXmlSerializable#ReadXml*
    name: ReadXml
    href: NodaTime.LocalTime.html#NodaTime_LocalTime_System_Xml_Serialization_IXmlSerializable_ReadXml_System_Xml_XmlReader_
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.xmlwriter
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: NodaTime.LocalTime.System#Xml#Serialization#IXmlSerializable#WriteXml*
  commentId: Overload:NodaTime.LocalTime.System#Xml#Serialization#IXmlSerializable#WriteXml
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable
  name: IXmlSerializable.WriteXml
  nameWithType: LocalTime.IXmlSerializable.WriteXml
  fullName: NodaTime.LocalTime.System.Xml.Serialization.IXmlSerializable.WriteXml
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable*
    name: IXmlSerializable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable
  - name: .
  - uid: NodaTime.LocalTime.System#Xml#Serialization#IXmlSerializable#WriteXml*
    name: WriteXml
    href: NodaTime.LocalTime.html#NodaTime_LocalTime_System_Xml_Serialization_IXmlSerializable_WriteXml_System_Xml_XmlWriter_
- uid: System.TimeOnly
  commentId: T:System.TimeOnly
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timeonly
  name: TimeOnly
  nameWithType: TimeOnly
  fullName: System.TimeOnly
- uid: NodaTime.LocalTime.ToTimeOnly*
  commentId: Overload:NodaTime.LocalTime.ToTimeOnly
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_ToTimeOnly
  name: ToTimeOnly
  nameWithType: LocalTime.ToTimeOnly
  fullName: NodaTime.LocalTime.ToTimeOnly
- uid: NodaTime.LocalTime.FromTimeOnly*
  commentId: Overload:NodaTime.LocalTime.FromTimeOnly
  href: NodaTime.LocalTime.html#NodaTime_LocalTime_FromTimeOnly_System_TimeOnly_
  name: FromTimeOnly
  nameWithType: LocalTime.FromTimeOnly
  fullName: NodaTime.LocalTime.FromTimeOnly
shouldSkipMarkup: true
