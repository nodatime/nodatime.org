### YamlMime:ManagedReference
items:
- uid: NodaTime.TimeZones.TzdbZoneLocation
  commentId: T:NodaTime.TimeZones.TzdbZoneLocation
  id: TzdbZoneLocation
  parent: NodaTime.TimeZones
  children:
  - NodaTime.TimeZones.TzdbZoneLocation.#ctor(System.Int32,System.Int32,System.String,System.String,System.String,System.String)
  - NodaTime.TimeZones.TzdbZoneLocation.Comment
  - NodaTime.TimeZones.TzdbZoneLocation.CountryCode
  - NodaTime.TimeZones.TzdbZoneLocation.CountryName
  - NodaTime.TimeZones.TzdbZoneLocation.Latitude
  - NodaTime.TimeZones.TzdbZoneLocation.Longitude
  - NodaTime.TimeZones.TzdbZoneLocation.ZoneId
  langs:
  - csharp
  - vb
  name: TzdbZoneLocation
  nameWithType: TzdbZoneLocation
  fullName: NodaTime.TimeZones.TzdbZoneLocation
  type: Class
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: >-
    A location entry generated from the "zone.tab" file in a TZDB release. This can be used to provide

    users with a choice of time zone, although it is not internationalized.
  example: []
  syntax:
    content: public sealed class TzdbZoneLocation
    content.vb: Public NotInheritable Class TzdbZoneLocation
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: NodaTime.TimeZones.TzdbZoneLocation.Latitude
  commentId: P:NodaTime.TimeZones.TzdbZoneLocation.Latitude
  id: Latitude
  parent: NodaTime.TimeZones.TzdbZoneLocation
  langs:
  - csharp
  - vb
  name: Latitude
  nameWithType: TzdbZoneLocation.Latitude
  fullName: NodaTime.TimeZones.TzdbZoneLocation.Latitude
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: Gets the latitude in degrees; positive for North, negative for South.
  remarks: The value will be in the range [-90, 90].
  example: []
  syntax:
    content: public double Latitude { get; }
    parameters: []
    return:
      type: System.Double
      description: The latitude in degrees; positive for North, negative for South.
    content.vb: Public ReadOnly Property Latitude As Double
  overload: NodaTime.TimeZones.TzdbZoneLocation.Latitude*
- uid: NodaTime.TimeZones.TzdbZoneLocation.Longitude
  commentId: P:NodaTime.TimeZones.TzdbZoneLocation.Longitude
  id: Longitude
  parent: NodaTime.TimeZones.TzdbZoneLocation
  langs:
  - csharp
  - vb
  name: Longitude
  nameWithType: TzdbZoneLocation.Longitude
  fullName: NodaTime.TimeZones.TzdbZoneLocation.Longitude
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: Gets the longitude in degrees; positive for East, negative for West.
  remarks: The value will be in the range [-180, 180].
  example: []
  syntax:
    content: public double Longitude { get; }
    parameters: []
    return:
      type: System.Double
      description: The longitude in degrees; positive for East, negative for West.
    content.vb: Public ReadOnly Property Longitude As Double
  overload: NodaTime.TimeZones.TzdbZoneLocation.Longitude*
- uid: NodaTime.TimeZones.TzdbZoneLocation.CountryName
  commentId: P:NodaTime.TimeZones.TzdbZoneLocation.CountryName
  id: CountryName
  parent: NodaTime.TimeZones.TzdbZoneLocation
  langs:
  - csharp
  - vb
  name: CountryName
  nameWithType: TzdbZoneLocation.CountryName
  fullName: NodaTime.TimeZones.TzdbZoneLocation.CountryName
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: Gets the English name of the country containing the location, which is never empty.
  example: []
  syntax:
    content: public string CountryName { get; }
    parameters: []
    return:
      type: System.String
      description: The English name of the country containing the location.
    content.vb: Public ReadOnly Property CountryName As String
  overload: NodaTime.TimeZones.TzdbZoneLocation.CountryName*
- uid: NodaTime.TimeZones.TzdbZoneLocation.CountryCode
  commentId: P:NodaTime.TimeZones.TzdbZoneLocation.CountryCode
  id: CountryCode
  parent: NodaTime.TimeZones.TzdbZoneLocation
  langs:
  - csharp
  - vb
  name: CountryCode
  nameWithType: TzdbZoneLocation.CountryCode
  fullName: NodaTime.TimeZones.TzdbZoneLocation.CountryCode
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: Gets the ISO-3166 2-letter country code for the country containing the location.
  example: []
  syntax:
    content: public string CountryCode { get; }
    parameters: []
    return:
      type: System.String
      description: The ISO-3166 2-letter country code for the country containing the location.
    content.vb: Public ReadOnly Property CountryCode As String
  overload: NodaTime.TimeZones.TzdbZoneLocation.CountryCode*
- uid: NodaTime.TimeZones.TzdbZoneLocation.ZoneId
  commentId: P:NodaTime.TimeZones.TzdbZoneLocation.ZoneId
  id: ZoneId
  parent: NodaTime.TimeZones.TzdbZoneLocation
  langs:
  - csharp
  - vb
  name: ZoneId
  nameWithType: TzdbZoneLocation.ZoneId
  fullName: NodaTime.TimeZones.TzdbZoneLocation.ZoneId
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: The ID of the time zone for this location.
  remarks: If this mapping was fetched from a <xref href="NodaTime.TimeZones.TzdbDateTimeZoneSource" data-throw-if-not-resolved="false"></xref>, it will always be a valid ID within that source.
  example: []
  syntax:
    content: public string ZoneId { get; }
    parameters: []
    return:
      type: System.String
      description: The ID of the time zone for this location.
    content.vb: Public ReadOnly Property ZoneId As String
  overload: NodaTime.TimeZones.TzdbZoneLocation.ZoneId*
- uid: NodaTime.TimeZones.TzdbZoneLocation.Comment
  commentId: P:NodaTime.TimeZones.TzdbZoneLocation.Comment
  id: Comment
  parent: NodaTime.TimeZones.TzdbZoneLocation
  langs:
  - csharp
  - vb
  name: Comment
  nameWithType: TzdbZoneLocation.Comment
  fullName: NodaTime.TimeZones.TzdbZoneLocation.Comment
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: Gets the comment (in English) for the mapping, if any.
  remarks: >-
    This is usually used to differentiate between locations in the same country.

    This will return an empty string if no comment was provided in the original data.
  example: []
  syntax:
    content: public string Comment { get; }
    parameters: []
    return:
      type: System.String
      description: The comment (in English) for the mapping, if any.
    content.vb: Public ReadOnly Property Comment As String
  overload: NodaTime.TimeZones.TzdbZoneLocation.Comment*
- uid: NodaTime.TimeZones.TzdbZoneLocation.#ctor(System.Int32,System.Int32,System.String,System.String,System.String,System.String)
  commentId: M:NodaTime.TimeZones.TzdbZoneLocation.#ctor(System.Int32,System.Int32,System.String,System.String,System.String,System.String)
  id: '#ctor(System.Int32,System.Int32,System.String,System.String,System.String,System.String)'
  parent: NodaTime.TimeZones.TzdbZoneLocation
  langs:
  - csharp
  - vb
  name: TzdbZoneLocation(int, int, string, string, string, string)
  nameWithType: TzdbZoneLocation.TzdbZoneLocation(int, int, string, string, string, string)
  fullName: NodaTime.TimeZones.TzdbZoneLocation.TzdbZoneLocation(int, int, string, string, string, string)
  type: Constructor
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: Creates a new location.
  remarks: >-
    This constructor is only public for the sake of testability. Non-test code should
        usually obtain locations from a <xref href="NodaTime.TimeZones.TzdbDateTimeZoneSource" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public TzdbZoneLocation(int latitudeSeconds, int longitudeSeconds, string countryName, string countryCode, string zoneId, string comment)
    parameters:
    - id: latitudeSeconds
      type: System.Int32
      description: Latitude of the location, in seconds.
    - id: longitudeSeconds
      type: System.Int32
      description: Longitude of the location, in seconds.
    - id: countryName
      type: System.String
      description: English country name of the location, in degrees. Must not be null.
    - id: countryCode
      type: System.String
      description: ISO-3166 country code of the location. Must not be null.
    - id: zoneId
      type: System.String
      description: Time zone identifier of the location. Must not be null.
    - id: comment
      type: System.String
      description: Optional comment. Must not be null, but may be empty.
    content.vb: Public Sub New(latitudeSeconds As Integer, longitudeSeconds As Integer, countryName As String, countryCode As String, zoneId As String, comment As String)
  overload: NodaTime.TimeZones.TzdbZoneLocation.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The latitude or longitude is invalid.
  nameWithType.vb: TzdbZoneLocation.New(Integer, Integer, String, String, String, String)
  fullName.vb: NodaTime.TimeZones.TzdbZoneLocation.New(Integer, Integer, String, String, String, String)
  name.vb: New(Integer, Integer, String, String, String, String)
references:
- uid: NodaTime.TimeZones
  commentId: N:NodaTime.TimeZones
  href: NodaTime.html
  name: NodaTime.TimeZones
  nameWithType: NodaTime.TimeZones
  fullName: NodaTime.TimeZones
  spec.csharp:
  - uid: NodaTime
    name: NodaTime
    href: NodaTime.html
  - name: .
  - uid: NodaTime.TimeZones
    name: TimeZones
    href: NodaTime.TimeZones.html
  spec.vb:
  - uid: NodaTime
    name: NodaTime
    href: NodaTime.html
  - name: .
  - uid: NodaTime.TimeZones
    name: TimeZones
    href: NodaTime.TimeZones.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: NodaTime.TimeZones.TzdbZoneLocation.Latitude*
  commentId: Overload:NodaTime.TimeZones.TzdbZoneLocation.Latitude
  href: NodaTime.TimeZones.TzdbZoneLocation.html#NodaTime_TimeZones_TzdbZoneLocation_Latitude
  name: Latitude
  nameWithType: TzdbZoneLocation.Latitude
  fullName: NodaTime.TimeZones.TzdbZoneLocation.Latitude
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: NodaTime.TimeZones.TzdbZoneLocation.Longitude*
  commentId: Overload:NodaTime.TimeZones.TzdbZoneLocation.Longitude
  href: NodaTime.TimeZones.TzdbZoneLocation.html#NodaTime_TimeZones_TzdbZoneLocation_Longitude
  name: Longitude
  nameWithType: TzdbZoneLocation.Longitude
  fullName: NodaTime.TimeZones.TzdbZoneLocation.Longitude
- uid: NodaTime.TimeZones.TzdbZoneLocation.CountryName*
  commentId: Overload:NodaTime.TimeZones.TzdbZoneLocation.CountryName
  href: NodaTime.TimeZones.TzdbZoneLocation.html#NodaTime_TimeZones_TzdbZoneLocation_CountryName
  name: CountryName
  nameWithType: TzdbZoneLocation.CountryName
  fullName: NodaTime.TimeZones.TzdbZoneLocation.CountryName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: NodaTime.TimeZones.TzdbZoneLocation.CountryCode*
  commentId: Overload:NodaTime.TimeZones.TzdbZoneLocation.CountryCode
  href: NodaTime.TimeZones.TzdbZoneLocation.html#NodaTime_TimeZones_TzdbZoneLocation_CountryCode
  name: CountryCode
  nameWithType: TzdbZoneLocation.CountryCode
  fullName: NodaTime.TimeZones.TzdbZoneLocation.CountryCode
- uid: NodaTime.TimeZones.TzdbDateTimeZoneSource
  commentId: T:NodaTime.TimeZones.TzdbDateTimeZoneSource
  parent: NodaTime.TimeZones
  href: NodaTime.TimeZones.TzdbDateTimeZoneSource.html
  name: TzdbDateTimeZoneSource
  nameWithType: TzdbDateTimeZoneSource
  fullName: NodaTime.TimeZones.TzdbDateTimeZoneSource
- uid: NodaTime.TimeZones.TzdbZoneLocation.ZoneId*
  commentId: Overload:NodaTime.TimeZones.TzdbZoneLocation.ZoneId
  href: NodaTime.TimeZones.TzdbZoneLocation.html#NodaTime_TimeZones_TzdbZoneLocation_ZoneId
  name: ZoneId
  nameWithType: TzdbZoneLocation.ZoneId
  fullName: NodaTime.TimeZones.TzdbZoneLocation.ZoneId
- uid: NodaTime.TimeZones.TzdbZoneLocation.Comment*
  commentId: Overload:NodaTime.TimeZones.TzdbZoneLocation.Comment
  href: NodaTime.TimeZones.TzdbZoneLocation.html#NodaTime_TimeZones_TzdbZoneLocation_Comment
  name: Comment
  nameWithType: TzdbZoneLocation.Comment
  fullName: NodaTime.TimeZones.TzdbZoneLocation.Comment
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: NodaTime.TimeZones.TzdbZoneLocation.#ctor*
  commentId: Overload:NodaTime.TimeZones.TzdbZoneLocation.#ctor
  href: NodaTime.TimeZones.TzdbZoneLocation.html#NodaTime_TimeZones_TzdbZoneLocation__ctor_System_Int32_System_Int32_System_String_System_String_System_String_System_String_
  name: TzdbZoneLocation
  nameWithType: TzdbZoneLocation.TzdbZoneLocation
  fullName: NodaTime.TimeZones.TzdbZoneLocation.TzdbZoneLocation
  nameWithType.vb: TzdbZoneLocation.New
  fullName.vb: NodaTime.TimeZones.TzdbZoneLocation.New
  name.vb: New
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
shouldSkipMarkup: true
