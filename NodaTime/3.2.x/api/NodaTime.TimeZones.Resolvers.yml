### YamlMime:ManagedReference
items:
- uid: NodaTime.TimeZones.Resolvers
  commentId: T:NodaTime.TimeZones.Resolvers
  id: Resolvers
  parent: NodaTime.TimeZones
  children:
  - NodaTime.TimeZones.Resolvers.CreateMappingResolver(NodaTime.TimeZones.AmbiguousTimeResolver,NodaTime.TimeZones.SkippedTimeResolver)
  - NodaTime.TimeZones.Resolvers.LenientResolver
  - NodaTime.TimeZones.Resolvers.ReturnEarlier
  - NodaTime.TimeZones.Resolvers.ReturnEndOfIntervalBefore
  - NodaTime.TimeZones.Resolvers.ReturnForwardShifted
  - NodaTime.TimeZones.Resolvers.ReturnLater
  - NodaTime.TimeZones.Resolvers.ReturnStartOfIntervalAfter
  - NodaTime.TimeZones.Resolvers.StrictResolver
  - NodaTime.TimeZones.Resolvers.ThrowWhenAmbiguous
  - NodaTime.TimeZones.Resolvers.ThrowWhenSkipped
  langs:
  - csharp
  - vb
  name: Resolvers
  nameWithType: Resolvers
  fullName: NodaTime.TimeZones.Resolvers
  type: Class
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: >-
    Commonly-used implementations of the delegates used in resolving a <xref href="NodaTime.LocalDateTime" data-throw-if-not-resolved="false"></xref> to a

    <xref href="NodaTime.ZonedDateTime" data-throw-if-not-resolved="false"></xref>, and a method to combine two "partial" resolvers into a full one.
  remarks: >-
    <p>

    This class contains predefined implementations of <xref href="NodaTime.TimeZones.ZoneLocalMappingResolver" data-throw-if-not-resolved="false"></xref>,

    <xref href="NodaTime.TimeZones.AmbiguousTimeResolver" data-throw-if-not-resolved="false"></xref>, and <xref href="NodaTime.TimeZones.SkippedTimeResolver" data-throw-if-not-resolved="false"></xref>, along with

    <xref href="NodaTime.TimeZones.Resolvers.CreateMappingResolver(NodaTime.TimeZones.AmbiguousTimeResolver%2cNodaTime.TimeZones.SkippedTimeResolver)" data-throw-if-not-resolved="false"></xref>, which produces a <code>ZoneLocalMappingResolver</code> from instances of the

    other two.

    </p>
  example: []
  syntax:
    content: public static class Resolvers
    content.vb: Public Module Resolvers
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: NodaTime.TimeZones.Resolvers.ReturnEarlier
  commentId: P:NodaTime.TimeZones.Resolvers.ReturnEarlier
  id: ReturnEarlier
  parent: NodaTime.TimeZones.Resolvers
  langs:
  - csharp
  - vb
  name: ReturnEarlier
  nameWithType: Resolvers.ReturnEarlier
  fullName: NodaTime.TimeZones.Resolvers.ReturnEarlier
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: An <xref href="NodaTime.TimeZones.AmbiguousTimeResolver" data-throw-if-not-resolved="false"></xref> which returns the earlier of the two matching times.
  example: []
  syntax:
    content: public static AmbiguousTimeResolver ReturnEarlier { get; }
    parameters: []
    return:
      type: NodaTime.TimeZones.AmbiguousTimeResolver
      description: An <xref href="NodaTime.TimeZones.AmbiguousTimeResolver" data-throw-if-not-resolved="false"></xref> which returns the earlier of the two matching times.
    content.vb: Public Shared ReadOnly Property ReturnEarlier As AmbiguousTimeResolver
  overload: NodaTime.TimeZones.Resolvers.ReturnEarlier*
- uid: NodaTime.TimeZones.Resolvers.ReturnLater
  commentId: P:NodaTime.TimeZones.Resolvers.ReturnLater
  id: ReturnLater
  parent: NodaTime.TimeZones.Resolvers
  langs:
  - csharp
  - vb
  name: ReturnLater
  nameWithType: Resolvers.ReturnLater
  fullName: NodaTime.TimeZones.Resolvers.ReturnLater
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: An <xref href="NodaTime.TimeZones.AmbiguousTimeResolver" data-throw-if-not-resolved="false"></xref> which returns the later of the two matching times.
  example: []
  syntax:
    content: public static AmbiguousTimeResolver ReturnLater { get; }
    parameters: []
    return:
      type: NodaTime.TimeZones.AmbiguousTimeResolver
      description: An <xref href="NodaTime.TimeZones.AmbiguousTimeResolver" data-throw-if-not-resolved="false"></xref> which returns the later of the two matching times.
    content.vb: Public Shared ReadOnly Property ReturnLater As AmbiguousTimeResolver
  overload: NodaTime.TimeZones.Resolvers.ReturnLater*
- uid: NodaTime.TimeZones.Resolvers.ThrowWhenAmbiguous
  commentId: P:NodaTime.TimeZones.Resolvers.ThrowWhenAmbiguous
  id: ThrowWhenAmbiguous
  parent: NodaTime.TimeZones.Resolvers
  langs:
  - csharp
  - vb
  name: ThrowWhenAmbiguous
  nameWithType: Resolvers.ThrowWhenAmbiguous
  fullName: NodaTime.TimeZones.Resolvers.ThrowWhenAmbiguous
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: An <xref href="NodaTime.TimeZones.AmbiguousTimeResolver" data-throw-if-not-resolved="false"></xref> which simply throws an <xref href="NodaTime.AmbiguousTimeException" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static AmbiguousTimeResolver ThrowWhenAmbiguous { get; }
    parameters: []
    return:
      type: NodaTime.TimeZones.AmbiguousTimeResolver
      description: An <xref href="NodaTime.TimeZones.AmbiguousTimeResolver" data-throw-if-not-resolved="false"></xref> which simply throws an <xref href="NodaTime.AmbiguousTimeException" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared ReadOnly Property ThrowWhenAmbiguous As AmbiguousTimeResolver
  overload: NodaTime.TimeZones.Resolvers.ThrowWhenAmbiguous*
- uid: NodaTime.TimeZones.Resolvers.ReturnEndOfIntervalBefore
  commentId: P:NodaTime.TimeZones.Resolvers.ReturnEndOfIntervalBefore
  id: ReturnEndOfIntervalBefore
  parent: NodaTime.TimeZones.Resolvers
  langs:
  - csharp
  - vb
  name: ReturnEndOfIntervalBefore
  nameWithType: Resolvers.ReturnEndOfIntervalBefore
  fullName: NodaTime.TimeZones.Resolvers.ReturnEndOfIntervalBefore
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: >-
    A <xref href="NodaTime.TimeZones.SkippedTimeResolver" data-throw-if-not-resolved="false"></xref> which returns the final tick of the time zone interval

    before the "gap".
  example: []
  syntax:
    content: public static SkippedTimeResolver ReturnEndOfIntervalBefore { get; }
    parameters: []
    return:
      type: NodaTime.TimeZones.SkippedTimeResolver
      description: >-
        A <xref href="NodaTime.TimeZones.SkippedTimeResolver" data-throw-if-not-resolved="false"></xref> which returns the final tick of the time zone interval
            before the "gap".
    content.vb: Public Shared ReadOnly Property ReturnEndOfIntervalBefore As SkippedTimeResolver
  overload: NodaTime.TimeZones.Resolvers.ReturnEndOfIntervalBefore*
- uid: NodaTime.TimeZones.Resolvers.ReturnStartOfIntervalAfter
  commentId: P:NodaTime.TimeZones.Resolvers.ReturnStartOfIntervalAfter
  id: ReturnStartOfIntervalAfter
  parent: NodaTime.TimeZones.Resolvers
  langs:
  - csharp
  - vb
  name: ReturnStartOfIntervalAfter
  nameWithType: Resolvers.ReturnStartOfIntervalAfter
  fullName: NodaTime.TimeZones.Resolvers.ReturnStartOfIntervalAfter
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: >-
    A <xref href="NodaTime.TimeZones.SkippedTimeResolver" data-throw-if-not-resolved="false"></xref> which returns the first tick of the time zone interval

    after the "gap".
  example: []
  syntax:
    content: public static SkippedTimeResolver ReturnStartOfIntervalAfter { get; }
    parameters: []
    return:
      type: NodaTime.TimeZones.SkippedTimeResolver
      description: >-
        A <xref href="NodaTime.TimeZones.SkippedTimeResolver" data-throw-if-not-resolved="false"></xref> which returns the first tick of the time zone interval

        after the "gap".
    content.vb: Public Shared ReadOnly Property ReturnStartOfIntervalAfter As SkippedTimeResolver
  overload: NodaTime.TimeZones.Resolvers.ReturnStartOfIntervalAfter*
- uid: NodaTime.TimeZones.Resolvers.ReturnForwardShifted
  commentId: P:NodaTime.TimeZones.Resolvers.ReturnForwardShifted
  id: ReturnForwardShifted
  parent: NodaTime.TimeZones.Resolvers
  langs:
  - csharp
  - vb
  name: ReturnForwardShifted
  nameWithType: Resolvers.ReturnForwardShifted
  fullName: NodaTime.TimeZones.Resolvers.ReturnForwardShifted
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: >-
    A <xref href="NodaTime.TimeZones.SkippedTimeResolver" data-throw-if-not-resolved="false"></xref> which shifts values in the "gap" forward by the duration

    of the gap (which is usually 1 hour). This corresponds to the instant that would have occured,

    had there not been a transition.
  example: []
  syntax:
    content: public static SkippedTimeResolver ReturnForwardShifted { get; }
    parameters: []
    return:
      type: NodaTime.TimeZones.SkippedTimeResolver
      description: >-
        A <xref href="NodaTime.TimeZones.SkippedTimeResolver" data-throw-if-not-resolved="false"></xref> which shifts values in the "gap" forward by the duration

        of the gap (which is usually 1 hour).
    content.vb: Public Shared ReadOnly Property ReturnForwardShifted As SkippedTimeResolver
  overload: NodaTime.TimeZones.Resolvers.ReturnForwardShifted*
- uid: NodaTime.TimeZones.Resolvers.ThrowWhenSkipped
  commentId: P:NodaTime.TimeZones.Resolvers.ThrowWhenSkipped
  id: ThrowWhenSkipped
  parent: NodaTime.TimeZones.Resolvers
  langs:
  - csharp
  - vb
  name: ThrowWhenSkipped
  nameWithType: Resolvers.ThrowWhenSkipped
  fullName: NodaTime.TimeZones.Resolvers.ThrowWhenSkipped
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: A <xref href="NodaTime.TimeZones.SkippedTimeResolver" data-throw-if-not-resolved="false"></xref> which simply throws a <xref href="NodaTime.SkippedTimeException" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static SkippedTimeResolver ThrowWhenSkipped { get; }
    parameters: []
    return:
      type: NodaTime.TimeZones.SkippedTimeResolver
      description: A <xref href="NodaTime.TimeZones.SkippedTimeResolver" data-throw-if-not-resolved="false"></xref> which simply throws a <xref href="NodaTime.SkippedTimeException" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared ReadOnly Property ThrowWhenSkipped As SkippedTimeResolver
  overload: NodaTime.TimeZones.Resolvers.ThrowWhenSkipped*
- uid: NodaTime.TimeZones.Resolvers.StrictResolver
  commentId: P:NodaTime.TimeZones.Resolvers.StrictResolver
  id: StrictResolver
  parent: NodaTime.TimeZones.Resolvers
  langs:
  - csharp
  - vb
  name: StrictResolver
  nameWithType: Resolvers.StrictResolver
  fullName: NodaTime.TimeZones.Resolvers.StrictResolver
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: >-
    A <xref href="NodaTime.TimeZones.ZoneLocalMappingResolver" data-throw-if-not-resolved="false"></xref> which only ever succeeds in the (usual) case where the result

    of the mapping is unambiguous.
  remarks: >-
    If the mapping is ambiguous or skipped, this throws <xref href="NodaTime.SkippedTimeException" data-throw-if-not-resolved="false"></xref> or

    <xref href="NodaTime.AmbiguousTimeException" data-throw-if-not-resolved="false"></xref>, as appropriate. This resolver combines

    <xref href="NodaTime.TimeZones.Resolvers.ThrowWhenAmbiguous" data-throw-if-not-resolved="false"></xref> and <xref href="NodaTime.TimeZones.Resolvers.ThrowWhenSkipped" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static ZoneLocalMappingResolver StrictResolver { get; }
    parameters: []
    return:
      type: NodaTime.TimeZones.ZoneLocalMappingResolver
      description: >-
        A <xref href="NodaTime.TimeZones.ZoneLocalMappingResolver" data-throw-if-not-resolved="false"></xref> which only ever succeeds in the (usual) case where the result
            of the mapping is unambiguous.
    content.vb: Public Shared ReadOnly Property StrictResolver As ZoneLocalMappingResolver
  overload: NodaTime.TimeZones.Resolvers.StrictResolver*
  seealso:
  - linkId: NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
    commentId: M:NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
- uid: NodaTime.TimeZones.Resolvers.LenientResolver
  commentId: P:NodaTime.TimeZones.Resolvers.LenientResolver
  id: LenientResolver
  parent: NodaTime.TimeZones.Resolvers
  langs:
  - csharp
  - vb
  name: LenientResolver
  nameWithType: Resolvers.LenientResolver
  fullName: NodaTime.TimeZones.Resolvers.LenientResolver
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: A <xref href="NodaTime.TimeZones.ZoneLocalMappingResolver" data-throw-if-not-resolved="false"></xref> which never throws an exception due to ambiguity or skipped time.
  remarks: >-
    Ambiguity is handled by returning the earlier occurrence, and skipped times are shifted forward by the duration

    of the gap. This resolver combines <xref href="NodaTime.TimeZones.Resolvers.ReturnEarlier" data-throw-if-not-resolved="false"></xref> and <xref href="NodaTime.TimeZones.Resolvers.ReturnForwardShifted" data-throw-if-not-resolved="false"></xref>.

    <p>Note: The behavior of this resolver was changed in version 2.0 to fit the most commonly seen real-world

    usage pattern.  Previous versions combined the <xref href="NodaTime.TimeZones.Resolvers.ReturnLater" data-throw-if-not-resolved="false"></xref> and <xref href="NodaTime.TimeZones.Resolvers.ReturnStartOfIntervalAfter" data-throw-if-not-resolved="false"></xref>

    resolvers, which can still be used separately if desired.</p>
  example: []
  syntax:
    content: public static ZoneLocalMappingResolver LenientResolver { get; }
    parameters: []
    return:
      type: NodaTime.TimeZones.ZoneLocalMappingResolver
      description: A <xref href="NodaTime.TimeZones.ZoneLocalMappingResolver" data-throw-if-not-resolved="false"></xref> which never throws an exception due to ambiguity or skipped time.
    content.vb: Public Shared ReadOnly Property LenientResolver As ZoneLocalMappingResolver
  overload: NodaTime.TimeZones.Resolvers.LenientResolver*
  seealso:
  - linkId: NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
    commentId: M:NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
- uid: NodaTime.TimeZones.Resolvers.CreateMappingResolver(NodaTime.TimeZones.AmbiguousTimeResolver,NodaTime.TimeZones.SkippedTimeResolver)
  commentId: M:NodaTime.TimeZones.Resolvers.CreateMappingResolver(NodaTime.TimeZones.AmbiguousTimeResolver,NodaTime.TimeZones.SkippedTimeResolver)
  id: CreateMappingResolver(NodaTime.TimeZones.AmbiguousTimeResolver,NodaTime.TimeZones.SkippedTimeResolver)
  parent: NodaTime.TimeZones.Resolvers
  langs:
  - csharp
  - vb
  name: CreateMappingResolver(AmbiguousTimeResolver, SkippedTimeResolver)
  nameWithType: Resolvers.CreateMappingResolver(AmbiguousTimeResolver, SkippedTimeResolver)
  fullName: NodaTime.TimeZones.Resolvers.CreateMappingResolver(NodaTime.TimeZones.AmbiguousTimeResolver, NodaTime.TimeZones.SkippedTimeResolver)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: >-
    Combines an <xref href="NodaTime.TimeZones.AmbiguousTimeResolver" data-throw-if-not-resolved="false"></xref> and a <xref href="NodaTime.TimeZones.SkippedTimeResolver" data-throw-if-not-resolved="false"></xref> to create a

    <xref href="NodaTime.TimeZones.ZoneLocalMappingResolver" data-throw-if-not-resolved="false"></xref>.
  remarks: >-
    The <code>ZoneLocalMappingResolver</code> created by this method operates in the obvious way: unambiguous mappings

    are returned directly, ambiguous mappings are delegated to the given <code>AmbiguousTimeResolver</code>, and

    "skipped" mappings are delegated to the given <code>SkippedTimeResolver</code>.
  example: []
  syntax:
    content: public static ZoneLocalMappingResolver CreateMappingResolver(AmbiguousTimeResolver ambiguousTimeResolver, SkippedTimeResolver skippedTimeResolver)
    parameters:
    - id: ambiguousTimeResolver
      type: NodaTime.TimeZones.AmbiguousTimeResolver
      description: Resolver to use for ambiguous mappings.
    - id: skippedTimeResolver
      type: NodaTime.TimeZones.SkippedTimeResolver
      description: Resolver to use for "skipped" mappings.
    return:
      type: NodaTime.TimeZones.ZoneLocalMappingResolver
      description: The logical combination of the two resolvers.
    content.vb: Public Shared Function CreateMappingResolver(ambiguousTimeResolver As AmbiguousTimeResolver, skippedTimeResolver As SkippedTimeResolver) As ZoneLocalMappingResolver
  overload: NodaTime.TimeZones.Resolvers.CreateMappingResolver*
references:
- uid: NodaTime.LocalDateTime
  commentId: T:NodaTime.LocalDateTime
  parent: NodaTime
  href: NodaTime.LocalDateTime.html
  name: LocalDateTime
  nameWithType: LocalDateTime
  fullName: NodaTime.LocalDateTime
- uid: NodaTime.ZonedDateTime
  commentId: T:NodaTime.ZonedDateTime
  parent: NodaTime
  href: NodaTime.ZonedDateTime.html
  name: ZonedDateTime
  nameWithType: ZonedDateTime
  fullName: NodaTime.ZonedDateTime
- uid: NodaTime.TimeZones.ZoneLocalMappingResolver
  commentId: T:NodaTime.TimeZones.ZoneLocalMappingResolver
  parent: NodaTime.TimeZones
  href: NodaTime.TimeZones.ZoneLocalMappingResolver.html
  name: ZoneLocalMappingResolver
  nameWithType: ZoneLocalMappingResolver
  fullName: NodaTime.TimeZones.ZoneLocalMappingResolver
- uid: NodaTime.TimeZones.AmbiguousTimeResolver
  commentId: T:NodaTime.TimeZones.AmbiguousTimeResolver
  parent: NodaTime.TimeZones
  href: NodaTime.TimeZones.AmbiguousTimeResolver.html
  name: AmbiguousTimeResolver
  nameWithType: AmbiguousTimeResolver
  fullName: NodaTime.TimeZones.AmbiguousTimeResolver
- uid: NodaTime.TimeZones.SkippedTimeResolver
  commentId: T:NodaTime.TimeZones.SkippedTimeResolver
  parent: NodaTime.TimeZones
  href: NodaTime.TimeZones.SkippedTimeResolver.html
  name: SkippedTimeResolver
  nameWithType: SkippedTimeResolver
  fullName: NodaTime.TimeZones.SkippedTimeResolver
- uid: NodaTime.TimeZones.Resolvers.CreateMappingResolver(NodaTime.TimeZones.AmbiguousTimeResolver,NodaTime.TimeZones.SkippedTimeResolver)
  commentId: M:NodaTime.TimeZones.Resolvers.CreateMappingResolver(NodaTime.TimeZones.AmbiguousTimeResolver,NodaTime.TimeZones.SkippedTimeResolver)
  href: NodaTime.TimeZones.Resolvers.html#NodaTime_TimeZones_Resolvers_CreateMappingResolver_NodaTime_TimeZones_AmbiguousTimeResolver_NodaTime_TimeZones_SkippedTimeResolver_
  name: CreateMappingResolver(AmbiguousTimeResolver, SkippedTimeResolver)
  nameWithType: Resolvers.CreateMappingResolver(AmbiguousTimeResolver, SkippedTimeResolver)
  fullName: NodaTime.TimeZones.Resolvers.CreateMappingResolver(NodaTime.TimeZones.AmbiguousTimeResolver, NodaTime.TimeZones.SkippedTimeResolver)
  spec.csharp:
  - uid: NodaTime.TimeZones.Resolvers.CreateMappingResolver(NodaTime.TimeZones.AmbiguousTimeResolver,NodaTime.TimeZones.SkippedTimeResolver)
    name: CreateMappingResolver
    href: NodaTime.TimeZones.Resolvers.html#NodaTime_TimeZones_Resolvers_CreateMappingResolver_NodaTime_TimeZones_AmbiguousTimeResolver_NodaTime_TimeZones_SkippedTimeResolver_
  - name: (
  - uid: NodaTime.TimeZones.AmbiguousTimeResolver
    name: AmbiguousTimeResolver
    href: NodaTime.TimeZones.AmbiguousTimeResolver.html
  - name: ','
  - name: " "
  - uid: NodaTime.TimeZones.SkippedTimeResolver
    name: SkippedTimeResolver
    href: NodaTime.TimeZones.SkippedTimeResolver.html
  - name: )
  spec.vb:
  - uid: NodaTime.TimeZones.Resolvers.CreateMappingResolver(NodaTime.TimeZones.AmbiguousTimeResolver,NodaTime.TimeZones.SkippedTimeResolver)
    name: CreateMappingResolver
    href: NodaTime.TimeZones.Resolvers.html#NodaTime_TimeZones_Resolvers_CreateMappingResolver_NodaTime_TimeZones_AmbiguousTimeResolver_NodaTime_TimeZones_SkippedTimeResolver_
  - name: (
  - uid: NodaTime.TimeZones.AmbiguousTimeResolver
    name: AmbiguousTimeResolver
    href: NodaTime.TimeZones.AmbiguousTimeResolver.html
  - name: ','
  - name: " "
  - uid: NodaTime.TimeZones.SkippedTimeResolver
    name: SkippedTimeResolver
    href: NodaTime.TimeZones.SkippedTimeResolver.html
  - name: )
- uid: NodaTime.TimeZones
  commentId: N:NodaTime.TimeZones
  href: NodaTime.html
  name: NodaTime.TimeZones
  nameWithType: NodaTime.TimeZones
  fullName: NodaTime.TimeZones
  spec.csharp:
  - uid: NodaTime
    name: NodaTime
    href: NodaTime.html
  - name: .
  - uid: NodaTime.TimeZones
    name: TimeZones
    href: NodaTime.TimeZones.html
  spec.vb:
  - uid: NodaTime
    name: NodaTime
    href: NodaTime.html
  - name: .
  - uid: NodaTime.TimeZones
    name: TimeZones
    href: NodaTime.TimeZones.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: NodaTime
  commentId: N:NodaTime
  href: NodaTime.html
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: NodaTime.TimeZones.Resolvers.ReturnEarlier*
  commentId: Overload:NodaTime.TimeZones.Resolvers.ReturnEarlier
  href: NodaTime.TimeZones.Resolvers.html#NodaTime_TimeZones_Resolvers_ReturnEarlier
  name: ReturnEarlier
  nameWithType: Resolvers.ReturnEarlier
  fullName: NodaTime.TimeZones.Resolvers.ReturnEarlier
- uid: NodaTime.TimeZones.Resolvers.ReturnLater*
  commentId: Overload:NodaTime.TimeZones.Resolvers.ReturnLater
  href: NodaTime.TimeZones.Resolvers.html#NodaTime_TimeZones_Resolvers_ReturnLater
  name: ReturnLater
  nameWithType: Resolvers.ReturnLater
  fullName: NodaTime.TimeZones.Resolvers.ReturnLater
- uid: NodaTime.AmbiguousTimeException
  commentId: T:NodaTime.AmbiguousTimeException
  href: NodaTime.AmbiguousTimeException.html
  name: AmbiguousTimeException
  nameWithType: AmbiguousTimeException
  fullName: NodaTime.AmbiguousTimeException
- uid: NodaTime.TimeZones.Resolvers.ThrowWhenAmbiguous*
  commentId: Overload:NodaTime.TimeZones.Resolvers.ThrowWhenAmbiguous
  href: NodaTime.TimeZones.Resolvers.html#NodaTime_TimeZones_Resolvers_ThrowWhenAmbiguous
  name: ThrowWhenAmbiguous
  nameWithType: Resolvers.ThrowWhenAmbiguous
  fullName: NodaTime.TimeZones.Resolvers.ThrowWhenAmbiguous
- uid: NodaTime.TimeZones.Resolvers.ReturnEndOfIntervalBefore*
  commentId: Overload:NodaTime.TimeZones.Resolvers.ReturnEndOfIntervalBefore
  href: NodaTime.TimeZones.Resolvers.html#NodaTime_TimeZones_Resolvers_ReturnEndOfIntervalBefore
  name: ReturnEndOfIntervalBefore
  nameWithType: Resolvers.ReturnEndOfIntervalBefore
  fullName: NodaTime.TimeZones.Resolvers.ReturnEndOfIntervalBefore
- uid: NodaTime.TimeZones.Resolvers.ReturnStartOfIntervalAfter*
  commentId: Overload:NodaTime.TimeZones.Resolvers.ReturnStartOfIntervalAfter
  href: NodaTime.TimeZones.Resolvers.html#NodaTime_TimeZones_Resolvers_ReturnStartOfIntervalAfter
  name: ReturnStartOfIntervalAfter
  nameWithType: Resolvers.ReturnStartOfIntervalAfter
  fullName: NodaTime.TimeZones.Resolvers.ReturnStartOfIntervalAfter
- uid: NodaTime.TimeZones.Resolvers.ReturnForwardShifted*
  commentId: Overload:NodaTime.TimeZones.Resolvers.ReturnForwardShifted
  href: NodaTime.TimeZones.Resolvers.html#NodaTime_TimeZones_Resolvers_ReturnForwardShifted
  name: ReturnForwardShifted
  nameWithType: Resolvers.ReturnForwardShifted
  fullName: NodaTime.TimeZones.Resolvers.ReturnForwardShifted
- uid: NodaTime.SkippedTimeException
  commentId: T:NodaTime.SkippedTimeException
  href: NodaTime.SkippedTimeException.html
  name: SkippedTimeException
  nameWithType: SkippedTimeException
  fullName: NodaTime.SkippedTimeException
- uid: NodaTime.TimeZones.Resolvers.ThrowWhenSkipped*
  commentId: Overload:NodaTime.TimeZones.Resolvers.ThrowWhenSkipped
  href: NodaTime.TimeZones.Resolvers.html#NodaTime_TimeZones_Resolvers_ThrowWhenSkipped
  name: ThrowWhenSkipped
  nameWithType: Resolvers.ThrowWhenSkipped
  fullName: NodaTime.TimeZones.Resolvers.ThrowWhenSkipped
- uid: NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
  commentId: M:NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
  parent: NodaTime.DateTimeZone
  href: NodaTime.DateTimeZone.html#NodaTime_DateTimeZone_AtStrictly_NodaTime_LocalDateTime_
  name: AtStrictly(LocalDateTime)
  nameWithType: DateTimeZone.AtStrictly(LocalDateTime)
  fullName: NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
    name: AtStrictly
    href: NodaTime.DateTimeZone.html#NodaTime_DateTimeZone_AtStrictly_NodaTime_LocalDateTime_
  - name: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    href: NodaTime.LocalDateTime.html
  - name: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.AtStrictly(NodaTime.LocalDateTime)
    name: AtStrictly
    href: NodaTime.DateTimeZone.html#NodaTime_DateTimeZone_AtStrictly_NodaTime_LocalDateTime_
  - name: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    href: NodaTime.LocalDateTime.html
  - name: )
- uid: NodaTime.TimeZones.Resolvers.ThrowWhenAmbiguous
  commentId: P:NodaTime.TimeZones.Resolvers.ThrowWhenAmbiguous
  href: NodaTime.TimeZones.Resolvers.html#NodaTime_TimeZones_Resolvers_ThrowWhenAmbiguous
  name: ThrowWhenAmbiguous
  nameWithType: Resolvers.ThrowWhenAmbiguous
  fullName: NodaTime.TimeZones.Resolvers.ThrowWhenAmbiguous
- uid: NodaTime.TimeZones.Resolvers.ThrowWhenSkipped
  commentId: P:NodaTime.TimeZones.Resolvers.ThrowWhenSkipped
  href: NodaTime.TimeZones.Resolvers.html#NodaTime_TimeZones_Resolvers_ThrowWhenSkipped
  name: ThrowWhenSkipped
  nameWithType: Resolvers.ThrowWhenSkipped
  fullName: NodaTime.TimeZones.Resolvers.ThrowWhenSkipped
- uid: NodaTime.TimeZones.Resolvers.StrictResolver*
  commentId: Overload:NodaTime.TimeZones.Resolvers.StrictResolver
  href: NodaTime.TimeZones.Resolvers.html#NodaTime_TimeZones_Resolvers_StrictResolver
  name: StrictResolver
  nameWithType: Resolvers.StrictResolver
  fullName: NodaTime.TimeZones.Resolvers.StrictResolver
- uid: NodaTime.DateTimeZone
  commentId: T:NodaTime.DateTimeZone
  parent: NodaTime
  href: NodaTime.DateTimeZone.html
  name: DateTimeZone
  nameWithType: DateTimeZone
  fullName: NodaTime.DateTimeZone
- uid: NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
  commentId: M:NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
  parent: NodaTime.DateTimeZone
  href: NodaTime.DateTimeZone.html#NodaTime_DateTimeZone_AtLeniently_NodaTime_LocalDateTime_
  name: AtLeniently(LocalDateTime)
  nameWithType: DateTimeZone.AtLeniently(LocalDateTime)
  fullName: NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
    name: AtLeniently
    href: NodaTime.DateTimeZone.html#NodaTime_DateTimeZone_AtLeniently_NodaTime_LocalDateTime_
  - name: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    href: NodaTime.LocalDateTime.html
  - name: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.AtLeniently(NodaTime.LocalDateTime)
    name: AtLeniently
    href: NodaTime.DateTimeZone.html#NodaTime_DateTimeZone_AtLeniently_NodaTime_LocalDateTime_
  - name: (
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    href: NodaTime.LocalDateTime.html
  - name: )
- uid: NodaTime.TimeZones.Resolvers.ReturnEarlier
  commentId: P:NodaTime.TimeZones.Resolvers.ReturnEarlier
  href: NodaTime.TimeZones.Resolvers.html#NodaTime_TimeZones_Resolvers_ReturnEarlier
  name: ReturnEarlier
  nameWithType: Resolvers.ReturnEarlier
  fullName: NodaTime.TimeZones.Resolvers.ReturnEarlier
- uid: NodaTime.TimeZones.Resolvers.ReturnForwardShifted
  commentId: P:NodaTime.TimeZones.Resolvers.ReturnForwardShifted
  href: NodaTime.TimeZones.Resolvers.html#NodaTime_TimeZones_Resolvers_ReturnForwardShifted
  name: ReturnForwardShifted
  nameWithType: Resolvers.ReturnForwardShifted
  fullName: NodaTime.TimeZones.Resolvers.ReturnForwardShifted
- uid: NodaTime.TimeZones.Resolvers.ReturnLater
  commentId: P:NodaTime.TimeZones.Resolvers.ReturnLater
  href: NodaTime.TimeZones.Resolvers.html#NodaTime_TimeZones_Resolvers_ReturnLater
  name: ReturnLater
  nameWithType: Resolvers.ReturnLater
  fullName: NodaTime.TimeZones.Resolvers.ReturnLater
- uid: NodaTime.TimeZones.Resolvers.ReturnStartOfIntervalAfter
  commentId: P:NodaTime.TimeZones.Resolvers.ReturnStartOfIntervalAfter
  href: NodaTime.TimeZones.Resolvers.html#NodaTime_TimeZones_Resolvers_ReturnStartOfIntervalAfter
  name: ReturnStartOfIntervalAfter
  nameWithType: Resolvers.ReturnStartOfIntervalAfter
  fullName: NodaTime.TimeZones.Resolvers.ReturnStartOfIntervalAfter
- uid: NodaTime.TimeZones.Resolvers.LenientResolver*
  commentId: Overload:NodaTime.TimeZones.Resolvers.LenientResolver
  href: NodaTime.TimeZones.Resolvers.html#NodaTime_TimeZones_Resolvers_LenientResolver
  name: LenientResolver
  nameWithType: Resolvers.LenientResolver
  fullName: NodaTime.TimeZones.Resolvers.LenientResolver
- uid: NodaTime.TimeZones.Resolvers.CreateMappingResolver*
  commentId: Overload:NodaTime.TimeZones.Resolvers.CreateMappingResolver
  href: NodaTime.TimeZones.Resolvers.html#NodaTime_TimeZones_Resolvers_CreateMappingResolver_NodaTime_TimeZones_AmbiguousTimeResolver_NodaTime_TimeZones_SkippedTimeResolver_
  name: CreateMappingResolver
  nameWithType: Resolvers.CreateMappingResolver
  fullName: NodaTime.TimeZones.Resolvers.CreateMappingResolver
shouldSkipMarkup: true
