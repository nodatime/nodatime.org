### YamlMime:ManagedReference
items:
- uid: NodaTime.Text.ParseResult`1
  commentId: T:NodaTime.Text.ParseResult`1
  id: ParseResult`1
  parent: NodaTime.Text
  children:
  - NodaTime.Text.ParseResult`1.ConvertError``1
  - NodaTime.Text.ParseResult`1.Convert``1(System.Func{`0,``0})
  - NodaTime.Text.ParseResult`1.Exception
  - NodaTime.Text.ParseResult`1.ForException(System.Func{System.Exception})
  - NodaTime.Text.ParseResult`1.ForValue(`0)
  - NodaTime.Text.ParseResult`1.GetValueOrThrow
  - NodaTime.Text.ParseResult`1.Success
  - NodaTime.Text.ParseResult`1.TryGetValue(`0,`0@)
  - NodaTime.Text.ParseResult`1.Value
  langs:
  - csharp
  - vb
  name: ParseResult<T>
  nameWithType: ParseResult<T>
  fullName: NodaTime.Text.ParseResult<T>
  type: Class
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: The result of a parse operation.
  example: []
  syntax:
    content: public sealed class ParseResult<T>
    typeParameters:
    - id: T
      description: The type which was parsed, such as a <xref href="NodaTime.LocalDateTime" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public NotInheritable Class ParseResult(Of T)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: ParseResult(Of T)
  fullName.vb: NodaTime.Text.ParseResult(Of T)
  name.vb: ParseResult(Of T)
- uid: NodaTime.Text.ParseResult`1.Value
  commentId: P:NodaTime.Text.ParseResult`1.Value
  id: Value
  parent: NodaTime.Text.ParseResult`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: ParseResult<T>.Value
  fullName: NodaTime.Text.ParseResult<T>.Value
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: >-
    Gets the value from the parse operation if it was successful, or throws an exception indicating the parse failure

    otherwise.
  remarks: >-
    This method is exactly equivalent to calling the <xref href="NodaTime.Text.ParseResult%601.GetValueOrThrow" data-throw-if-not-resolved="false"></xref> method, but is terser if the code is

    already clear that it will throw if the parse failed.
  example: []
  syntax:
    content: public T Value { get; }
    parameters: []
    return:
      type: '{T}'
      description: The result of the parsing operation if it was successful.
    content.vb: Public ReadOnly Property Value As T
  overload: NodaTime.Text.ParseResult`1.Value*
  nameWithType.vb: ParseResult(Of T).Value
  fullName.vb: NodaTime.Text.ParseResult(Of T).Value
- uid: NodaTime.Text.ParseResult`1.Exception
  commentId: P:NodaTime.Text.ParseResult`1.Exception
  id: Exception
  parent: NodaTime.Text.ParseResult`1
  langs:
  - csharp
  - vb
  name: Exception
  nameWithType: ParseResult<T>.Exception
  fullName: NodaTime.Text.ParseResult<T>.Exception
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: Gets an exception indicating the cause of the parse failure.
  remarks: This property is typically used to wrap parse failures in higher level exceptions.
  example: []
  syntax:
    content: public Exception Exception { get; }
    parameters: []
    return:
      type: System.Exception
      description: The exception indicating the cause of the parse failure.
    content.vb: Public ReadOnly Property Exception As Exception
  overload: NodaTime.Text.ParseResult`1.Exception*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The parse operation succeeded.
  nameWithType.vb: ParseResult(Of T).Exception
  fullName.vb: NodaTime.Text.ParseResult(Of T).Exception
- uid: NodaTime.Text.ParseResult`1.GetValueOrThrow
  commentId: M:NodaTime.Text.ParseResult`1.GetValueOrThrow
  id: GetValueOrThrow
  parent: NodaTime.Text.ParseResult`1
  langs:
  - csharp
  - vb
  name: GetValueOrThrow()
  nameWithType: ParseResult<T>.GetValueOrThrow()
  fullName: NodaTime.Text.ParseResult<T>.GetValueOrThrow()
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: >-
    Gets the value from the parse operation if it was successful, or throws an exception indicating the parse failure

    otherwise.
  remarks: >-
    This method is exactly equivalent to fetching the <xref href="NodaTime.Text.ParseResult%601.Value" data-throw-if-not-resolved="false"></xref> property, but more explicit in terms of throwing

    an exception on failure.
  example: []
  syntax:
    content: public T GetValueOrThrow()
    return:
      type: '{T}'
      description: The result of the parsing operation if it was successful.
    content.vb: Public Function GetValueOrThrow() As T
  overload: NodaTime.Text.ParseResult`1.GetValueOrThrow*
  nameWithType.vb: ParseResult(Of T).GetValueOrThrow()
  fullName.vb: NodaTime.Text.ParseResult(Of T).GetValueOrThrow()
- uid: NodaTime.Text.ParseResult`1.TryGetValue(`0,`0@)
  commentId: M:NodaTime.Text.ParseResult`1.TryGetValue(`0,`0@)
  id: TryGetValue(`0,`0@)
  parent: NodaTime.Text.ParseResult`1
  langs:
  - csharp
  - vb
  name: TryGetValue(T, out T)
  nameWithType: ParseResult<T>.TryGetValue(T, out T)
  fullName: NodaTime.Text.ParseResult<T>.TryGetValue(T, out T)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: >-
    Returns the success value, and sets the out parameter to either

    the specified failure value of T or the successful parse result value.
  example: []
  syntax:
    content: public bool TryGetValue(T failureValue, out T result)
    parameters:
    - id: failureValue
      type: '{T}'
      description: The "default" value to set in <code class="paramref">result</code> if parsing failed.
    - id: result
      type: '{T}'
      description: The parameter to store the parsed value in on success.
    return:
      type: System.Boolean
      description: True if this parse result was successful, or false otherwise.
    content.vb: Public Function TryGetValue(failureValue As T, result As T) As Boolean
  overload: NodaTime.Text.ParseResult`1.TryGetValue*
  nameWithType.vb: ParseResult(Of T).TryGetValue(T, T)
  fullName.vb: NodaTime.Text.ParseResult(Of T).TryGetValue(T, T)
  name.vb: TryGetValue(T, T)
- uid: NodaTime.Text.ParseResult`1.Success
  commentId: P:NodaTime.Text.ParseResult`1.Success
  id: Success
  parent: NodaTime.Text.ParseResult`1
  langs:
  - csharp
  - vb
  name: Success
  nameWithType: ParseResult<T>.Success
  fullName: NodaTime.Text.ParseResult<T>.Success
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: Indicates whether the parse operation was successful.
  remarks: This returns True if and only if fetching the value with the <xref href="NodaTime.Text.ParseResult%601.Value" data-throw-if-not-resolved="false"></xref> property will return with no exception.
  example: []
  syntax:
    content: public bool Success { get; }
    parameters: []
    return:
      type: System.Boolean
      description: true if the parse operation was successful; otherwise false.
    content.vb: Public ReadOnly Property Success As Boolean
  overload: NodaTime.Text.ParseResult`1.Success*
  nameWithType.vb: ParseResult(Of T).Success
  fullName.vb: NodaTime.Text.ParseResult(Of T).Success
- uid: NodaTime.Text.ParseResult`1.Convert``1(System.Func{`0,``0})
  commentId: M:NodaTime.Text.ParseResult`1.Convert``1(System.Func{`0,``0})
  id: Convert``1(System.Func{`0,``0})
  parent: NodaTime.Text.ParseResult`1
  langs:
  - csharp
  - vb
  name: Convert<TTarget>(Func<T, TTarget>)
  nameWithType: ParseResult<T>.Convert<TTarget>(Func<T, TTarget>)
  fullName: NodaTime.Text.ParseResult<T>.Convert<TTarget>(System.Func<T, TTarget>)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: >-
    Converts this result to a new target type, either by executing the given projection

    for a success result, or propagating the exception provider for failure.
  example: []
  syntax:
    content: public ParseResult<TTarget> Convert<TTarget>(Func<T, TTarget> projection)
    parameters:
    - id: projection
      type: System.Func{{T},{TTarget}}
      description: >-
        The projection to apply for the value of this result,
            if it's a success result.
    typeParameters:
    - id: TTarget
      description: The target type of the conversion.
    return:
      type: NodaTime.Text.ParseResult{{TTarget}}
      description: >-
        A ParseResult for the target type, either with a value obtained by applying the specified
            projection to the value in this result, or with the same error as this result.
    content.vb: Public Function Convert(Of TTarget)(projection As Func(Of T, TTarget)) As ParseResult(Of TTarget)
  overload: NodaTime.Text.ParseResult`1.Convert*
  nameWithType.vb: ParseResult(Of T).Convert(Of TTarget)(Func(Of T, TTarget))
  fullName.vb: NodaTime.Text.ParseResult(Of T).Convert(Of TTarget)(System.Func(Of T, TTarget))
  name.vb: Convert(Of TTarget)(Func(Of T, TTarget))
- uid: NodaTime.Text.ParseResult`1.ConvertError``1
  commentId: M:NodaTime.Text.ParseResult`1.ConvertError``1
  id: ConvertError``1
  parent: NodaTime.Text.ParseResult`1
  langs:
  - csharp
  - vb
  name: ConvertError<TTarget>()
  nameWithType: ParseResult<T>.ConvertError<TTarget>()
  fullName: NodaTime.Text.ParseResult<T>.ConvertError<TTarget>()
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: >-
    Converts this result to a new target type by propagating the exception provider.

    This parse result must already be an error result.
  example: []
  syntax:
    content: public ParseResult<TTarget> ConvertError<TTarget>()
    typeParameters:
    - id: TTarget
    return:
      type: NodaTime.Text.ParseResult{{TTarget}}
      description: A ParseResult for the target type, with the same error as this result.
    content.vb: Public Function ConvertError(Of TTarget)() As ParseResult(Of TTarget)
  overload: NodaTime.Text.ParseResult`1.ConvertError*
  nameWithType.vb: ParseResult(Of T).ConvertError(Of TTarget)()
  fullName.vb: NodaTime.Text.ParseResult(Of T).ConvertError(Of TTarget)()
  name.vb: ConvertError(Of TTarget)()
- uid: NodaTime.Text.ParseResult`1.ForValue(`0)
  commentId: M:NodaTime.Text.ParseResult`1.ForValue(`0)
  id: ForValue(`0)
  parent: NodaTime.Text.ParseResult`1
  langs:
  - csharp
  - vb
  name: ForValue(T)
  nameWithType: ParseResult<T>.ForValue(T)
  fullName: NodaTime.Text.ParseResult<T>.ForValue(T)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: Produces a ParseResult which represents a successful parse operation.
  remarks: >-
    When T is a reference type, <code class="paramref">value</code> should not be null,
        but this isn't currently checked.
  example: []
  syntax:
    content: public static ParseResult<T> ForValue(T value)
    parameters:
    - id: value
      type: '{T}'
      description: The successfully parsed value.
    return:
      type: NodaTime.Text.ParseResult`1
      description: A ParseResult representing a successful parsing operation.
    content.vb: Public Shared Function ForValue(value As T) As ParseResult(Of T)
  overload: NodaTime.Text.ParseResult`1.ForValue*
  nameWithType.vb: ParseResult(Of T).ForValue(T)
  fullName.vb: NodaTime.Text.ParseResult(Of T).ForValue(T)
- uid: NodaTime.Text.ParseResult`1.ForException(System.Func{System.Exception})
  commentId: M:NodaTime.Text.ParseResult`1.ForException(System.Func{System.Exception})
  id: ForException(System.Func{System.Exception})
  parent: NodaTime.Text.ParseResult`1
  langs:
  - csharp
  - vb
  name: ForException(Func<Exception>)
  nameWithType: ParseResult<T>.ForException(Func<Exception>)
  fullName: NodaTime.Text.ParseResult<T>.ForException(System.Func<System.Exception>)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: Produces a ParseResult which represents a failed parsing operation.
  remarks: >-
    This method accepts a delegate rather than the exception itself, as creating an
        exception can be relatively slow: if the client doesn't need the actual exception, just the information
        that the parse failed, there's no point in creating the exception.
  example: []
  syntax:
    content: public static ParseResult<T> ForException(Func<Exception> exceptionProvider)
    parameters:
    - id: exceptionProvider
      type: System.Func{System.Exception}
      description: >-
        A delegate that produces the exception representing the error that
            caused the parse to fail.
    return:
      type: NodaTime.Text.ParseResult`1
      description: A ParseResult representing a failed parsing operation.
    content.vb: Public Shared Function ForException(exceptionProvider As Func(Of Exception)) As ParseResult(Of T)
  overload: NodaTime.Text.ParseResult`1.ForException*
  nameWithType.vb: ParseResult(Of T).ForException(Func(Of Exception))
  fullName.vb: NodaTime.Text.ParseResult(Of T).ForException(System.Func(Of System.Exception))
  name.vb: ForException(Func(Of Exception))
references:
- uid: NodaTime.LocalDateTime
  commentId: T:NodaTime.LocalDateTime
  parent: NodaTime
  href: NodaTime.LocalDateTime.html
  name: LocalDateTime
  nameWithType: LocalDateTime
  fullName: NodaTime.LocalDateTime
- uid: NodaTime.Text
  commentId: N:NodaTime.Text
  href: NodaTime.html
  name: NodaTime.Text
  nameWithType: NodaTime.Text
  fullName: NodaTime.Text
  spec.csharp:
  - uid: NodaTime
    name: NodaTime
    href: NodaTime.html
  - name: .
  - uid: NodaTime.Text
    name: Text
    href: NodaTime.Text.html
  spec.vb:
  - uid: NodaTime
    name: NodaTime
    href: NodaTime.html
  - name: .
  - uid: NodaTime.Text
    name: Text
    href: NodaTime.Text.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: NodaTime
  commentId: N:NodaTime
  href: NodaTime.html
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: NodaTime.Text.ParseResult`1.GetValueOrThrow
  commentId: M:NodaTime.Text.ParseResult`1.GetValueOrThrow
  href: NodaTime.Text.ParseResult-1.html#NodaTime_Text_ParseResult_1_GetValueOrThrow
  name: GetValueOrThrow()
  nameWithType: ParseResult<T>.GetValueOrThrow()
  fullName: NodaTime.Text.ParseResult<T>.GetValueOrThrow()
  nameWithType.vb: ParseResult(Of T).GetValueOrThrow()
  fullName.vb: NodaTime.Text.ParseResult(Of T).GetValueOrThrow()
  spec.csharp:
  - uid: NodaTime.Text.ParseResult`1.GetValueOrThrow
    name: GetValueOrThrow
    href: NodaTime.Text.ParseResult-1.html#NodaTime_Text_ParseResult_1_GetValueOrThrow
  - name: (
  - name: )
  spec.vb:
  - uid: NodaTime.Text.ParseResult`1.GetValueOrThrow
    name: GetValueOrThrow
    href: NodaTime.Text.ParseResult-1.html#NodaTime_Text_ParseResult_1_GetValueOrThrow
  - name: (
  - name: )
- uid: NodaTime.Text.ParseResult`1.Value*
  commentId: Overload:NodaTime.Text.ParseResult`1.Value
  href: NodaTime.Text.ParseResult-1.html#NodaTime_Text_ParseResult_1_Value
  name: Value
  nameWithType: ParseResult<T>.Value
  fullName: NodaTime.Text.ParseResult<T>.Value
  nameWithType.vb: ParseResult(Of T).Value
  fullName.vb: NodaTime.Text.ParseResult(Of T).Value
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.invalidoperationexception
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: NodaTime.Text.ParseResult`1.Exception*
  commentId: Overload:NodaTime.Text.ParseResult`1.Exception
  href: NodaTime.Text.ParseResult-1.html#NodaTime_Text_ParseResult_1_Exception
  name: Exception
  nameWithType: ParseResult<T>.Exception
  fullName: NodaTime.Text.ParseResult<T>.Exception
  nameWithType.vb: ParseResult(Of T).Exception
  fullName.vb: NodaTime.Text.ParseResult(Of T).Exception
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.exception
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: NodaTime.Text.ParseResult`1.Value
  commentId: P:NodaTime.Text.ParseResult`1.Value
  href: NodaTime.Text.ParseResult-1.html#NodaTime_Text_ParseResult_1_Value
  name: Value
  nameWithType: ParseResult<T>.Value
  fullName: NodaTime.Text.ParseResult<T>.Value
  nameWithType.vb: ParseResult(Of T).Value
  fullName.vb: NodaTime.Text.ParseResult(Of T).Value
- uid: NodaTime.Text.ParseResult`1.GetValueOrThrow*
  commentId: Overload:NodaTime.Text.ParseResult`1.GetValueOrThrow
  href: NodaTime.Text.ParseResult-1.html#NodaTime_Text_ParseResult_1_GetValueOrThrow
  name: GetValueOrThrow
  nameWithType: ParseResult<T>.GetValueOrThrow
  fullName: NodaTime.Text.ParseResult<T>.GetValueOrThrow
  nameWithType.vb: ParseResult(Of T).GetValueOrThrow
  fullName.vb: NodaTime.Text.ParseResult(Of T).GetValueOrThrow
- uid: NodaTime.Text.ParseResult`1.TryGetValue*
  commentId: Overload:NodaTime.Text.ParseResult`1.TryGetValue
  href: NodaTime.Text.ParseResult-1.html#NodaTime_Text_ParseResult_1_TryGetValue__0__0__
  name: TryGetValue
  nameWithType: ParseResult<T>.TryGetValue
  fullName: NodaTime.Text.ParseResult<T>.TryGetValue
  nameWithType.vb: ParseResult(Of T).TryGetValue
  fullName.vb: NodaTime.Text.ParseResult(Of T).TryGetValue
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: NodaTime.Text.ParseResult`1.Success*
  commentId: Overload:NodaTime.Text.ParseResult`1.Success
  href: NodaTime.Text.ParseResult-1.html#NodaTime_Text_ParseResult_1_Success
  name: Success
  nameWithType: ParseResult<T>.Success
  fullName: NodaTime.Text.ParseResult<T>.Success
  nameWithType.vb: ParseResult(Of T).Success
  fullName.vb: NodaTime.Text.ParseResult(Of T).Success
- uid: NodaTime.Text.ParseResult`1.Convert*
  commentId: Overload:NodaTime.Text.ParseResult`1.Convert
  href: NodaTime.Text.ParseResult-1.html#NodaTime_Text_ParseResult_1_Convert__1_System_Func__0___0__
  name: Convert
  nameWithType: ParseResult<T>.Convert
  fullName: NodaTime.Text.ParseResult<T>.Convert
  nameWithType.vb: ParseResult(Of T).Convert
  fullName.vb: NodaTime.Text.ParseResult(Of T).Convert
- uid: System.Func{{T},{TTarget}}
  commentId: T:System.Func{`0,``0}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TTarget>
  nameWithType: Func<T, TTarget>
  fullName: System.Func<T, TTarget>
  nameWithType.vb: Func(Of T, TTarget)
  fullName.vb: System.Func(Of T, TTarget)
  name.vb: Func(Of T, TTarget)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TTarget
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TTarget
  - name: )
- uid: NodaTime.Text.ParseResult{{TTarget}}
  commentId: T:NodaTime.Text.ParseResult{``0}
  parent: NodaTime.Text
  definition: NodaTime.Text.ParseResult`1
  href: NodaTime.Text.ParseResult-1.html
  name: ParseResult<TTarget>
  nameWithType: ParseResult<TTarget>
  fullName: NodaTime.Text.ParseResult<TTarget>
  nameWithType.vb: ParseResult(Of TTarget)
  fullName.vb: NodaTime.Text.ParseResult(Of TTarget)
  name.vb: ParseResult(Of TTarget)
  spec.csharp:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    href: NodaTime.Text.ParseResult-1.html
  - name: <
  - name: TTarget
  - name: '>'
  spec.vb:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    href: NodaTime.Text.ParseResult-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TTarget
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NodaTime.Text.ParseResult`1
  commentId: T:NodaTime.Text.ParseResult`1
  parent: NodaTime.Text
  href: NodaTime.Text.ParseResult-1.html
  name: ParseResult<T>
  nameWithType: ParseResult<T>
  fullName: NodaTime.Text.ParseResult<T>
  nameWithType.vb: ParseResult(Of T)
  fullName.vb: NodaTime.Text.ParseResult(Of T)
  name.vb: ParseResult(Of T)
  spec.csharp:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    href: NodaTime.Text.ParseResult-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    href: NodaTime.Text.ParseResult-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NodaTime.Text.ParseResult`1.ConvertError*
  commentId: Overload:NodaTime.Text.ParseResult`1.ConvertError
  href: NodaTime.Text.ParseResult-1.html#NodaTime_Text_ParseResult_1_ConvertError__1
  name: ConvertError
  nameWithType: ParseResult<T>.ConvertError
  fullName: NodaTime.Text.ParseResult<T>.ConvertError
  nameWithType.vb: ParseResult(Of T).ConvertError
  fullName.vb: NodaTime.Text.ParseResult(Of T).ConvertError
- uid: NodaTime.Text.ParseResult`1.ForValue*
  commentId: Overload:NodaTime.Text.ParseResult`1.ForValue
  href: NodaTime.Text.ParseResult-1.html#NodaTime_Text_ParseResult_1_ForValue__0_
  name: ForValue
  nameWithType: ParseResult<T>.ForValue
  fullName: NodaTime.Text.ParseResult<T>.ForValue
  nameWithType.vb: ParseResult(Of T).ForValue
  fullName.vb: NodaTime.Text.ParseResult(Of T).ForValue
- uid: NodaTime.Text.ParseResult`1.ForException*
  commentId: Overload:NodaTime.Text.ParseResult`1.ForException
  href: NodaTime.Text.ParseResult-1.html#NodaTime_Text_ParseResult_1_ForException_System_Func_System_Exception__
  name: ForException
  nameWithType: ParseResult<T>.ForException
  fullName: NodaTime.Text.ParseResult<T>.ForException
  nameWithType.vb: ParseResult(Of T).ForException
  fullName.vb: NodaTime.Text.ParseResult(Of T).ForException
- uid: System.Func{System.Exception}
  commentId: T:System.Func{System.Exception}
  parent: System
  definition: System.Func`1
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<Exception>
  nameWithType: Func<Exception>
  fullName: System.Func<System.Exception>
  nameWithType.vb: Func(Of Exception)
  fullName.vb: System.Func(Of System.Exception)
  name.vb: Func(Of Exception)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - uid: System.Exception
    name: Exception
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.exception
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Exception
    name: Exception
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.exception
  - name: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
shouldSkipMarkup: true
