### YamlMime:ManagedReference
items:
- uid: NodaTime.TimeZones.ZoneInterval
  commentId: T:NodaTime.TimeZones.ZoneInterval
  id: ZoneInterval
  parent: NodaTime.TimeZones
  children:
  - NodaTime.TimeZones.ZoneInterval.#ctor(System.String,System.Nullable{NodaTime.Instant},System.Nullable{NodaTime.Instant},NodaTime.Offset,NodaTime.Offset)
  - NodaTime.TimeZones.ZoneInterval.Contains(NodaTime.Instant)
  - NodaTime.TimeZones.ZoneInterval.Duration
  - NodaTime.TimeZones.ZoneInterval.End
  - NodaTime.TimeZones.ZoneInterval.Equals(NodaTime.TimeZones.ZoneInterval)
  - NodaTime.TimeZones.ZoneInterval.Equals(System.Object)
  - NodaTime.TimeZones.ZoneInterval.GetHashCode
  - NodaTime.TimeZones.ZoneInterval.HasEnd
  - NodaTime.TimeZones.ZoneInterval.HasStart
  - NodaTime.TimeZones.ZoneInterval.IsoLocalEnd
  - NodaTime.TimeZones.ZoneInterval.IsoLocalStart
  - NodaTime.TimeZones.ZoneInterval.Name
  - NodaTime.TimeZones.ZoneInterval.Savings
  - NodaTime.TimeZones.ZoneInterval.StandardOffset
  - NodaTime.TimeZones.ZoneInterval.Start
  - NodaTime.TimeZones.ZoneInterval.ToString
  - NodaTime.TimeZones.ZoneInterval.WallOffset
  - NodaTime.TimeZones.ZoneInterval.op_Equality(NodaTime.TimeZones.ZoneInterval,NodaTime.TimeZones.ZoneInterval)
  - NodaTime.TimeZones.ZoneInterval.op_Inequality(NodaTime.TimeZones.ZoneInterval,NodaTime.TimeZones.ZoneInterval)
  langs:
  - csharp
  - vb
  name: ZoneInterval
  nameWithType: ZoneInterval
  fullName: NodaTime.TimeZones.ZoneInterval
  type: Class
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: Represents a range of time for which a particular Offset applies.
  remarks: >-
    <p>

    Equality is defined component-wise in terms of all properties: the name, the start and end, and the offsets.

    There is no ordering defined between zone intervals.

    </p>
  example: []
  syntax:
    content: 'public sealed class ZoneInterval : IEquatable<ZoneInterval?>, IEqualityOperators<ZoneInterval, ZoneInterval, bool>'
    content.vb: Public NotInheritable Class ZoneInterval Implements IEquatable(Of ZoneInterval), IEqualityOperators(Of ZoneInterval, ZoneInterval, Boolean)
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{NodaTime.TimeZones.ZoneInterval}
  - System.Numerics.IEqualityOperators{NodaTime.TimeZones.ZoneInterval,NodaTime.TimeZones.ZoneInterval,System.Boolean}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
- uid: NodaTime.TimeZones.ZoneInterval.StandardOffset
  commentId: P:NodaTime.TimeZones.ZoneInterval.StandardOffset
  id: StandardOffset
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: StandardOffset
  nameWithType: ZoneInterval.StandardOffset
  fullName: NodaTime.TimeZones.ZoneInterval.StandardOffset
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: >-
    Gets the standard offset for this period. This is the offset without any daylight savings

    contributions.
  remarks: This is effectively <code>WallOffset - Savings</code>.
  example: []
  syntax:
    content: public Offset StandardOffset { get; }
    parameters: []
    return:
      type: NodaTime.Offset
      description: The base Offset.
    content.vb: Public ReadOnly Property StandardOffset As Offset
  overload: NodaTime.TimeZones.ZoneInterval.StandardOffset*
- uid: NodaTime.TimeZones.ZoneInterval.Duration
  commentId: P:NodaTime.TimeZones.ZoneInterval.Duration
  id: Duration
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: Duration
  nameWithType: ZoneInterval.Duration
  fullName: NodaTime.TimeZones.ZoneInterval.Duration
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: Gets the duration of this zone interval.
  remarks: This is effectively <code>End - Start</code>.
  example: []
  syntax:
    content: public Duration Duration { get; }
    parameters: []
    return:
      type: NodaTime.Duration
      description: The Duration of this zone interval.
    content.vb: Public ReadOnly Property Duration As Duration
  overload: NodaTime.TimeZones.ZoneInterval.Duration*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: This zone extends to the start or end of time.
- uid: NodaTime.TimeZones.ZoneInterval.HasStart
  commentId: P:NodaTime.TimeZones.ZoneInterval.HasStart
  id: HasStart
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: HasStart
  nameWithType: ZoneInterval.HasStart
  fullName: NodaTime.TimeZones.ZoneInterval.HasStart
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: >-
    Returns <code>true</code> if this zone interval has a fixed start point, or <code>false</code> if it

    extends to the beginning of time.
  example: []
  syntax:
    content: public bool HasStart { get; }
    parameters: []
    return:
      type: System.Boolean
      description: >-
        <code>true</code> if this interval has a fixed start point, or <code>false</code> if it

        extends to the beginning of time.
    content.vb: Public ReadOnly Property HasStart As Boolean
  overload: NodaTime.TimeZones.ZoneInterval.HasStart*
- uid: NodaTime.TimeZones.ZoneInterval.End
  commentId: P:NodaTime.TimeZones.ZoneInterval.End
  id: End
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: End
  nameWithType: ZoneInterval.End
  fullName: NodaTime.TimeZones.ZoneInterval.End
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: Gets the last Instant (exclusive) that the Offset applies.
  example: []
  syntax:
    content: public Instant End { get; }
    parameters: []
    return:
      type: NodaTime.Instant
      description: The last Instant (exclusive) that the Offset applies.
    content.vb: Public ReadOnly Property [End] As Instant
  overload: NodaTime.TimeZones.ZoneInterval.End*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The zone interval extends to the end of time
- uid: NodaTime.TimeZones.ZoneInterval.HasEnd
  commentId: P:NodaTime.TimeZones.ZoneInterval.HasEnd
  id: HasEnd
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: HasEnd
  nameWithType: ZoneInterval.HasEnd
  fullName: NodaTime.TimeZones.ZoneInterval.HasEnd
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: >-
    Returns <code>true</code> if this zone interval has a fixed end point, or <code>false</code> if it

    extends to the end of time.
  example: []
  syntax:
    content: public bool HasEnd { get; }
    parameters: []
    return:
      type: System.Boolean
      description: >-
        <code>true</code> if this interval has a fixed end point, or <code>false</code> if it

        extends to the end of time.
    content.vb: Public ReadOnly Property HasEnd As Boolean
  overload: NodaTime.TimeZones.ZoneInterval.HasEnd*
- uid: NodaTime.TimeZones.ZoneInterval.IsoLocalStart
  commentId: P:NodaTime.TimeZones.ZoneInterval.IsoLocalStart
  id: IsoLocalStart
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: IsoLocalStart
  nameWithType: ZoneInterval.IsoLocalStart
  fullName: NodaTime.TimeZones.ZoneInterval.IsoLocalStart
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: >-
    Gets the local start time of the interval, as a <xref href="NodaTime.LocalDateTime" data-throw-if-not-resolved="false"></xref>

    in the ISO calendar.
  example: []
  syntax:
    content: public LocalDateTime IsoLocalStart { get; }
    parameters: []
    return:
      type: NodaTime.LocalDateTime
      description: >-
        The local start time of the interval in the ISO calendar, with the offset of
            this zone interval.
    content.vb: Public ReadOnly Property IsoLocalStart As LocalDateTime
  overload: NodaTime.TimeZones.ZoneInterval.IsoLocalStart*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The interval starts too early to represent as a `LocalDateTime`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The interval extends to the start of time.
- uid: NodaTime.TimeZones.ZoneInterval.IsoLocalEnd
  commentId: P:NodaTime.TimeZones.ZoneInterval.IsoLocalEnd
  id: IsoLocalEnd
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: IsoLocalEnd
  nameWithType: ZoneInterval.IsoLocalEnd
  fullName: NodaTime.TimeZones.ZoneInterval.IsoLocalEnd
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: >-
    Gets the local end time of the interval, as a <xref href="NodaTime.LocalDateTime" data-throw-if-not-resolved="false"></xref>

    in the ISO calendar.
  example: []
  syntax:
    content: public LocalDateTime IsoLocalEnd { get; }
    parameters: []
    return:
      type: NodaTime.LocalDateTime
      description: >-
        The local end time of the interval in the ISO calendar, with the offset
            of this zone interval. As the end time is exclusive, by the time this local time
            is reached, the next interval will be in effect and the local time will usually
            have changed (e.g. by adding or subtracting an hour).
    content.vb: Public ReadOnly Property IsoLocalEnd As LocalDateTime
  overload: NodaTime.TimeZones.ZoneInterval.IsoLocalEnd*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The interval ends too late to represent as a `LocalDateTime`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The interval extends to the end of time.
- uid: NodaTime.TimeZones.ZoneInterval.Name
  commentId: P:NodaTime.TimeZones.ZoneInterval.Name
  id: Name
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: ZoneInterval.Name
  fullName: NodaTime.TimeZones.ZoneInterval.Name
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: Gets the name of this offset period (e.g. PST or PDT).
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
      description: The name of this offset period (e.g. PST or PDT).
    content.vb: Public ReadOnly Property Name As String
  overload: NodaTime.TimeZones.ZoneInterval.Name*
- uid: NodaTime.TimeZones.ZoneInterval.WallOffset
  commentId: P:NodaTime.TimeZones.ZoneInterval.WallOffset
  id: WallOffset
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: WallOffset
  nameWithType: ZoneInterval.WallOffset
  fullName: NodaTime.TimeZones.ZoneInterval.WallOffset
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: Gets the offset from UTC for this period. This includes any daylight savings value.
  example: []
  syntax:
    content: public Offset WallOffset { get; }
    parameters: []
    return:
      type: NodaTime.Offset
      description: The offset from UTC for this period.
    content.vb: Public ReadOnly Property WallOffset As Offset
  overload: NodaTime.TimeZones.ZoneInterval.WallOffset*
- uid: NodaTime.TimeZones.ZoneInterval.Savings
  commentId: P:NodaTime.TimeZones.ZoneInterval.Savings
  id: Savings
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: Savings
  nameWithType: ZoneInterval.Savings
  fullName: NodaTime.TimeZones.ZoneInterval.Savings
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: Gets the daylight savings value for this period.
  example: []
  syntax:
    content: public Offset Savings { get; }
    parameters: []
    return:
      type: NodaTime.Offset
      description: The savings value.
    content.vb: Public ReadOnly Property Savings As Offset
  overload: NodaTime.TimeZones.ZoneInterval.Savings*
- uid: NodaTime.TimeZones.ZoneInterval.Start
  commentId: P:NodaTime.TimeZones.ZoneInterval.Start
  id: Start
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: Start
  nameWithType: ZoneInterval.Start
  fullName: NodaTime.TimeZones.ZoneInterval.Start
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: Gets the first Instant that the Offset applies.
  example: []
  syntax:
    content: public Instant Start { get; }
    parameters: []
    return:
      type: NodaTime.Instant
      description: The first Instant that the Offset applies.
    content.vb: Public ReadOnly Property Start As Instant
  overload: NodaTime.TimeZones.ZoneInterval.Start*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The interval extends to the start of time.
- uid: NodaTime.TimeZones.ZoneInterval.#ctor(System.String,System.Nullable{NodaTime.Instant},System.Nullable{NodaTime.Instant},NodaTime.Offset,NodaTime.Offset)
  commentId: M:NodaTime.TimeZones.ZoneInterval.#ctor(System.String,System.Nullable{NodaTime.Instant},System.Nullable{NodaTime.Instant},NodaTime.Offset,NodaTime.Offset)
  id: '#ctor(System.String,System.Nullable{NodaTime.Instant},System.Nullable{NodaTime.Instant},NodaTime.Offset,NodaTime.Offset)'
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: ZoneInterval(string, Instant?, Instant?, Offset, Offset)
  nameWithType: ZoneInterval.ZoneInterval(string, Instant?, Instant?, Offset, Offset)
  fullName: NodaTime.TimeZones.ZoneInterval.ZoneInterval(string, NodaTime.Instant?, NodaTime.Instant?, NodaTime.Offset, NodaTime.Offset)
  type: Constructor
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: Initializes a new instance of the <xref href="NodaTime.TimeZones.ZoneInterval" data-throw-if-not-resolved="false"></xref> class.
  example: []
  syntax:
    content: public ZoneInterval(string name, Instant? start, Instant? end, Offset wallOffset, Offset savings)
    parameters:
    - id: name
      type: System.String
      description: The name of this offset period (e.g. PST or PDT).
    - id: start
      type: System.Nullable{NodaTime.Instant}
      description: >-
        The first <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref> that the <code class="paramref">wallOffset</code> applies,
            or <code>null</code> to make the zone interval extend to the start of time.
    - id: end
      type: System.Nullable{NodaTime.Instant}
      description: >-
        The last <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref> (exclusive) that the <code class="paramref">wallOffset</code> applies,
            or <code>null</code> to make the zone interval extend to the end of time.
    - id: wallOffset
      type: NodaTime.Offset
      description: The <xref href="NodaTime.TimeZones.ZoneInterval.WallOffset" data-throw-if-not-resolved="false"></xref> from UTC for this period including any daylight savings.
    - id: savings
      type: NodaTime.Offset
      description: The <xref href="NodaTime.TimeZones.ZoneInterval.WallOffset" data-throw-if-not-resolved="false"></xref> daylight savings contribution to the offset.
    content.vb: Public Sub New(name As String, start As Instant?, [end] As Instant?, wallOffset As Offset, savings As Offset)
  overload: NodaTime.TimeZones.ZoneInterval.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If <code><code class="paramref">start</code> &gt;= <code class="paramref">end</code></code>.
  nameWithType.vb: ZoneInterval.New(String, Instant?, Instant?, Offset, Offset)
  fullName.vb: NodaTime.TimeZones.ZoneInterval.New(String, NodaTime.Instant?, NodaTime.Instant?, NodaTime.Offset, NodaTime.Offset)
  name.vb: New(String, Instant?, Instant?, Offset, Offset)
- uid: NodaTime.TimeZones.ZoneInterval.Contains(NodaTime.Instant)
  commentId: M:NodaTime.TimeZones.ZoneInterval.Contains(NodaTime.Instant)
  id: Contains(NodaTime.Instant)
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: Contains(Instant)
  nameWithType: ZoneInterval.Contains(Instant)
  fullName: NodaTime.TimeZones.ZoneInterval.Contains(NodaTime.Instant)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: Determines whether this period contains the given Instant in its range.
  remarks: >-
    Usually this is half-open, i.e. the end is exclusive, but an interval with an end point of "the end of time"

    is deemed to be inclusive at the end.
  example: []
  syntax:
    content: public bool Contains(Instant instant)
    parameters:
    - id: instant
      type: NodaTime.Instant
      description: The instant to test.
    return:
      type: System.Boolean
      description: <code>true</code> if this period contains the given Instant in its range; otherwise, <code>false</code>.
    content.vb: Public Function Contains(instant As Instant) As Boolean
  overload: NodaTime.TimeZones.ZoneInterval.Contains*
- uid: NodaTime.TimeZones.ZoneInterval.Equals(NodaTime.TimeZones.ZoneInterval)
  commentId: M:NodaTime.TimeZones.ZoneInterval.Equals(NodaTime.TimeZones.ZoneInterval)
  id: Equals(NodaTime.TimeZones.ZoneInterval)
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: Equals(ZoneInterval?)
  nameWithType: ZoneInterval.Equals(ZoneInterval?)
  fullName: NodaTime.TimeZones.ZoneInterval.Equals(NodaTime.TimeZones.ZoneInterval?)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: >-
    Indicates whether the current object is equal to another object of the same type.

    See the type documentation for a description of equality semantics.
  example: []
  syntax:
    content: public bool Equals(ZoneInterval? other)
    parameters:
    - id: other
      type: NodaTime.TimeZones.ZoneInterval
      description: An object to compare with this object.
    return:
      type: System.Boolean
      description: true if the current object is equal to the <code class="paramref">other</code> parameter; otherwise, false.
    content.vb: Public Function Equals(other As ZoneInterval) As Boolean
  overload: NodaTime.TimeZones.ZoneInterval.Equals*
  implements:
  - System.IEquatable{NodaTime.TimeZones.ZoneInterval}.Equals(NodaTime.TimeZones.ZoneInterval)
  nameWithType.vb: ZoneInterval.Equals(ZoneInterval)
  fullName.vb: NodaTime.TimeZones.ZoneInterval.Equals(NodaTime.TimeZones.ZoneInterval)
  name.vb: Equals(ZoneInterval)
- uid: NodaTime.TimeZones.ZoneInterval.op_Equality(NodaTime.TimeZones.ZoneInterval,NodaTime.TimeZones.ZoneInterval)
  commentId: M:NodaTime.TimeZones.ZoneInterval.op_Equality(NodaTime.TimeZones.ZoneInterval,NodaTime.TimeZones.ZoneInterval)
  id: op_Equality(NodaTime.TimeZones.ZoneInterval,NodaTime.TimeZones.ZoneInterval)
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: operator ==(ZoneInterval?, ZoneInterval?)
  nameWithType: ZoneInterval.operator ==(ZoneInterval?, ZoneInterval?)
  fullName: NodaTime.TimeZones.ZoneInterval.operator ==(NodaTime.TimeZones.ZoneInterval?, NodaTime.TimeZones.ZoneInterval?)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: >-
    Implements the operator == (equality).

    See the type documentation for a description of equality semantics.
  example: []
  syntax:
    content: public static bool operator ==(ZoneInterval? left, ZoneInterval? right)
    parameters:
    - id: left
      type: NodaTime.TimeZones.ZoneInterval
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.TimeZones.ZoneInterval
      description: The right hand side of the operator.
    return:
      type: System.Boolean
      description: <code>true</code> if values are equal to each other, otherwise <code>false</code>.
    content.vb: Public Shared Operator =(left As ZoneInterval, right As ZoneInterval) As Boolean
  overload: NodaTime.TimeZones.ZoneInterval.op_Equality*
  implements:
  - System.Numerics.IEqualityOperators{NodaTime.TimeZones.ZoneInterval,NodaTime.TimeZones.ZoneInterval,System.Boolean}.op_Equality(NodaTime.TimeZones.ZoneInterval,NodaTime.TimeZones.ZoneInterval)
  nameWithType.vb: ZoneInterval.=(ZoneInterval, ZoneInterval)
  fullName.vb: NodaTime.TimeZones.ZoneInterval.=(NodaTime.TimeZones.ZoneInterval, NodaTime.TimeZones.ZoneInterval)
  name.vb: =(ZoneInterval, ZoneInterval)
- uid: NodaTime.TimeZones.ZoneInterval.op_Inequality(NodaTime.TimeZones.ZoneInterval,NodaTime.TimeZones.ZoneInterval)
  commentId: M:NodaTime.TimeZones.ZoneInterval.op_Inequality(NodaTime.TimeZones.ZoneInterval,NodaTime.TimeZones.ZoneInterval)
  id: op_Inequality(NodaTime.TimeZones.ZoneInterval,NodaTime.TimeZones.ZoneInterval)
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: operator !=(ZoneInterval?, ZoneInterval?)
  nameWithType: ZoneInterval.operator !=(ZoneInterval?, ZoneInterval?)
  fullName: NodaTime.TimeZones.ZoneInterval.operator !=(NodaTime.TimeZones.ZoneInterval?, NodaTime.TimeZones.ZoneInterval?)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: >-
    Implements the operator != (inequality).

    See the type documentation for a description of equality semantics.
  example: []
  syntax:
    content: public static bool operator !=(ZoneInterval? left, ZoneInterval? right)
    parameters:
    - id: left
      type: NodaTime.TimeZones.ZoneInterval
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.TimeZones.ZoneInterval
      description: The right hand side of the operator.
    return:
      type: System.Boolean
      description: <code>true</code> if values are not equal to each other, otherwise <code>false</code>.
    content.vb: Public Shared Operator <>(left As ZoneInterval, right As ZoneInterval) As Boolean
  overload: NodaTime.TimeZones.ZoneInterval.op_Inequality*
  implements:
  - System.Numerics.IEqualityOperators{NodaTime.TimeZones.ZoneInterval,NodaTime.TimeZones.ZoneInterval,System.Boolean}.op_Inequality(NodaTime.TimeZones.ZoneInterval,NodaTime.TimeZones.ZoneInterval)
  nameWithType.vb: ZoneInterval.<>(ZoneInterval, ZoneInterval)
  fullName.vb: NodaTime.TimeZones.ZoneInterval.<>(NodaTime.TimeZones.ZoneInterval, NodaTime.TimeZones.ZoneInterval)
  name.vb: <>(ZoneInterval, ZoneInterval)
- uid: NodaTime.TimeZones.ZoneInterval.Equals(System.Object)
  commentId: M:NodaTime.TimeZones.ZoneInterval.Equals(System.Object)
  id: Equals(System.Object)
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: Equals(object?)
  nameWithType: ZoneInterval.Equals(object?)
  fullName: NodaTime.TimeZones.ZoneInterval.Equals(object?)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: >-
    Determines whether the specified <xref href="System.Object" data-throw-if-not-resolved="false"></xref> is equal to the current <xref href="System.Object" data-throw-if-not-resolved="false"></xref>.

    See the type documentation for a description of equality semantics.
  example: []
  syntax:
    content: public override bool Equals(object? obj)
    parameters:
    - id: obj
      type: System.Object
      description: The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to compare with the current <xref href="System.Object" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: <code>true</code> if the specified <xref href="System.Object" data-throw-if-not-resolved="false"></xref> is equal to the current <xref href="System.Object" data-throw-if-not-resolved="false"></xref>; otherwise, <code>false</code>.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: NodaTime.TimeZones.ZoneInterval.Equals*
  nameWithType.vb: ZoneInterval.Equals(Object)
  fullName.vb: NodaTime.TimeZones.ZoneInterval.Equals(Object)
  name.vb: Equals(Object)
- uid: NodaTime.TimeZones.ZoneInterval.GetHashCode
  commentId: M:NodaTime.TimeZones.ZoneInterval.GetHashCode
  id: GetHashCode
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: ZoneInterval.GetHashCode()
  fullName: NodaTime.TimeZones.ZoneInterval.GetHashCode()
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: >-
    Returns a hash code for this zone interval.

    See the type documentation for a description of equality semantics.
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A hash code for this zone interval.
    content.vb: Public Overrides Function GetHashCode() As Integer
  overridden: System.Object.GetHashCode
  overload: NodaTime.TimeZones.ZoneInterval.GetHashCode*
- uid: NodaTime.TimeZones.ZoneInterval.ToString
  commentId: M:NodaTime.TimeZones.ZoneInterval.ToString
  id: ToString
  parent: NodaTime.TimeZones.ZoneInterval
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: ZoneInterval.ToString()
  fullName: NodaTime.TimeZones.ZoneInterval.ToString()
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime.TimeZones
  summary: Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this instance.
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this instance.
    content.vb: Public Overrides Function ToString() As String
  overridden: System.Object.ToString
  overload: NodaTime.TimeZones.ZoneInterval.ToString*
references:
- uid: NodaTime.TimeZones
  commentId: N:NodaTime.TimeZones
  href: NodaTime.html
  name: NodaTime.TimeZones
  nameWithType: NodaTime.TimeZones
  fullName: NodaTime.TimeZones
  spec.csharp:
  - uid: NodaTime
    name: NodaTime
    href: NodaTime.html
  - name: .
  - uid: NodaTime.TimeZones
    name: TimeZones
    href: NodaTime.TimeZones.html
  spec.vb:
  - uid: NodaTime
    name: NodaTime
    href: NodaTime.html
  - name: .
  - uid: NodaTime.TimeZones
    name: TimeZones
    href: NodaTime.TimeZones.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.IEquatable{NodaTime.TimeZones.ZoneInterval}
  commentId: T:System.IEquatable{NodaTime.TimeZones.ZoneInterval}
  parent: System
  definition: System.IEquatable`1
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<ZoneInterval>
  nameWithType: IEquatable<ZoneInterval>
  fullName: System.IEquatable<NodaTime.TimeZones.ZoneInterval>
  nameWithType.vb: IEquatable(Of ZoneInterval)
  fullName.vb: System.IEquatable(Of NodaTime.TimeZones.ZoneInterval)
  name.vb: IEquatable(Of ZoneInterval)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - uid: NodaTime.TimeZones.ZoneInterval
    name: ZoneInterval
    href: NodaTime.TimeZones.ZoneInterval.html
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - uid: NodaTime.TimeZones.ZoneInterval
    name: ZoneInterval
    href: NodaTime.TimeZones.ZoneInterval.html
  - name: )
- uid: System.Numerics.IEqualityOperators{NodaTime.TimeZones.ZoneInterval,NodaTime.TimeZones.ZoneInterval,System.Boolean}
  commentId: T:System.Numerics.IEqualityOperators{NodaTime.TimeZones.ZoneInterval,NodaTime.TimeZones.ZoneInterval,System.Boolean}
  parent: System.Numerics
  definition: System.Numerics.IEqualityOperators`3
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3
  name: IEqualityOperators<ZoneInterval, ZoneInterval, bool>
  nameWithType: IEqualityOperators<ZoneInterval, ZoneInterval, bool>
  fullName: System.Numerics.IEqualityOperators<NodaTime.TimeZones.ZoneInterval, NodaTime.TimeZones.ZoneInterval, bool>
  nameWithType.vb: IEqualityOperators(Of ZoneInterval, ZoneInterval, Boolean)
  fullName.vb: System.Numerics.IEqualityOperators(Of NodaTime.TimeZones.ZoneInterval, NodaTime.TimeZones.ZoneInterval, Boolean)
  name.vb: IEqualityOperators(Of ZoneInterval, ZoneInterval, Boolean)
  spec.csharp:
  - uid: System.Numerics.IEqualityOperators`3
    name: IEqualityOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3
  - name: <
  - uid: NodaTime.TimeZones.ZoneInterval
    name: ZoneInterval
    href: NodaTime.TimeZones.ZoneInterval.html
  - name: ','
  - name: " "
  - uid: NodaTime.TimeZones.ZoneInterval
    name: ZoneInterval
    href: NodaTime.TimeZones.ZoneInterval.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IEqualityOperators`3
    name: IEqualityOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3
  - name: (
  - name: Of
  - name: " "
  - uid: NodaTime.TimeZones.ZoneInterval
    name: ZoneInterval
    href: NodaTime.TimeZones.ZoneInterval.html
  - name: ','
  - name: " "
  - uid: NodaTime.TimeZones.ZoneInterval
    name: ZoneInterval
    href: NodaTime.TimeZones.ZoneInterval.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Numerics.IEqualityOperators`3
  commentId: T:System.Numerics.IEqualityOperators`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3
  name: IEqualityOperators<TSelf, TOther, TResult>
  nameWithType: IEqualityOperators<TSelf, TOther, TResult>
  fullName: System.Numerics.IEqualityOperators<TSelf, TOther, TResult>
  nameWithType.vb: IEqualityOperators(Of TSelf, TOther, TResult)
  fullName.vb: System.Numerics.IEqualityOperators(Of TSelf, TOther, TResult)
  name.vb: IEqualityOperators(Of TSelf, TOther, TResult)
  spec.csharp:
  - uid: System.Numerics.IEqualityOperators`3
    name: IEqualityOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3
  - name: <
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IEqualityOperators`3
    name: IEqualityOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3
  - name: (
  - name: Of
  - name: " "
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Numerics
  commentId: N:System.Numerics
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Numerics
  nameWithType: System.Numerics
  fullName: System.Numerics
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Numerics
    name: Numerics
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Numerics
    name: Numerics
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics
- uid: NodaTime.TimeZones.ZoneInterval.StandardOffset*
  commentId: Overload:NodaTime.TimeZones.ZoneInterval.StandardOffset
  href: NodaTime.TimeZones.ZoneInterval.html#NodaTime_TimeZones_ZoneInterval_StandardOffset
  name: StandardOffset
  nameWithType: ZoneInterval.StandardOffset
  fullName: NodaTime.TimeZones.ZoneInterval.StandardOffset
- uid: NodaTime.Offset
  commentId: T:NodaTime.Offset
  parent: NodaTime
  href: NodaTime.Offset.html
  name: Offset
  nameWithType: Offset
  fullName: NodaTime.Offset
- uid: NodaTime
  commentId: N:NodaTime
  href: NodaTime.html
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.invalidoperationexception
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: NodaTime.TimeZones.ZoneInterval.Duration*
  commentId: Overload:NodaTime.TimeZones.ZoneInterval.Duration
  href: NodaTime.TimeZones.ZoneInterval.html#NodaTime_TimeZones_ZoneInterval_Duration
  name: Duration
  nameWithType: ZoneInterval.Duration
  fullName: NodaTime.TimeZones.ZoneInterval.Duration
- uid: NodaTime.Duration
  commentId: T:NodaTime.Duration
  parent: NodaTime
  href: NodaTime.Duration.html
  name: Duration
  nameWithType: Duration
  fullName: NodaTime.Duration
- uid: NodaTime.TimeZones.ZoneInterval.HasStart*
  commentId: Overload:NodaTime.TimeZones.ZoneInterval.HasStart
  href: NodaTime.TimeZones.ZoneInterval.html#NodaTime_TimeZones_ZoneInterval_HasStart
  name: HasStart
  nameWithType: ZoneInterval.HasStart
  fullName: NodaTime.TimeZones.ZoneInterval.HasStart
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: NodaTime.TimeZones.ZoneInterval.End*
  commentId: Overload:NodaTime.TimeZones.ZoneInterval.End
  href: NodaTime.TimeZones.ZoneInterval.html#NodaTime_TimeZones_ZoneInterval_End
  name: End
  nameWithType: ZoneInterval.End
  fullName: NodaTime.TimeZones.ZoneInterval.End
- uid: NodaTime.Instant
  commentId: T:NodaTime.Instant
  parent: NodaTime
  href: NodaTime.Instant.html
  name: Instant
  nameWithType: Instant
  fullName: NodaTime.Instant
- uid: NodaTime.TimeZones.ZoneInterval.HasEnd*
  commentId: Overload:NodaTime.TimeZones.ZoneInterval.HasEnd
  href: NodaTime.TimeZones.ZoneInterval.html#NodaTime_TimeZones_ZoneInterval_HasEnd
  name: HasEnd
  nameWithType: ZoneInterval.HasEnd
  fullName: NodaTime.TimeZones.ZoneInterval.HasEnd
- uid: NodaTime.LocalDateTime
  commentId: T:NodaTime.LocalDateTime
  parent: NodaTime
  href: NodaTime.LocalDateTime.html
  name: LocalDateTime
  nameWithType: LocalDateTime
  fullName: NodaTime.LocalDateTime
- uid: System.OverflowException
  commentId: T:System.OverflowException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.overflowexception
  name: OverflowException
  nameWithType: OverflowException
  fullName: System.OverflowException
- uid: NodaTime.TimeZones.ZoneInterval.IsoLocalStart*
  commentId: Overload:NodaTime.TimeZones.ZoneInterval.IsoLocalStart
  href: NodaTime.TimeZones.ZoneInterval.html#NodaTime_TimeZones_ZoneInterval_IsoLocalStart
  name: IsoLocalStart
  nameWithType: ZoneInterval.IsoLocalStart
  fullName: NodaTime.TimeZones.ZoneInterval.IsoLocalStart
- uid: NodaTime.TimeZones.ZoneInterval.IsoLocalEnd*
  commentId: Overload:NodaTime.TimeZones.ZoneInterval.IsoLocalEnd
  href: NodaTime.TimeZones.ZoneInterval.html#NodaTime_TimeZones_ZoneInterval_IsoLocalEnd
  name: IsoLocalEnd
  nameWithType: ZoneInterval.IsoLocalEnd
  fullName: NodaTime.TimeZones.ZoneInterval.IsoLocalEnd
- uid: NodaTime.TimeZones.ZoneInterval.Name*
  commentId: Overload:NodaTime.TimeZones.ZoneInterval.Name
  href: NodaTime.TimeZones.ZoneInterval.html#NodaTime_TimeZones_ZoneInterval_Name
  name: Name
  nameWithType: ZoneInterval.Name
  fullName: NodaTime.TimeZones.ZoneInterval.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: NodaTime.TimeZones.ZoneInterval.WallOffset*
  commentId: Overload:NodaTime.TimeZones.ZoneInterval.WallOffset
  href: NodaTime.TimeZones.ZoneInterval.html#NodaTime_TimeZones_ZoneInterval_WallOffset
  name: WallOffset
  nameWithType: ZoneInterval.WallOffset
  fullName: NodaTime.TimeZones.ZoneInterval.WallOffset
- uid: NodaTime.TimeZones.ZoneInterval.Savings*
  commentId: Overload:NodaTime.TimeZones.ZoneInterval.Savings
  href: NodaTime.TimeZones.ZoneInterval.html#NodaTime_TimeZones_ZoneInterval_Savings
  name: Savings
  nameWithType: ZoneInterval.Savings
  fullName: NodaTime.TimeZones.ZoneInterval.Savings
- uid: NodaTime.TimeZones.ZoneInterval.Start*
  commentId: Overload:NodaTime.TimeZones.ZoneInterval.Start
  href: NodaTime.TimeZones.ZoneInterval.html#NodaTime_TimeZones_ZoneInterval_Start
  name: Start
  nameWithType: ZoneInterval.Start
  fullName: NodaTime.TimeZones.ZoneInterval.Start
- uid: NodaTime.TimeZones.ZoneInterval
  commentId: T:NodaTime.TimeZones.ZoneInterval
  parent: NodaTime.TimeZones
  href: NodaTime.TimeZones.ZoneInterval.html
  name: ZoneInterval
  nameWithType: ZoneInterval
  fullName: NodaTime.TimeZones.ZoneInterval
- uid: NodaTime.TimeZones.ZoneInterval.WallOffset
  commentId: P:NodaTime.TimeZones.ZoneInterval.WallOffset
  href: NodaTime.TimeZones.ZoneInterval.html#NodaTime_TimeZones_ZoneInterval_WallOffset
  name: WallOffset
  nameWithType: ZoneInterval.WallOffset
  fullName: NodaTime.TimeZones.ZoneInterval.WallOffset
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: NodaTime.TimeZones.ZoneInterval.#ctor*
  commentId: Overload:NodaTime.TimeZones.ZoneInterval.#ctor
  href: NodaTime.TimeZones.ZoneInterval.html#NodaTime_TimeZones_ZoneInterval__ctor_System_String_System_Nullable_NodaTime_Instant__System_Nullable_NodaTime_Instant__NodaTime_Offset_NodaTime_Offset_
  name: ZoneInterval
  nameWithType: ZoneInterval.ZoneInterval
  fullName: NodaTime.TimeZones.ZoneInterval.ZoneInterval
  nameWithType.vb: ZoneInterval.New
  fullName.vb: NodaTime.TimeZones.ZoneInterval.New
  name.vb: New
- uid: System.Nullable{NodaTime.Instant}
  commentId: T:System.Nullable{NodaTime.Instant}
  parent: System
  definition: System.Nullable`1
  href: NodaTime.Instant.html
  name: Instant?
  nameWithType: Instant?
  fullName: NodaTime.Instant?
  spec.csharp:
  - uid: NodaTime.Instant
    name: Instant
    href: NodaTime.Instant.html
  - name: '?'
  spec.vb:
  - uid: NodaTime.Instant
    name: Instant
    href: NodaTime.Instant.html
  - name: '?'
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NodaTime.TimeZones.ZoneInterval.Contains*
  commentId: Overload:NodaTime.TimeZones.ZoneInterval.Contains
  href: NodaTime.TimeZones.ZoneInterval.html#NodaTime_TimeZones_ZoneInterval_Contains_NodaTime_Instant_
  name: Contains
  nameWithType: ZoneInterval.Contains
  fullName: NodaTime.TimeZones.ZoneInterval.Contains
- uid: NodaTime.TimeZones.ZoneInterval.Equals*
  commentId: Overload:NodaTime.TimeZones.ZoneInterval.Equals
  href: NodaTime.TimeZones.ZoneInterval.html#NodaTime_TimeZones_ZoneInterval_Equals_NodaTime_TimeZones_ZoneInterval_
  name: Equals
  nameWithType: ZoneInterval.Equals
  fullName: NodaTime.TimeZones.ZoneInterval.Equals
- uid: System.IEquatable{NodaTime.TimeZones.ZoneInterval}.Equals(NodaTime.TimeZones.ZoneInterval)
  commentId: M:System.IEquatable{NodaTime.TimeZones.ZoneInterval}.Equals(NodaTime.TimeZones.ZoneInterval)
  parent: System.IEquatable{NodaTime.TimeZones.ZoneInterval}
  definition: System.IEquatable`1.Equals(`0)
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(ZoneInterval)
  nameWithType: IEquatable<ZoneInterval>.Equals(ZoneInterval)
  fullName: System.IEquatable<NodaTime.TimeZones.ZoneInterval>.Equals(NodaTime.TimeZones.ZoneInterval)
  nameWithType.vb: IEquatable(Of ZoneInterval).Equals(ZoneInterval)
  fullName.vb: System.IEquatable(Of NodaTime.TimeZones.ZoneInterval).Equals(NodaTime.TimeZones.ZoneInterval)
  spec.csharp:
  - uid: System.IEquatable{NodaTime.TimeZones.ZoneInterval}.Equals(NodaTime.TimeZones.ZoneInterval)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: NodaTime.TimeZones.ZoneInterval
    name: ZoneInterval
    href: NodaTime.TimeZones.ZoneInterval.html
  - name: )
  spec.vb:
  - uid: System.IEquatable{NodaTime.TimeZones.ZoneInterval}.Equals(NodaTime.TimeZones.ZoneInterval)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: NodaTime.TimeZones.ZoneInterval
    name: ZoneInterval
    href: NodaTime.TimeZones.ZoneInterval.html
  - name: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
- uid: NodaTime.TimeZones.ZoneInterval.op_Equality*
  commentId: Overload:NodaTime.TimeZones.ZoneInterval.op_Equality
  href: NodaTime.TimeZones.ZoneInterval.html#NodaTime_TimeZones_ZoneInterval_op_Equality_NodaTime_TimeZones_ZoneInterval_NodaTime_TimeZones_ZoneInterval_
  name: operator ==
  nameWithType: ZoneInterval.operator ==
  fullName: NodaTime.TimeZones.ZoneInterval.operator ==
  nameWithType.vb: ZoneInterval.=
  fullName.vb: NodaTime.TimeZones.ZoneInterval.=
  name.vb: =
  spec.csharp:
  - name: operator
  - name: " "
  - uid: NodaTime.TimeZones.ZoneInterval.op_Equality*
    name: ==
    href: NodaTime.TimeZones.ZoneInterval.html#NodaTime_TimeZones_ZoneInterval_op_Equality_NodaTime_TimeZones_ZoneInterval_NodaTime_TimeZones_ZoneInterval_
- uid: System.Numerics.IEqualityOperators{NodaTime.TimeZones.ZoneInterval,NodaTime.TimeZones.ZoneInterval,System.Boolean}.op_Equality(NodaTime.TimeZones.ZoneInterval,NodaTime.TimeZones.ZoneInterval)
  commentId: M:System.Numerics.IEqualityOperators{NodaTime.TimeZones.ZoneInterval,NodaTime.TimeZones.ZoneInterval,System.Boolean}.op_Equality(NodaTime.TimeZones.ZoneInterval,NodaTime.TimeZones.ZoneInterval)
  parent: System.Numerics.IEqualityOperators{NodaTime.TimeZones.ZoneInterval,NodaTime.TimeZones.ZoneInterval,System.Boolean}
  definition: System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_equality
  name: operator ==(ZoneInterval, ZoneInterval)
  nameWithType: IEqualityOperators<ZoneInterval, ZoneInterval, bool>.operator ==(ZoneInterval, ZoneInterval)
  fullName: System.Numerics.IEqualityOperators<NodaTime.TimeZones.ZoneInterval, NodaTime.TimeZones.ZoneInterval, bool>.operator ==(NodaTime.TimeZones.ZoneInterval, NodaTime.TimeZones.ZoneInterval)
  nameWithType.vb: IEqualityOperators(Of ZoneInterval, ZoneInterval, Boolean).=(ZoneInterval, ZoneInterval)
  fullName.vb: System.Numerics.IEqualityOperators(Of NodaTime.TimeZones.ZoneInterval, NodaTime.TimeZones.ZoneInterval, Boolean).=(NodaTime.TimeZones.ZoneInterval, NodaTime.TimeZones.ZoneInterval)
  name.vb: =(ZoneInterval, ZoneInterval)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IEqualityOperators{NodaTime.TimeZones.ZoneInterval,NodaTime.TimeZones.ZoneInterval,System.Boolean}.op_Equality(NodaTime.TimeZones.ZoneInterval,NodaTime.TimeZones.ZoneInterval)
    name: ==
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_equality
  - name: (
  - uid: NodaTime.TimeZones.ZoneInterval
    name: ZoneInterval
    href: NodaTime.TimeZones.ZoneInterval.html
  - name: ','
  - name: " "
  - uid: NodaTime.TimeZones.ZoneInterval
    name: ZoneInterval
    href: NodaTime.TimeZones.ZoneInterval.html
  - name: )
  spec.vb:
  - name: =
  - name: (
  - uid: NodaTime.TimeZones.ZoneInterval
    name: ZoneInterval
    href: NodaTime.TimeZones.ZoneInterval.html
  - name: ','
  - name: " "
  - uid: NodaTime.TimeZones.ZoneInterval
    name: ZoneInterval
    href: NodaTime.TimeZones.ZoneInterval.html
  - name: )
- uid: System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)
  commentId: M:System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_equality
  name: operator ==(TSelf, TOther)
  nameWithType: IEqualityOperators<TSelf, TOther, TResult>.operator ==(TSelf, TOther)
  fullName: System.Numerics.IEqualityOperators<TSelf, TOther, TResult>.operator ==(TSelf, TOther)
  nameWithType.vb: IEqualityOperators(Of TSelf, TOther, TResult).=(TSelf, TOther)
  fullName.vb: System.Numerics.IEqualityOperators(Of TSelf, TOther, TResult).=(TSelf, TOther)
  name.vb: =(TSelf, TOther)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)
    name: ==
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_equality
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: =
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: NodaTime.TimeZones.ZoneInterval.op_Inequality*
  commentId: Overload:NodaTime.TimeZones.ZoneInterval.op_Inequality
  href: NodaTime.TimeZones.ZoneInterval.html#NodaTime_TimeZones_ZoneInterval_op_Inequality_NodaTime_TimeZones_ZoneInterval_NodaTime_TimeZones_ZoneInterval_
  name: operator !=
  nameWithType: ZoneInterval.operator !=
  fullName: NodaTime.TimeZones.ZoneInterval.operator !=
  nameWithType.vb: ZoneInterval.<>
  fullName.vb: NodaTime.TimeZones.ZoneInterval.<>
  name.vb: <>
  spec.csharp:
  - name: operator
  - name: " "
  - uid: NodaTime.TimeZones.ZoneInterval.op_Inequality*
    name: '!='
    href: NodaTime.TimeZones.ZoneInterval.html#NodaTime_TimeZones_ZoneInterval_op_Inequality_NodaTime_TimeZones_ZoneInterval_NodaTime_TimeZones_ZoneInterval_
- uid: System.Numerics.IEqualityOperators{NodaTime.TimeZones.ZoneInterval,NodaTime.TimeZones.ZoneInterval,System.Boolean}.op_Inequality(NodaTime.TimeZones.ZoneInterval,NodaTime.TimeZones.ZoneInterval)
  commentId: M:System.Numerics.IEqualityOperators{NodaTime.TimeZones.ZoneInterval,NodaTime.TimeZones.ZoneInterval,System.Boolean}.op_Inequality(NodaTime.TimeZones.ZoneInterval,NodaTime.TimeZones.ZoneInterval)
  parent: System.Numerics.IEqualityOperators{NodaTime.TimeZones.ZoneInterval,NodaTime.TimeZones.ZoneInterval,System.Boolean}
  definition: System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_inequality
  name: operator !=(ZoneInterval, ZoneInterval)
  nameWithType: IEqualityOperators<ZoneInterval, ZoneInterval, bool>.operator !=(ZoneInterval, ZoneInterval)
  fullName: System.Numerics.IEqualityOperators<NodaTime.TimeZones.ZoneInterval, NodaTime.TimeZones.ZoneInterval, bool>.operator !=(NodaTime.TimeZones.ZoneInterval, NodaTime.TimeZones.ZoneInterval)
  nameWithType.vb: IEqualityOperators(Of ZoneInterval, ZoneInterval, Boolean).<>(ZoneInterval, ZoneInterval)
  fullName.vb: System.Numerics.IEqualityOperators(Of NodaTime.TimeZones.ZoneInterval, NodaTime.TimeZones.ZoneInterval, Boolean).<>(NodaTime.TimeZones.ZoneInterval, NodaTime.TimeZones.ZoneInterval)
  name.vb: <>(ZoneInterval, ZoneInterval)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IEqualityOperators{NodaTime.TimeZones.ZoneInterval,NodaTime.TimeZones.ZoneInterval,System.Boolean}.op_Inequality(NodaTime.TimeZones.ZoneInterval,NodaTime.TimeZones.ZoneInterval)
    name: '!='
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_inequality
  - name: (
  - uid: NodaTime.TimeZones.ZoneInterval
    name: ZoneInterval
    href: NodaTime.TimeZones.ZoneInterval.html
  - name: ','
  - name: " "
  - uid: NodaTime.TimeZones.ZoneInterval
    name: ZoneInterval
    href: NodaTime.TimeZones.ZoneInterval.html
  - name: )
  spec.vb:
  - name: <>
  - name: (
  - uid: NodaTime.TimeZones.ZoneInterval
    name: ZoneInterval
    href: NodaTime.TimeZones.ZoneInterval.html
  - name: ','
  - name: " "
  - uid: NodaTime.TimeZones.ZoneInterval
    name: ZoneInterval
    href: NodaTime.TimeZones.ZoneInterval.html
  - name: )
- uid: System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)
  commentId: M:System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_inequality
  name: operator !=(TSelf, TOther)
  nameWithType: IEqualityOperators<TSelf, TOther, TResult>.operator !=(TSelf, TOther)
  fullName: System.Numerics.IEqualityOperators<TSelf, TOther, TResult>.operator !=(TSelf, TOther)
  nameWithType.vb: IEqualityOperators(Of TSelf, TOther, TResult).<>(TSelf, TOther)
  fullName.vb: System.Numerics.IEqualityOperators(Of TSelf, TOther, TResult).<>(TSelf, TOther)
  name.vb: <>(TSelf, TOther)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)
    name: '!='
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_inequality
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: <>
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: NodaTime.TimeZones.ZoneInterval.GetHashCode*
  commentId: Overload:NodaTime.TimeZones.ZoneInterval.GetHashCode
  href: NodaTime.TimeZones.ZoneInterval.html#NodaTime_TimeZones_ZoneInterval_GetHashCode
  name: GetHashCode
  nameWithType: ZoneInterval.GetHashCode
  fullName: NodaTime.TimeZones.ZoneInterval.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: NodaTime.TimeZones.ZoneInterval.ToString*
  commentId: Overload:NodaTime.TimeZones.ZoneInterval.ToString
  href: NodaTime.TimeZones.ZoneInterval.html#NodaTime_TimeZones_ZoneInterval_ToString
  name: ToString
  nameWithType: ZoneInterval.ToString
  fullName: NodaTime.TimeZones.ZoneInterval.ToString
shouldSkipMarkup: true
