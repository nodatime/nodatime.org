### YamlMime:ManagedReference
items:
- uid: NodaTime.LocalDate
  commentId: T:NodaTime.LocalDate
  id: LocalDate
  parent: NodaTime
  children:
  - NodaTime.LocalDate.#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32,System.Int32)
  - NodaTime.LocalDate.#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)
  - NodaTime.LocalDate.#ctor(System.Int32,System.Int32,System.Int32)
  - NodaTime.LocalDate.#ctor(System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)
  - NodaTime.LocalDate.Add(NodaTime.LocalDate,NodaTime.Period)
  - NodaTime.LocalDate.AddSchema(System.Xml.Schema.XmlSchemaSet)
  - NodaTime.LocalDate.At(NodaTime.LocalTime)
  - NodaTime.LocalDate.AtMidnight
  - NodaTime.LocalDate.AtStartOfDayInZone(NodaTime.DateTimeZone)
  - NodaTime.LocalDate.Calendar
  - NodaTime.LocalDate.CompareTo(NodaTime.LocalDate)
  - NodaTime.LocalDate.Day
  - NodaTime.LocalDate.DayOfWeek
  - NodaTime.LocalDate.DayOfYear
  - NodaTime.LocalDate.Deconstruct(System.Int32@,System.Int32@,System.Int32@)
  - NodaTime.LocalDate.Deconstruct(System.Int32@,System.Int32@,System.Int32@,NodaTime.CalendarSystem@)
  - NodaTime.LocalDate.Equals(NodaTime.LocalDate)
  - NodaTime.LocalDate.Equals(System.Object)
  - NodaTime.LocalDate.Era
  - NodaTime.LocalDate.FromDateOnly(System.DateOnly)
  - NodaTime.LocalDate.FromDateTime(System.DateTime)
  - NodaTime.LocalDate.FromDateTime(System.DateTime,NodaTime.CalendarSystem)
  - NodaTime.LocalDate.FromWeekYearWeekAndDay(System.Int32,System.Int32,NodaTime.IsoDayOfWeek)
  - NodaTime.LocalDate.FromYearMonthWeekAndDay(System.Int32,System.Int32,System.Int32,NodaTime.IsoDayOfWeek)
  - NodaTime.LocalDate.GetHashCode
  - NodaTime.LocalDate.Max(NodaTime.LocalDate,NodaTime.LocalDate)
  - NodaTime.LocalDate.MaxIsoValue
  - NodaTime.LocalDate.Min(NodaTime.LocalDate,NodaTime.LocalDate)
  - NodaTime.LocalDate.MinIsoValue
  - NodaTime.LocalDate.Minus(NodaTime.LocalDate)
  - NodaTime.LocalDate.Minus(NodaTime.Period)
  - NodaTime.LocalDate.Month
  - NodaTime.LocalDate.Next(NodaTime.IsoDayOfWeek)
  - NodaTime.LocalDate.Plus(NodaTime.Period)
  - NodaTime.LocalDate.PlusDays(System.Int32)
  - NodaTime.LocalDate.PlusMonths(System.Int32)
  - NodaTime.LocalDate.PlusWeeks(System.Int32)
  - NodaTime.LocalDate.PlusYears(System.Int32)
  - NodaTime.LocalDate.Previous(NodaTime.IsoDayOfWeek)
  - NodaTime.LocalDate.Subtract(NodaTime.LocalDate,NodaTime.LocalDate)
  - NodaTime.LocalDate.Subtract(NodaTime.LocalDate,NodaTime.Period)
  - NodaTime.LocalDate.System#IComparable#CompareTo(System.Object)
  - NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#GetSchema
  - NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  - NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  - NodaTime.LocalDate.ToDateOnly
  - NodaTime.LocalDate.ToDateTimeUnspecified
  - NodaTime.LocalDate.ToString
  - NodaTime.LocalDate.ToString(System.String,System.IFormatProvider)
  - NodaTime.LocalDate.ToYearMonth
  - NodaTime.LocalDate.With(System.Func{NodaTime.LocalDate,NodaTime.LocalDate})
  - NodaTime.LocalDate.WithCalendar(NodaTime.CalendarSystem)
  - NodaTime.LocalDate.WithOffset(NodaTime.Offset)
  - NodaTime.LocalDate.Year
  - NodaTime.LocalDate.YearOfEra
  - NodaTime.LocalDate.op_Addition(NodaTime.LocalDate,NodaTime.LocalTime)
  - NodaTime.LocalDate.op_Addition(NodaTime.LocalDate,NodaTime.Period)
  - NodaTime.LocalDate.op_Equality(NodaTime.LocalDate,NodaTime.LocalDate)
  - NodaTime.LocalDate.op_GreaterThan(NodaTime.LocalDate,NodaTime.LocalDate)
  - NodaTime.LocalDate.op_GreaterThanOrEqual(NodaTime.LocalDate,NodaTime.LocalDate)
  - NodaTime.LocalDate.op_Inequality(NodaTime.LocalDate,NodaTime.LocalDate)
  - NodaTime.LocalDate.op_LessThan(NodaTime.LocalDate,NodaTime.LocalDate)
  - NodaTime.LocalDate.op_LessThanOrEqual(NodaTime.LocalDate,NodaTime.LocalDate)
  - NodaTime.LocalDate.op_Subtraction(NodaTime.LocalDate,NodaTime.LocalDate)
  - NodaTime.LocalDate.op_Subtraction(NodaTime.LocalDate,NodaTime.Period)
  langs:
  - csharp
  - vb
  name: LocalDate
  nameWithType: LocalDate
  fullName: NodaTime.LocalDate
  type: Struct
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    LocalDate is an immutable struct representing a date within the calendar,

    with no reference to a particular time zone or time of day.
  remarks: >-
    <p>

    Values can freely be compared for equality: a value in a different calendar system is not equal to

    a value in a different calendar system. However, ordering comparisons (either via the <xref href="NodaTime.LocalDate.CompareTo(NodaTime.LocalDate)" data-throw-if-not-resolved="false"></xref> method

    or via operators) fail with <xref href="System.ArgumentException" data-throw-if-not-resolved="false"></xref>; attempting to compare values in different calendars

    almost always indicates a bug in the calling code.

    </p>

    <p>The default value of this type is 0001-01-01 (January 1st, 1 C.E.) in the ISO calendar.</p>
  example: []
  syntax:
    content: >-
      [TypeConverter(typeof(LocalDateTypeConverter))]

      public readonly struct LocalDate : IEquatable<LocalDate>, IComparable<LocalDate>, IComparable, IFormattable, IXmlSerializable, IAdditionOperators<LocalDate, Period, LocalDate>, IAdditionOperators<LocalDate, LocalTime, LocalDateTime>, ISubtractionOperators<LocalDate, Period, LocalDate>, ISubtractionOperators<LocalDate, LocalDate, Period>, IComparisonOperators<LocalDate, LocalDate, bool>, IEqualityOperators<LocalDate, LocalDate, bool>
    content.vb: >-
      <TypeConverter(GetType(LocalDateTypeConverter))>

      Public Structure LocalDate Implements IEquatable(Of LocalDate), IComparable(Of LocalDate), IComparable, IFormattable, IXmlSerializable, IAdditionOperators(Of LocalDate, Period, LocalDate), IAdditionOperators(Of LocalDate, LocalTime, LocalDateTime), ISubtractionOperators(Of LocalDate, Period, LocalDate), ISubtractionOperators(Of LocalDate, LocalDate, Period), IComparisonOperators(Of LocalDate, LocalDate, Boolean), IEqualityOperators(Of LocalDate, LocalDate, Boolean)
  implements:
  - System.IEquatable{NodaTime.LocalDate}
  - System.IComparable{NodaTime.LocalDate}
  - System.IComparable
  - System.IFormattable
  - System.Xml.Serialization.IXmlSerializable
  - System.Numerics.IAdditionOperators{NodaTime.LocalDate,NodaTime.Period,NodaTime.LocalDate}
  - System.Numerics.IAdditionOperators{NodaTime.LocalDate,NodaTime.LocalTime,NodaTime.LocalDateTime}
  - System.Numerics.ISubtractionOperators{NodaTime.LocalDate,NodaTime.Period,NodaTime.LocalDate}
  - System.Numerics.ISubtractionOperators{NodaTime.LocalDate,NodaTime.LocalDate,NodaTime.Period}
  - System.Numerics.IComparisonOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}
  - System.Numerics.IEqualityOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
- uid: NodaTime.LocalDate.MaxIsoValue
  commentId: P:NodaTime.LocalDate.MaxIsoValue
  id: MaxIsoValue
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: MaxIsoValue
  nameWithType: LocalDate.MaxIsoValue
  fullName: NodaTime.LocalDate.MaxIsoValue
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: The maximum (latest) date representable in the ISO calendar system.
  example: []
  syntax:
    content: public static LocalDate MaxIsoValue { get; }
    parameters: []
    return:
      type: NodaTime.LocalDate
    content.vb: Public Shared ReadOnly Property MaxIsoValue As LocalDate
  overload: NodaTime.LocalDate.MaxIsoValue*
- uid: NodaTime.LocalDate.MinIsoValue
  commentId: P:NodaTime.LocalDate.MinIsoValue
  id: MinIsoValue
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: MinIsoValue
  nameWithType: LocalDate.MinIsoValue
  fullName: NodaTime.LocalDate.MinIsoValue
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: The minimum (earliest) date representable in the ISO calendar system.
  example: []
  syntax:
    content: public static LocalDate MinIsoValue { get; }
    parameters: []
    return:
      type: NodaTime.LocalDate
    content.vb: Public Shared ReadOnly Property MinIsoValue As LocalDate
  overload: NodaTime.LocalDate.MinIsoValue*
- uid: NodaTime.LocalDate.#ctor(System.Int32,System.Int32,System.Int32)
  commentId: M:NodaTime.LocalDate.#ctor(System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32,System.Int32)'
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: LocalDate(int, int, int)
  nameWithType: LocalDate.LocalDate(int, int, int)
  fullName: NodaTime.LocalDate.LocalDate(int, int, int)
  type: Constructor
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Constructs an instance for the given year, month and day in the ISO calendar.
  example: []
  syntax:
    content: public LocalDate(int year, int month, int day)
    parameters:
    - id: year
      type: System.Int32
      description: The year. This is the "absolute year", so a value of 0 means 1 BC, for example.
    - id: month
      type: System.Int32
      description: The month of year.
    - id: day
      type: System.Int32
      description: The day of month.
    content.vb: Public Sub New(year As Integer, month As Integer, day As Integer)
  overload: NodaTime.LocalDate.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The parameters do not form a valid date.
  nameWithType.vb: LocalDate.New(Integer, Integer, Integer)
  fullName.vb: NodaTime.LocalDate.New(Integer, Integer, Integer)
  name.vb: New(Integer, Integer, Integer)
- uid: NodaTime.LocalDate.#ctor(System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)
  commentId: M:NodaTime.LocalDate.#ctor(System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)
  id: '#ctor(System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)'
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: LocalDate(int, int, int, CalendarSystem)
  nameWithType: LocalDate.LocalDate(int, int, int, CalendarSystem)
  fullName: NodaTime.LocalDate.LocalDate(int, int, int, NodaTime.CalendarSystem)
  type: Constructor
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Constructs an instance for the given year, month and day in the specified calendar.
  example: []
  syntax:
    content: public LocalDate(int year, int month, int day, CalendarSystem calendar)
    parameters:
    - id: year
      type: System.Int32
      description: >-
        The year. This is the "absolute year", so, for
            the ISO calendar, a value of 0 means 1 BC, for example.
    - id: month
      type: System.Int32
      description: The month of year.
    - id: day
      type: System.Int32
      description: The day of month.
    - id: calendar
      type: NodaTime.CalendarSystem
      description: Calendar system in which to create the date.
    content.vb: Public Sub New(year As Integer, month As Integer, day As Integer, calendar As CalendarSystem)
  overload: NodaTime.LocalDate.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The parameters do not form a valid date.
  nameWithType.vb: LocalDate.New(Integer, Integer, Integer, CalendarSystem)
  fullName.vb: NodaTime.LocalDate.New(Integer, Integer, Integer, NodaTime.CalendarSystem)
  name.vb: New(Integer, Integer, Integer, CalendarSystem)
- uid: NodaTime.LocalDate.#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32,System.Int32)
  commentId: M:NodaTime.LocalDate.#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32,System.Int32)
  id: '#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32,System.Int32)'
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: LocalDate(Era, int, int, int)
  nameWithType: LocalDate.LocalDate(Era, int, int, int)
  fullName: NodaTime.LocalDate.LocalDate(NodaTime.Calendars.Era, int, int, int)
  type: Constructor
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Constructs an instance for the given era, year of era, month and day in the ISO calendar.
  example: []
  syntax:
    content: public LocalDate(Era era, int yearOfEra, int month, int day)
    parameters:
    - id: era
      type: NodaTime.Calendars.Era
      description: The era within which to create a date. Must be a valid era within the ISO calendar.
    - id: yearOfEra
      type: System.Int32
      description: The year of era.
    - id: month
      type: System.Int32
      description: The month of year.
    - id: day
      type: System.Int32
      description: The day of month.
    content.vb: Public Sub New(era As Era, yearOfEra As Integer, month As Integer, day As Integer)
  overload: NodaTime.LocalDate.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The parameters do not form a valid date.
  nameWithType.vb: LocalDate.New(Era, Integer, Integer, Integer)
  fullName.vb: NodaTime.LocalDate.New(NodaTime.Calendars.Era, Integer, Integer, Integer)
  name.vb: New(Era, Integer, Integer, Integer)
- uid: NodaTime.LocalDate.#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)
  commentId: M:NodaTime.LocalDate.#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)
  id: '#ctor(NodaTime.Calendars.Era,System.Int32,System.Int32,System.Int32,NodaTime.CalendarSystem)'
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: LocalDate(Era, int, int, int, CalendarSystem)
  nameWithType: LocalDate.LocalDate(Era, int, int, int, CalendarSystem)
  fullName: NodaTime.LocalDate.LocalDate(NodaTime.Calendars.Era, int, int, int, NodaTime.CalendarSystem)
  type: Constructor
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Constructs an instance for the given era, year of era, month and day in the specified calendar.
  example: []
  syntax:
    content: public LocalDate(Era era, int yearOfEra, int month, int day, CalendarSystem calendar)
    parameters:
    - id: era
      type: NodaTime.Calendars.Era
      description: The era within which to create a date. Must be a valid era within the specified calendar.
    - id: yearOfEra
      type: System.Int32
      description: The year of era.
    - id: month
      type: System.Int32
      description: The month of year.
    - id: day
      type: System.Int32
      description: The day of month.
    - id: calendar
      type: NodaTime.CalendarSystem
      description: Calendar system in which to create the date.
    content.vb: Public Sub New(era As Era, yearOfEra As Integer, month As Integer, day As Integer, calendar As CalendarSystem)
  overload: NodaTime.LocalDate.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The parameters do not form a valid date.
  nameWithType.vb: LocalDate.New(Era, Integer, Integer, Integer, CalendarSystem)
  fullName.vb: NodaTime.LocalDate.New(NodaTime.Calendars.Era, Integer, Integer, Integer, NodaTime.CalendarSystem)
  name.vb: New(Era, Integer, Integer, Integer, CalendarSystem)
- uid: NodaTime.LocalDate.Calendar
  commentId: P:NodaTime.LocalDate.Calendar
  id: Calendar
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Calendar
  nameWithType: LocalDate.Calendar
  fullName: NodaTime.LocalDate.Calendar
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the calendar system associated with this local date.
  example: []
  syntax:
    content: public CalendarSystem Calendar { get; }
    parameters: []
    return:
      type: NodaTime.CalendarSystem
      description: The calendar system associated with this local date.
    content.vb: Public ReadOnly Property Calendar As CalendarSystem
  overload: NodaTime.LocalDate.Calendar*
- uid: NodaTime.LocalDate.Year
  commentId: P:NodaTime.LocalDate.Year
  id: Year
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Year
  nameWithType: LocalDate.Year
  fullName: NodaTime.LocalDate.Year
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the year of this local date.
  remarks: >-
    This returns the "absolute year", so, for the ISO calendar,
        a value of 0 means 1 BC, for example.
  example: []
  syntax:
    content: public int Year { get; }
    parameters: []
    return:
      type: System.Int32
      description: The year of this local date.
    content.vb: Public ReadOnly Property Year As Integer
  overload: NodaTime.LocalDate.Year*
- uid: NodaTime.LocalDate.Month
  commentId: P:NodaTime.LocalDate.Month
  id: Month
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Month
  nameWithType: LocalDate.Month
  fullName: NodaTime.LocalDate.Month
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the month of this local date within the year.
  example: []
  syntax:
    content: public int Month { get; }
    parameters: []
    return:
      type: System.Int32
      description: The month of this local date within the year.
    content.vb: Public ReadOnly Property Month As Integer
  overload: NodaTime.LocalDate.Month*
- uid: NodaTime.LocalDate.Day
  commentId: P:NodaTime.LocalDate.Day
  id: Day
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Day
  nameWithType: LocalDate.Day
  fullName: NodaTime.LocalDate.Day
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the day of this local date within the month.
  example: []
  syntax:
    content: public int Day { get; }
    parameters: []
    return:
      type: System.Int32
      description: The day of this local date within the month.
    content.vb: Public ReadOnly Property Day As Integer
  overload: NodaTime.LocalDate.Day*
- uid: NodaTime.LocalDate.DayOfWeek
  commentId: P:NodaTime.LocalDate.DayOfWeek
  id: DayOfWeek
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: DayOfWeek
  nameWithType: LocalDate.DayOfWeek
  fullName: NodaTime.LocalDate.DayOfWeek
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the week day of this local date expressed as an <xref href="NodaTime.IsoDayOfWeek" data-throw-if-not-resolved="false"></xref> value.
  example: []
  syntax:
    content: public IsoDayOfWeek DayOfWeek { get; }
    parameters: []
    return:
      type: NodaTime.IsoDayOfWeek
      description: The week day of this local date expressed as an <code>IsoDayOfWeek</code>.
    content.vb: Public ReadOnly Property DayOfWeek As IsoDayOfWeek
  overload: NodaTime.LocalDate.DayOfWeek*
- uid: NodaTime.LocalDate.YearOfEra
  commentId: P:NodaTime.LocalDate.YearOfEra
  id: YearOfEra
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: YearOfEra
  nameWithType: LocalDate.YearOfEra
  fullName: NodaTime.LocalDate.YearOfEra
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the year of this local date within the era.
  example: []
  syntax:
    content: public int YearOfEra { get; }
    parameters: []
    return:
      type: System.Int32
      description: The year of this local date within the era.
    content.vb: Public ReadOnly Property YearOfEra As Integer
  overload: NodaTime.LocalDate.YearOfEra*
- uid: NodaTime.LocalDate.Era
  commentId: P:NodaTime.LocalDate.Era
  id: Era
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Era
  nameWithType: LocalDate.Era
  fullName: NodaTime.LocalDate.Era
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the era of this local date.
  example: []
  syntax:
    content: public Era Era { get; }
    parameters: []
    return:
      type: NodaTime.Calendars.Era
      description: The era of this local date.
    content.vb: Public ReadOnly Property Era As Era
  overload: NodaTime.LocalDate.Era*
- uid: NodaTime.LocalDate.DayOfYear
  commentId: P:NodaTime.LocalDate.DayOfYear
  id: DayOfYear
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: DayOfYear
  nameWithType: LocalDate.DayOfYear
  fullName: NodaTime.LocalDate.DayOfYear
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the day of this local date within the year.
  example: []
  syntax:
    content: public int DayOfYear { get; }
    parameters: []
    return:
      type: System.Int32
      description: The day of this local date within the year.
    content.vb: Public ReadOnly Property DayOfYear As Integer
  overload: NodaTime.LocalDate.DayOfYear*
- uid: NodaTime.LocalDate.AtMidnight
  commentId: M:NodaTime.LocalDate.AtMidnight
  id: AtMidnight
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: AtMidnight()
  nameWithType: LocalDate.AtMidnight()
  fullName: NodaTime.LocalDate.AtMidnight()
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets a <xref href="NodaTime.LocalDateTime" data-throw-if-not-resolved="false"></xref> at midnight on the date represented by this local date.
  example: []
  syntax:
    content: public LocalDateTime AtMidnight()
    return:
      type: NodaTime.LocalDateTime
      description: >-
        The <xref href="NodaTime.LocalDateTime" data-throw-if-not-resolved="false"></xref> representing midnight on this local date, in the same calendar
            system.
    content.vb: Public Function AtMidnight() As LocalDateTime
  overload: NodaTime.LocalDate.AtMidnight*
- uid: NodaTime.LocalDate.ToDateTimeUnspecified
  commentId: M:NodaTime.LocalDate.ToDateTimeUnspecified
  id: ToDateTimeUnspecified
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: ToDateTimeUnspecified()
  nameWithType: LocalDate.ToDateTimeUnspecified()
  fullName: NodaTime.LocalDate.ToDateTimeUnspecified()
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Constructs a <xref href="System.DateTime" data-throw-if-not-resolved="false"></xref> from this value which has a <xref href="System.DateTime.Kind" data-throw-if-not-resolved="false"></xref>

    of <xref href="System.DateTimeKind.Unspecified" data-throw-if-not-resolved="false"></xref>. The result is midnight on the day represented

    by this value.
  remarks: >-
    <p>
      <xref href="System.DateTimeKind.Unspecified" data-throw-if-not-resolved="false"></xref> is slightly odd - it can be treated as UTC if you use <xref href="System.DateTime.ToLocalTime" data-throw-if-not-resolved="false"></xref>
    or as system local time if you use <xref href="System.DateTime.ToUniversalTime" data-throw-if-not-resolved="false"></xref>, but it's the only kind which allows

    you to construct a <xref href="System.DateTimeOffset" data-throw-if-not-resolved="false"></xref> with an arbitrary offset, which makes it as close to

    the Noda Time non-system-specific "local" concept as exists in .NET.

    </p>

    <p>
      <xref href="System.DateTime" data-throw-if-not-resolved="false"></xref> uses the Gregorian calendar by definition, so the value is implicitly converted
    to the Gregorian calendar first. The result will be on the same physical day,

    but the values returned by the Year/Month/Day properties of the <xref href="System.DateTime" data-throw-if-not-resolved="false"></xref> may not

    match the Year/Month/Day properties of this value.

    </p>
  example: []
  syntax:
    content: public DateTime ToDateTimeUnspecified()
    return:
      type: System.DateTime
      description: A <xref href="System.DateTime" data-throw-if-not-resolved="false"></xref> value for the same date and time as this value.
    content.vb: Public Function ToDateTimeUnspecified() As Date
  overload: NodaTime.LocalDate.ToDateTimeUnspecified*
- uid: NodaTime.LocalDate.FromDateTime(System.DateTime)
  commentId: M:NodaTime.LocalDate.FromDateTime(System.DateTime)
  id: FromDateTime(System.DateTime)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: FromDateTime(DateTime)
  nameWithType: LocalDate.FromDateTime(DateTime)
  fullName: NodaTime.LocalDate.FromDateTime(System.DateTime)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Converts a <xref href="System.DateTime" data-throw-if-not-resolved="false"></xref> of any kind to a LocalDate in the ISO calendar, ignoring the time of day.

    This does not perform any time zone conversions, so a DateTime with a <xref href="System.DateTime.Kind" data-throw-if-not-resolved="false"></xref> of

    <xref href="System.DateTimeKind.Utc" data-throw-if-not-resolved="false"></xref> will still represent the same year/month/day - it won't be converted into the local system time.
  example: []
  syntax:
    content: public static LocalDate FromDateTime(DateTime dateTime)
    parameters:
    - id: dateTime
      type: System.DateTime
      description: Value to convert into a Noda Time local date
    return:
      type: NodaTime.LocalDate
      description: A new <xref href="NodaTime.LocalDate" data-throw-if-not-resolved="false"></xref> with the same values as the specified <code>DateTime</code>.
    content.vb: Public Shared Function FromDateTime(dateTime As Date) As LocalDate
  overload: NodaTime.LocalDate.FromDateTime*
  nameWithType.vb: LocalDate.FromDateTime(Date)
  fullName.vb: NodaTime.LocalDate.FromDateTime(Date)
  name.vb: FromDateTime(Date)
- uid: NodaTime.LocalDate.FromDateTime(System.DateTime,NodaTime.CalendarSystem)
  commentId: M:NodaTime.LocalDate.FromDateTime(System.DateTime,NodaTime.CalendarSystem)
  id: FromDateTime(System.DateTime,NodaTime.CalendarSystem)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: FromDateTime(DateTime, CalendarSystem)
  nameWithType: LocalDate.FromDateTime(DateTime, CalendarSystem)
  fullName: NodaTime.LocalDate.FromDateTime(System.DateTime, NodaTime.CalendarSystem)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Converts a <xref href="System.DateTime" data-throw-if-not-resolved="false"></xref> of any kind to a LocalDate in the specified calendar, ignoring the time of day.

    This does not perform any time zone conversions, so a DateTime with a <xref href="System.DateTime.Kind" data-throw-if-not-resolved="false"></xref> of

    <xref href="System.DateTimeKind.Utc" data-throw-if-not-resolved="false"></xref> will still represent the same year/month/day - it won't be converted into the local system time.
  example: []
  syntax:
    content: public static LocalDate FromDateTime(DateTime dateTime, CalendarSystem calendar)
    parameters:
    - id: dateTime
      type: System.DateTime
      description: Value to convert into a Noda Time local date
    - id: calendar
      type: NodaTime.CalendarSystem
      description: The calendar system to convert into
    return:
      type: NodaTime.LocalDate
      description: A new <xref href="NodaTime.LocalDate" data-throw-if-not-resolved="false"></xref> with the same values as the specified <code>DateTime</code>.
    content.vb: Public Shared Function FromDateTime(dateTime As Date, calendar As CalendarSystem) As LocalDate
  overload: NodaTime.LocalDate.FromDateTime*
  nameWithType.vb: LocalDate.FromDateTime(Date, CalendarSystem)
  fullName.vb: NodaTime.LocalDate.FromDateTime(Date, NodaTime.CalendarSystem)
  name.vb: FromDateTime(Date, CalendarSystem)
- uid: NodaTime.LocalDate.FromWeekYearWeekAndDay(System.Int32,System.Int32,NodaTime.IsoDayOfWeek)
  commentId: M:NodaTime.LocalDate.FromWeekYearWeekAndDay(System.Int32,System.Int32,NodaTime.IsoDayOfWeek)
  id: FromWeekYearWeekAndDay(System.Int32,System.Int32,NodaTime.IsoDayOfWeek)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: FromWeekYearWeekAndDay(int, int, IsoDayOfWeek)
  nameWithType: LocalDate.FromWeekYearWeekAndDay(int, int, IsoDayOfWeek)
  fullName: NodaTime.LocalDate.FromWeekYearWeekAndDay(int, int, NodaTime.IsoDayOfWeek)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Returns the local date corresponding to the given "week year", "week of week year", and "day of week"

    in the ISO calendar system, using the ISO week-year rules.
  example: []
  syntax:
    content: public static LocalDate FromWeekYearWeekAndDay(int weekYear, int weekOfWeekYear, IsoDayOfWeek dayOfWeek)
    parameters:
    - id: weekYear
      type: System.Int32
      description: ISO-8601 week year of value to return
    - id: weekOfWeekYear
      type: System.Int32
      description: ISO-8601 week of week year of value to return
    - id: dayOfWeek
      type: NodaTime.IsoDayOfWeek
      description: ISO-8601 day of week to return
    return:
      type: NodaTime.LocalDate
      description: The date corresponding to the given week year / week of week year / day of week.
    content.vb: Public Shared Function FromWeekYearWeekAndDay(weekYear As Integer, weekOfWeekYear As Integer, dayOfWeek As IsoDayOfWeek) As LocalDate
  overload: NodaTime.LocalDate.FromWeekYearWeekAndDay*
  nameWithType.vb: LocalDate.FromWeekYearWeekAndDay(Integer, Integer, IsoDayOfWeek)
  fullName.vb: NodaTime.LocalDate.FromWeekYearWeekAndDay(Integer, Integer, NodaTime.IsoDayOfWeek)
  name.vb: FromWeekYearWeekAndDay(Integer, Integer, IsoDayOfWeek)
- uid: NodaTime.LocalDate.FromYearMonthWeekAndDay(System.Int32,System.Int32,System.Int32,NodaTime.IsoDayOfWeek)
  commentId: M:NodaTime.LocalDate.FromYearMonthWeekAndDay(System.Int32,System.Int32,System.Int32,NodaTime.IsoDayOfWeek)
  id: FromYearMonthWeekAndDay(System.Int32,System.Int32,System.Int32,NodaTime.IsoDayOfWeek)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: FromYearMonthWeekAndDay(int, int, int, IsoDayOfWeek)
  nameWithType: LocalDate.FromYearMonthWeekAndDay(int, int, int, IsoDayOfWeek)
  fullName: NodaTime.LocalDate.FromYearMonthWeekAndDay(int, int, int, NodaTime.IsoDayOfWeek)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Returns the local date corresponding to a particular occurrence of a day-of-week

    within a year and month. For example, this method can be used to ask for "the third Monday in April 2012".
  remarks: >-
    The returned date is always in the ISO calendar. This method is unrelated to week-years and any rules for

    "business weeks" and the like - if a month begins on a Friday, then asking for the first Friday will give

    that day, for example.
  example: []
  syntax:
    content: public static LocalDate FromYearMonthWeekAndDay(int year, int month, int occurrence, IsoDayOfWeek dayOfWeek)
    parameters:
    - id: year
      type: System.Int32
      description: The year of the value to return.
    - id: month
      type: System.Int32
      description: The month of the value to return.
    - id: occurrence
      type: System.Int32
      description: >-
        The occurrence of the value to return, which must be in the range [1, 5]. The value 5 can
            be used to always return the last occurrence of the specified day-of-week, even if there are only 4
            occurrences of that day-of-week in the month.
    - id: dayOfWeek
      type: NodaTime.IsoDayOfWeek
      description: The day-of-week of the value to return.
    return:
      type: NodaTime.LocalDate
      description: >-
        The date corresponding to the given year and month, on the given occurrence of the
            given day of week.
    content.vb: Public Shared Function FromYearMonthWeekAndDay(year As Integer, month As Integer, occurrence As Integer, dayOfWeek As IsoDayOfWeek) As LocalDate
  overload: NodaTime.LocalDate.FromYearMonthWeekAndDay*
  nameWithType.vb: LocalDate.FromYearMonthWeekAndDay(Integer, Integer, Integer, IsoDayOfWeek)
  fullName.vb: NodaTime.LocalDate.FromYearMonthWeekAndDay(Integer, Integer, Integer, NodaTime.IsoDayOfWeek)
  name.vb: FromYearMonthWeekAndDay(Integer, Integer, Integer, IsoDayOfWeek)
- uid: NodaTime.LocalDate.ToYearMonth
  commentId: M:NodaTime.LocalDate.ToYearMonth
  id: ToYearMonth
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: ToYearMonth()
  nameWithType: LocalDate.ToYearMonth()
  fullName: NodaTime.LocalDate.ToYearMonth()
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Creates a <xref href="NodaTime.YearMonth" data-throw-if-not-resolved="false"></xref> value for the month containing this date.
  example: []
  syntax:
    content: public YearMonth ToYearMonth()
    return:
      type: NodaTime.YearMonth
      description: A year/month value containing this date.
    content.vb: Public Function ToYearMonth() As YearMonth
  overload: NodaTime.LocalDate.ToYearMonth*
- uid: NodaTime.LocalDate.op_Addition(NodaTime.LocalDate,NodaTime.Period)
  commentId: M:NodaTime.LocalDate.op_Addition(NodaTime.LocalDate,NodaTime.Period)
  id: op_Addition(NodaTime.LocalDate,NodaTime.Period)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: operator +(LocalDate, Period)
  nameWithType: LocalDate.operator +(LocalDate, Period)
  fullName: NodaTime.LocalDate.operator +(NodaTime.LocalDate, NodaTime.Period)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Adds the specified period to the date.

    Fields are added in descending order of significance (years first, then months, and so on).
  example: []
  syntax:
    content: public static LocalDate operator +(LocalDate date, Period period)
    parameters:
    - id: date
      type: NodaTime.LocalDate
      description: The date to add the period to
    - id: period
      type: NodaTime.Period
      description: The period to add. Must not contain any (non-zero) time units.
    return:
      type: NodaTime.LocalDate
      description: The sum of the given date and period
    content.vb: Public Shared Operator +([date] As LocalDate, period As Period) As LocalDate
  overload: NodaTime.LocalDate.op_Addition*
  implements:
  - System.Numerics.IAdditionOperators{NodaTime.LocalDate,NodaTime.Period,NodaTime.LocalDate}.op_Addition(NodaTime.LocalDate,NodaTime.Period)
  nameWithType.vb: LocalDate.+(LocalDate, Period)
  fullName.vb: NodaTime.LocalDate.+(NodaTime.LocalDate, NodaTime.Period)
  name.vb: +(LocalDate, Period)
- uid: NodaTime.LocalDate.Add(NodaTime.LocalDate,NodaTime.Period)
  commentId: M:NodaTime.LocalDate.Add(NodaTime.LocalDate,NodaTime.Period)
  id: Add(NodaTime.LocalDate,NodaTime.Period)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Add(LocalDate, Period)
  nameWithType: LocalDate.Add(LocalDate, Period)
  fullName: NodaTime.LocalDate.Add(NodaTime.LocalDate, NodaTime.Period)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Adds the specified period to the date.

    Fields are added in descending order of significance (years first, then months, and so on).

    Friendly alternative to <code>operator+()</code>.
  example: []
  syntax:
    content: public static LocalDate Add(LocalDate date, Period period)
    parameters:
    - id: date
      type: NodaTime.LocalDate
      description: The date to add the period to
    - id: period
      type: NodaTime.Period
      description: The period to add. Must not contain any (non-zero) time units.
    return:
      type: NodaTime.LocalDate
      description: The sum of the given date and period
    content.vb: Public Shared Function Add([date] As LocalDate, period As Period) As LocalDate
  overload: NodaTime.LocalDate.Add*
- uid: NodaTime.LocalDate.Plus(NodaTime.Period)
  commentId: M:NodaTime.LocalDate.Plus(NodaTime.Period)
  id: Plus(NodaTime.Period)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Plus(Period)
  nameWithType: LocalDate.Plus(Period)
  fullName: NodaTime.LocalDate.Plus(NodaTime.Period)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Adds the specified period to this date.

    Fields are added in descending order of significance (years first, then months, and so on).

    Fluent alternative to <code>operator+()</code>.
  example: []
  syntax:
    content: public LocalDate Plus(Period period)
    parameters:
    - id: period
      type: NodaTime.Period
      description: The period to add. Must not contain any (non-zero) time units.
    return:
      type: NodaTime.LocalDate
      description: The sum of this date and the given period
    content.vb: Public Function Plus(period As Period) As LocalDate
  overload: NodaTime.LocalDate.Plus*
- uid: NodaTime.LocalDate.op_Addition(NodaTime.LocalDate,NodaTime.LocalTime)
  commentId: M:NodaTime.LocalDate.op_Addition(NodaTime.LocalDate,NodaTime.LocalTime)
  id: op_Addition(NodaTime.LocalDate,NodaTime.LocalTime)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: operator +(LocalDate, LocalTime)
  nameWithType: LocalDate.operator +(LocalDate, LocalTime)
  fullName: NodaTime.LocalDate.operator +(NodaTime.LocalDate, NodaTime.LocalTime)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Combines the given <xref href="NodaTime.LocalDate" data-throw-if-not-resolved="false"></xref> and <xref href="NodaTime.LocalTime" data-throw-if-not-resolved="false"></xref> components

    into a single <xref href="NodaTime.LocalDateTime" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static LocalDateTime operator +(LocalDate date, LocalTime time)
    parameters:
    - id: date
      type: NodaTime.LocalDate
      description: The date to add the time to
    - id: time
      type: NodaTime.LocalTime
      description: The time to add
    return:
      type: NodaTime.LocalDateTime
      description: The sum of the given date and time
    content.vb: Public Shared Operator +([date] As LocalDate, time As LocalTime) As LocalDateTime
  overload: NodaTime.LocalDate.op_Addition*
  implements:
  - System.Numerics.IAdditionOperators{NodaTime.LocalDate,NodaTime.LocalTime,NodaTime.LocalDateTime}.op_Addition(NodaTime.LocalDate,NodaTime.LocalTime)
  nameWithType.vb: LocalDate.+(LocalDate, LocalTime)
  fullName.vb: NodaTime.LocalDate.+(NodaTime.LocalDate, NodaTime.LocalTime)
  name.vb: +(LocalDate, LocalTime)
- uid: NodaTime.LocalDate.op_Subtraction(NodaTime.LocalDate,NodaTime.Period)
  commentId: M:NodaTime.LocalDate.op_Subtraction(NodaTime.LocalDate,NodaTime.Period)
  id: op_Subtraction(NodaTime.LocalDate,NodaTime.Period)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: operator -(LocalDate, Period)
  nameWithType: LocalDate.operator -(LocalDate, Period)
  fullName: NodaTime.LocalDate.operator -(NodaTime.LocalDate, NodaTime.Period)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Subtracts the specified period from the date.

    Fields are subtracted in descending order of significance (years first, then months, and so on).

    This is a convenience operator over the <xref href="NodaTime.LocalDate.Minus(NodaTime.Period)" data-throw-if-not-resolved="false"></xref> method.
  example: []
  syntax:
    content: public static LocalDate operator -(LocalDate date, Period period)
    parameters:
    - id: date
      type: NodaTime.LocalDate
      description: The date to subtract the period from
    - id: period
      type: NodaTime.Period
      description: The period to subtract. Must not contain any (non-zero) time units.
    return:
      type: NodaTime.LocalDate
      description: The result of subtracting the given period from the date
    content.vb: Public Shared Operator -([date] As LocalDate, period As Period) As LocalDate
  overload: NodaTime.LocalDate.op_Subtraction*
  implements:
  - System.Numerics.ISubtractionOperators{NodaTime.LocalDate,NodaTime.Period,NodaTime.LocalDate}.op_Subtraction(NodaTime.LocalDate,NodaTime.Period)
  nameWithType.vb: LocalDate.-(LocalDate, Period)
  fullName.vb: NodaTime.LocalDate.-(NodaTime.LocalDate, NodaTime.Period)
  name.vb: -(LocalDate, Period)
- uid: NodaTime.LocalDate.Subtract(NodaTime.LocalDate,NodaTime.Period)
  commentId: M:NodaTime.LocalDate.Subtract(NodaTime.LocalDate,NodaTime.Period)
  id: Subtract(NodaTime.LocalDate,NodaTime.Period)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Subtract(LocalDate, Period)
  nameWithType: LocalDate.Subtract(LocalDate, Period)
  fullName: NodaTime.LocalDate.Subtract(NodaTime.LocalDate, NodaTime.Period)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Subtracts the specified period from the date.

    Fields are subtracted in descending order of significance (years first, then months, and so on).

    Friendly alternative to <code>operator-()</code>.
  example: []
  syntax:
    content: public static LocalDate Subtract(LocalDate date, Period period)
    parameters:
    - id: date
      type: NodaTime.LocalDate
      description: The date to subtract the period from
    - id: period
      type: NodaTime.Period
      description: The period to subtract. Must not contain any (non-zero) time units.
    return:
      type: NodaTime.LocalDate
      description: The result of subtracting the given period from the date.
    content.vb: Public Shared Function Subtract([date] As LocalDate, period As Period) As LocalDate
  overload: NodaTime.LocalDate.Subtract*
- uid: NodaTime.LocalDate.Minus(NodaTime.Period)
  commentId: M:NodaTime.LocalDate.Minus(NodaTime.Period)
  id: Minus(NodaTime.Period)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Minus(Period)
  nameWithType: LocalDate.Minus(Period)
  fullName: NodaTime.LocalDate.Minus(NodaTime.Period)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Subtracts the specified period from this date.

    Fields are subtracted in descending order of significance (years first, then months, and so on).

    Fluent alternative to <code>operator-()</code>.
  example: []
  syntax:
    content: public LocalDate Minus(Period period)
    parameters:
    - id: period
      type: NodaTime.Period
      description: The period to subtract. Must not contain any (non-zero) time units.
    return:
      type: NodaTime.LocalDate
      description: The result of subtracting the given period from this date.
    content.vb: Public Function Minus(period As Period) As LocalDate
  overload: NodaTime.LocalDate.Minus*
- uid: NodaTime.LocalDate.op_Subtraction(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.op_Subtraction(NodaTime.LocalDate,NodaTime.LocalDate)
  id: op_Subtraction(NodaTime.LocalDate,NodaTime.LocalDate)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: operator -(LocalDate, LocalDate)
  nameWithType: LocalDate.operator -(LocalDate, LocalDate)
  fullName: NodaTime.LocalDate.operator -(NodaTime.LocalDate, NodaTime.LocalDate)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Subtracts one date from another, returning the result as a <xref href="NodaTime.Period" data-throw-if-not-resolved="false"></xref> with units of years, months and days.
  remarks: >-
    This is simply a convenience operator for calling <xref href="NodaTime.Period.Between(NodaTime.LocalDate%2cNodaTime.LocalDate)" data-throw-if-not-resolved="false"></xref>.

    The calendar systems of the two dates must be the same; an exception will be thrown otherwise.
  example: []
  syntax:
    content: public static Period operator -(LocalDate lhs, LocalDate rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalDate
      description: The date to subtract from
    - id: rhs
      type: NodaTime.LocalDate
      description: The date to subtract
    return:
      type: NodaTime.Period
      description: The result of subtracting one date from another.
    content.vb: Public Shared Operator -(lhs As LocalDate, rhs As LocalDate) As Period
  overload: NodaTime.LocalDate.op_Subtraction*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code class="paramref">lhs</code> and <code class="paramref">rhs</code> are not in the same calendar system.
  implements:
  - System.Numerics.ISubtractionOperators{NodaTime.LocalDate,NodaTime.LocalDate,NodaTime.Period}.op_Subtraction(NodaTime.LocalDate,NodaTime.LocalDate)
  nameWithType.vb: LocalDate.-(LocalDate, LocalDate)
  fullName.vb: NodaTime.LocalDate.-(NodaTime.LocalDate, NodaTime.LocalDate)
  name.vb: -(LocalDate, LocalDate)
- uid: NodaTime.LocalDate.Subtract(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.Subtract(NodaTime.LocalDate,NodaTime.LocalDate)
  id: Subtract(NodaTime.LocalDate,NodaTime.LocalDate)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Subtract(LocalDate, LocalDate)
  nameWithType: LocalDate.Subtract(LocalDate, LocalDate)
  fullName: NodaTime.LocalDate.Subtract(NodaTime.LocalDate, NodaTime.LocalDate)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Subtracts one date from another, returning the result as a <xref href="NodaTime.Period" data-throw-if-not-resolved="false"></xref> with units of years, months and days.
  remarks: >-
    This is simply a convenience method for calling <xref href="NodaTime.Period.Between(NodaTime.LocalDate%2cNodaTime.LocalDate)" data-throw-if-not-resolved="false"></xref>.

    The calendar systems of the two dates must be the same.
  example: []
  syntax:
    content: public static Period Subtract(LocalDate lhs, LocalDate rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalDate
      description: The date to subtract from
    - id: rhs
      type: NodaTime.LocalDate
      description: The date to subtract
    return:
      type: NodaTime.Period
      description: The result of subtracting one date from another.
    content.vb: Public Shared Function Subtract(lhs As LocalDate, rhs As LocalDate) As Period
  overload: NodaTime.LocalDate.Subtract*
- uid: NodaTime.LocalDate.Minus(NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.Minus(NodaTime.LocalDate)
  id: Minus(NodaTime.LocalDate)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Minus(LocalDate)
  nameWithType: LocalDate.Minus(LocalDate)
  fullName: NodaTime.LocalDate.Minus(NodaTime.LocalDate)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Subtracts the specified date from this date, returning the result as a <xref href="NodaTime.Period" data-throw-if-not-resolved="false"></xref> with units of years, months and days.

    Fluent alternative to <code>operator-()</code>.
  remarks: The specified date must be in the same calendar system as this.
  example: []
  syntax:
    content: public Period Minus(LocalDate date)
    parameters:
    - id: date
      type: NodaTime.LocalDate
      description: The date to subtract from this
    return:
      type: NodaTime.Period
      description: The difference between the specified date and this one
    content.vb: Public Function Minus([date] As LocalDate) As Period
  overload: NodaTime.LocalDate.Minus*
- uid: NodaTime.LocalDate.op_Equality(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.op_Equality(NodaTime.LocalDate,NodaTime.LocalDate)
  id: op_Equality(NodaTime.LocalDate,NodaTime.LocalDate)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: operator ==(LocalDate, LocalDate)
  nameWithType: LocalDate.operator ==(LocalDate, LocalDate)
  fullName: NodaTime.LocalDate.operator ==(NodaTime.LocalDate, NodaTime.LocalDate)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Compares two <xref href="NodaTime.LocalDate" data-throw-if-not-resolved="false"></xref> values for equality.

    See the type documentation for a description of equality semantics.
  example: []
  syntax:
    content: public static bool operator ==(LocalDate lhs, LocalDate rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalDate
      description: The first value to compare
    - id: rhs
      type: NodaTime.LocalDate
      description: The second value to compare
    return:
      type: System.Boolean
      description: True if the two dates are the same and in the same calendar; false otherwise
    content.vb: Public Shared Operator =(lhs As LocalDate, rhs As LocalDate) As Boolean
  overload: NodaTime.LocalDate.op_Equality*
  implements:
  - System.Numerics.IEqualityOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}.op_Equality(NodaTime.LocalDate,NodaTime.LocalDate)
  nameWithType.vb: LocalDate.=(LocalDate, LocalDate)
  fullName.vb: NodaTime.LocalDate.=(NodaTime.LocalDate, NodaTime.LocalDate)
  name.vb: =(LocalDate, LocalDate)
- uid: NodaTime.LocalDate.op_Inequality(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.op_Inequality(NodaTime.LocalDate,NodaTime.LocalDate)
  id: op_Inequality(NodaTime.LocalDate,NodaTime.LocalDate)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: operator !=(LocalDate, LocalDate)
  nameWithType: LocalDate.operator !=(LocalDate, LocalDate)
  fullName: NodaTime.LocalDate.operator !=(NodaTime.LocalDate, NodaTime.LocalDate)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Compares two <xref href="NodaTime.LocalDate" data-throw-if-not-resolved="false"></xref> values for inequality.

    See the type documentation for a description of equality semantics.
  example: []
  syntax:
    content: public static bool operator !=(LocalDate lhs, LocalDate rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalDate
      description: The first value to compare
    - id: rhs
      type: NodaTime.LocalDate
      description: The second value to compare
    return:
      type: System.Boolean
      description: False if the two dates are the same and in the same calendar; true otherwise
    content.vb: Public Shared Operator <>(lhs As LocalDate, rhs As LocalDate) As Boolean
  overload: NodaTime.LocalDate.op_Inequality*
  implements:
  - System.Numerics.IEqualityOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}.op_Inequality(NodaTime.LocalDate,NodaTime.LocalDate)
  nameWithType.vb: LocalDate.<>(LocalDate, LocalDate)
  fullName.vb: NodaTime.LocalDate.<>(NodaTime.LocalDate, NodaTime.LocalDate)
  name.vb: <>(LocalDate, LocalDate)
- uid: NodaTime.LocalDate.op_LessThan(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.op_LessThan(NodaTime.LocalDate,NodaTime.LocalDate)
  id: op_LessThan(NodaTime.LocalDate,NodaTime.LocalDate)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: operator <(LocalDate, LocalDate)
  nameWithType: LocalDate.operator <(LocalDate, LocalDate)
  fullName: NodaTime.LocalDate.operator <(NodaTime.LocalDate, NodaTime.LocalDate)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Compares two dates to see if the left one is strictly earlier than the right one.

    See the type documentation for a description of ordering semantics.
  example: []
  syntax:
    content: public static bool operator <(LocalDate lhs, LocalDate rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalDate
      description: First operand of the comparison
    - id: rhs
      type: NodaTime.LocalDate
      description: Second operand of the comparison
    return:
      type: System.Boolean
      description: true if the <code class="paramref">lhs</code> is strictly earlier than <code class="paramref">rhs</code>, false otherwise.
    content.vb: Public Shared Operator <(lhs As LocalDate, rhs As LocalDate) As Boolean
  overload: NodaTime.LocalDate.op_LessThan*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      The calendar system of <code class="paramref">rhs</code> is not the same
          as the calendar of <code class="paramref">lhs</code>.
  implements:
  - System.Numerics.IComparisonOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}.op_LessThan(NodaTime.LocalDate,NodaTime.LocalDate)
  nameWithType.vb: LocalDate.<(LocalDate, LocalDate)
  fullName.vb: NodaTime.LocalDate.<(NodaTime.LocalDate, NodaTime.LocalDate)
  name.vb: <(LocalDate, LocalDate)
- uid: NodaTime.LocalDate.op_LessThanOrEqual(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.op_LessThanOrEqual(NodaTime.LocalDate,NodaTime.LocalDate)
  id: op_LessThanOrEqual(NodaTime.LocalDate,NodaTime.LocalDate)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: operator <=(LocalDate, LocalDate)
  nameWithType: LocalDate.operator <=(LocalDate, LocalDate)
  fullName: NodaTime.LocalDate.operator <=(NodaTime.LocalDate, NodaTime.LocalDate)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Compares two dates to see if the left one is earlier than or equal to the right one.

    See the type documentation for a description of ordering semantics.
  example: []
  syntax:
    content: public static bool operator <=(LocalDate lhs, LocalDate rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalDate
      description: First operand of the comparison
    - id: rhs
      type: NodaTime.LocalDate
      description: Second operand of the comparison
    return:
      type: System.Boolean
      description: true if the <code class="paramref">lhs</code> is earlier than or equal to <code class="paramref">rhs</code>, false otherwise.
    content.vb: Public Shared Operator <=(lhs As LocalDate, rhs As LocalDate) As Boolean
  overload: NodaTime.LocalDate.op_LessThanOrEqual*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      The calendar system of <code class="paramref">rhs</code> is not the same
          as the calendar of <code class="paramref">lhs</code>.
  implements:
  - System.Numerics.IComparisonOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}.op_LessThanOrEqual(NodaTime.LocalDate,NodaTime.LocalDate)
  nameWithType.vb: LocalDate.<=(LocalDate, LocalDate)
  fullName.vb: NodaTime.LocalDate.<=(NodaTime.LocalDate, NodaTime.LocalDate)
  name.vb: <=(LocalDate, LocalDate)
- uid: NodaTime.LocalDate.op_GreaterThan(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.op_GreaterThan(NodaTime.LocalDate,NodaTime.LocalDate)
  id: op_GreaterThan(NodaTime.LocalDate,NodaTime.LocalDate)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: operator >(LocalDate, LocalDate)
  nameWithType: LocalDate.operator >(LocalDate, LocalDate)
  fullName: NodaTime.LocalDate.operator >(NodaTime.LocalDate, NodaTime.LocalDate)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Compares two dates to see if the left one is strictly later than the right one.

    See the type documentation for a description of ordering semantics.
  example: []
  syntax:
    content: public static bool operator >(LocalDate lhs, LocalDate rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalDate
      description: First operand of the comparison
    - id: rhs
      type: NodaTime.LocalDate
      description: Second operand of the comparison
    return:
      type: System.Boolean
      description: true if the <code class="paramref">lhs</code> is strictly later than <code class="paramref">rhs</code>, false otherwise.
    content.vb: Public Shared Operator >(lhs As LocalDate, rhs As LocalDate) As Boolean
  overload: NodaTime.LocalDate.op_GreaterThan*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      The calendar system of <code class="paramref">rhs</code> is not the same
          as the calendar of <code class="paramref">lhs</code>.
  implements:
  - System.Numerics.IComparisonOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}.op_GreaterThan(NodaTime.LocalDate,NodaTime.LocalDate)
  nameWithType.vb: LocalDate.>(LocalDate, LocalDate)
  fullName.vb: NodaTime.LocalDate.>(NodaTime.LocalDate, NodaTime.LocalDate)
  name.vb: '>(LocalDate, LocalDate)'
- uid: NodaTime.LocalDate.op_GreaterThanOrEqual(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.op_GreaterThanOrEqual(NodaTime.LocalDate,NodaTime.LocalDate)
  id: op_GreaterThanOrEqual(NodaTime.LocalDate,NodaTime.LocalDate)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: operator >=(LocalDate, LocalDate)
  nameWithType: LocalDate.operator >=(LocalDate, LocalDate)
  fullName: NodaTime.LocalDate.operator >=(NodaTime.LocalDate, NodaTime.LocalDate)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Compares two dates to see if the left one is later than or equal to the right one.

    See the type documentation for a description of ordering semantics.
  example: []
  syntax:
    content: public static bool operator >=(LocalDate lhs, LocalDate rhs)
    parameters:
    - id: lhs
      type: NodaTime.LocalDate
      description: First operand of the comparison
    - id: rhs
      type: NodaTime.LocalDate
      description: Second operand of the comparison
    return:
      type: System.Boolean
      description: true if the <code class="paramref">lhs</code> is later than or equal to <code class="paramref">rhs</code>, false otherwise.
    content.vb: Public Shared Operator >=(lhs As LocalDate, rhs As LocalDate) As Boolean
  overload: NodaTime.LocalDate.op_GreaterThanOrEqual*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      The calendar system of <code class="paramref">rhs</code> is not the same
          as the calendar of <code class="paramref">lhs</code>.
  implements:
  - System.Numerics.IComparisonOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}.op_GreaterThanOrEqual(NodaTime.LocalDate,NodaTime.LocalDate)
  nameWithType.vb: LocalDate.>=(LocalDate, LocalDate)
  fullName.vb: NodaTime.LocalDate.>=(NodaTime.LocalDate, NodaTime.LocalDate)
  name.vb: '>=(LocalDate, LocalDate)'
- uid: NodaTime.LocalDate.CompareTo(NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.CompareTo(NodaTime.LocalDate)
  id: CompareTo(NodaTime.LocalDate)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: CompareTo(LocalDate)
  nameWithType: LocalDate.CompareTo(LocalDate)
  fullName: NodaTime.LocalDate.CompareTo(NodaTime.LocalDate)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Indicates whether this date is earlier, later or the same as another one.

    See the type documentation for a description of ordering semantics.
  example: []
  syntax:
    content: public int CompareTo(LocalDate other)
    parameters:
    - id: other
      type: NodaTime.LocalDate
      description: The other date to compare this one with
    return:
      type: System.Int32
      description: >-
        A value less than zero if this date is earlier than <code class="paramref">other</code>;
            zero if this date is the same as <code class="paramref">other</code>; a value greater than zero if this date is
            later than <code class="paramref">other</code>.
    content.vb: Public Function CompareTo(other As LocalDate) As Integer
  overload: NodaTime.LocalDate.CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      The calendar system of <code class="paramref">other</code> is not the
          same as the calendar system of this value.
  implements:
  - System.IComparable{NodaTime.LocalDate}.CompareTo(NodaTime.LocalDate)
- uid: NodaTime.LocalDate.System#IComparable#CompareTo(System.Object)
  commentId: M:NodaTime.LocalDate.System#IComparable#CompareTo(System.Object)
  id: System#IComparable#CompareTo(System.Object)
  isEii: true
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: IComparable.CompareTo(object?)
  nameWithType: LocalDate.IComparable.CompareTo(object?)
  fullName: NodaTime.LocalDate.System.IComparable.CompareTo(object?)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Implementation of <xref href="System.IComparable.CompareTo(System.Object)" data-throw-if-not-resolved="false"></xref> to compare two LocalDates.

    See the type documentation for a description of ordering semantics.
  remarks: This uses explicit interface implementation to avoid it being called accidentally. The generic implementation should usually be preferred.
  example: []
  syntax:
    content: int IComparable.CompareTo(object? obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare this value with.
    return:
      type: System.Int32
      description: >-
        The result of comparing this LocalDate with another one.
            If <code class="paramref">obj</code> is null, this method returns a value greater than 0.
    content.vb: ''
  overload: NodaTime.LocalDate.System#IComparable#CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: >-
      <code class="paramref">obj</code> is non-null but does not refer to an instance of <xref href="NodaTime.LocalDate" data-throw-if-not-resolved="false"></xref>, or refers

      to a date in a different calendar system.
  implements:
  - System.IComparable.CompareTo(System.Object)
  nameWithType.vb: ''
  fullName.vb: ''
  name.vb: ''
- uid: NodaTime.LocalDate.Max(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.Max(NodaTime.LocalDate,NodaTime.LocalDate)
  id: Max(NodaTime.LocalDate,NodaTime.LocalDate)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Max(LocalDate, LocalDate)
  nameWithType: LocalDate.Max(LocalDate, LocalDate)
  fullName: NodaTime.LocalDate.Max(NodaTime.LocalDate, NodaTime.LocalDate)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns the later date of the given two.
  example: []
  syntax:
    content: public static LocalDate Max(LocalDate x, LocalDate y)
    parameters:
    - id: x
      type: NodaTime.LocalDate
      description: The first date to compare.
    - id: y
      type: NodaTime.LocalDate
      description: The second date to compare.
    return:
      type: NodaTime.LocalDate
      description: The later date of <code class="paramref">x</code> or <code class="paramref">y</code>.
    content.vb: Public Shared Function Max(x As LocalDate, y As LocalDate) As LocalDate
  overload: NodaTime.LocalDate.Max*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The two dates have different calendar systems.
- uid: NodaTime.LocalDate.Min(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.Min(NodaTime.LocalDate,NodaTime.LocalDate)
  id: Min(NodaTime.LocalDate,NodaTime.LocalDate)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Min(LocalDate, LocalDate)
  nameWithType: LocalDate.Min(LocalDate, LocalDate)
  fullName: NodaTime.LocalDate.Min(NodaTime.LocalDate, NodaTime.LocalDate)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns the earlier date of the given two.
  example: []
  syntax:
    content: public static LocalDate Min(LocalDate x, LocalDate y)
    parameters:
    - id: x
      type: NodaTime.LocalDate
      description: The first date to compare.
    - id: y
      type: NodaTime.LocalDate
      description: The second date to compare.
    return:
      type: NodaTime.LocalDate
      description: The earlier date of <code class="paramref">x</code> or <code class="paramref">y</code>.
    content.vb: Public Shared Function Min(x As LocalDate, y As LocalDate) As LocalDate
  overload: NodaTime.LocalDate.Min*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The two dates have different calendar systems.
- uid: NodaTime.LocalDate.GetHashCode
  commentId: M:NodaTime.LocalDate.GetHashCode
  id: GetHashCode
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: LocalDate.GetHashCode()
  fullName: NodaTime.LocalDate.GetHashCode()
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Returns a hash code for this local date.

    See the type documentation for a description of equality semantics.
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A hash code for this local date.
    content.vb: Public Overrides Function GetHashCode() As Integer
  overridden: System.ValueType.GetHashCode
  overload: NodaTime.LocalDate.GetHashCode*
- uid: NodaTime.LocalDate.Equals(System.Object)
  commentId: M:NodaTime.LocalDate.Equals(System.Object)
  id: Equals(System.Object)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Equals(object?)
  nameWithType: LocalDate.Equals(object?)
  fullName: NodaTime.LocalDate.Equals(object?)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Compares two <xref href="NodaTime.LocalDate" data-throw-if-not-resolved="false"></xref> values for equality.

    See the type documentation for a description of equality semantics.
  example: []
  syntax:
    content: public override bool Equals(object? obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare this date with.
    return:
      type: System.Boolean
      description: True if the given value is another local date equal to this one; false otherwise.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: NodaTime.LocalDate.Equals*
  nameWithType.vb: LocalDate.Equals(Object)
  fullName.vb: NodaTime.LocalDate.Equals(Object)
  name.vb: Equals(Object)
- uid: NodaTime.LocalDate.Equals(NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.Equals(NodaTime.LocalDate)
  id: Equals(NodaTime.LocalDate)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Equals(LocalDate)
  nameWithType: LocalDate.Equals(LocalDate)
  fullName: NodaTime.LocalDate.Equals(NodaTime.LocalDate)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Compares two <xref href="NodaTime.LocalDate" data-throw-if-not-resolved="false"></xref> values for equality.

    See the type documentation for a description of ordering semantics.
  example: []
  syntax:
    content: public bool Equals(LocalDate other)
    parameters:
    - id: other
      type: NodaTime.LocalDate
      description: The value to compare this date with.
    return:
      type: System.Boolean
      description: True if the given value is another local date equal to this one; false otherwise.
    content.vb: Public Function Equals(other As LocalDate) As Boolean
  overload: NodaTime.LocalDate.Equals*
  implements:
  - System.IEquatable{NodaTime.LocalDate}.Equals(NodaTime.LocalDate)
- uid: NodaTime.LocalDate.AtStartOfDayInZone(NodaTime.DateTimeZone)
  commentId: M:NodaTime.LocalDate.AtStartOfDayInZone(NodaTime.DateTimeZone)
  id: AtStartOfDayInZone(NodaTime.DateTimeZone)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: AtStartOfDayInZone(DateTimeZone)
  nameWithType: LocalDate.AtStartOfDayInZone(DateTimeZone)
  fullName: NodaTime.LocalDate.AtStartOfDayInZone(NodaTime.DateTimeZone)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Resolves this local date into a <xref href="NodaTime.ZonedDateTime" data-throw-if-not-resolved="false"></xref> in the given time zone representing the

    start of this date in the given zone.
  remarks: This is a convenience method for calling <xref href="NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public ZonedDateTime AtStartOfDayInZone(DateTimeZone zone)
    parameters:
    - id: zone
      type: NodaTime.DateTimeZone
      description: The time zone to map this local date into
    return:
      type: NodaTime.ZonedDateTime
      description: The <xref href="NodaTime.ZonedDateTime" data-throw-if-not-resolved="false"></xref> representing the earliest time on this date, in the given time zone.
    content.vb: Public Function AtStartOfDayInZone(zone As DateTimeZone) As ZonedDateTime
  overload: NodaTime.LocalDate.AtStartOfDayInZone*
  exceptions:
  - type: NodaTime.SkippedTimeException
    commentId: T:NodaTime.SkippedTimeException
    description: >-
      The entire day was skipped due to a very large time zone transition.
          (This is extremely rare.)
- uid: NodaTime.LocalDate.WithCalendar(NodaTime.CalendarSystem)
  commentId: M:NodaTime.LocalDate.WithCalendar(NodaTime.CalendarSystem)
  id: WithCalendar(NodaTime.CalendarSystem)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: WithCalendar(CalendarSystem)
  nameWithType: LocalDate.WithCalendar(CalendarSystem)
  fullName: NodaTime.LocalDate.WithCalendar(NodaTime.CalendarSystem)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Creates a new LocalDate representing the same physical date, but in a different calendar.

    The returned LocalDate is likely to have different field values to this one.

    For example, January 1st 1970 in the Gregorian calendar was December 19th 1969 in the Julian calendar.
  example: []
  syntax:
    content: public LocalDate WithCalendar(CalendarSystem calendar)
    parameters:
    - id: calendar
      type: NodaTime.CalendarSystem
      description: The calendar system to convert this local date to.
    return:
      type: NodaTime.LocalDate
      description: The converted LocalDate
    content.vb: Public Function WithCalendar(calendar As CalendarSystem) As LocalDate
  overload: NodaTime.LocalDate.WithCalendar*
- uid: NodaTime.LocalDate.PlusYears(System.Int32)
  commentId: M:NodaTime.LocalDate.PlusYears(System.Int32)
  id: PlusYears(System.Int32)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: PlusYears(int)
  nameWithType: LocalDate.PlusYears(int)
  fullName: NodaTime.LocalDate.PlusYears(int)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns a new LocalDate representing the current value with the given number of years added.
  remarks: >-
    If the resulting date is invalid, lower fields (typically the day of month) are reduced to find a valid value.

    For example, adding one year to February 29th 2012 will return February 28th 2013; subtracting one year from

    February 29th 2012 will return February 28th 2011.
  example: []
  syntax:
    content: public LocalDate PlusYears(int years)
    parameters:
    - id: years
      type: System.Int32
      description: The number of years to add
    return:
      type: NodaTime.LocalDate
      description: The current value plus the given number of years.
    content.vb: Public Function PlusYears(years As Integer) As LocalDate
  overload: NodaTime.LocalDate.PlusYears*
  nameWithType.vb: LocalDate.PlusYears(Integer)
  fullName.vb: NodaTime.LocalDate.PlusYears(Integer)
  name.vb: PlusYears(Integer)
- uid: NodaTime.LocalDate.PlusMonths(System.Int32)
  commentId: M:NodaTime.LocalDate.PlusMonths(System.Int32)
  id: PlusMonths(System.Int32)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: PlusMonths(int)
  nameWithType: LocalDate.PlusMonths(int)
  fullName: NodaTime.LocalDate.PlusMonths(int)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns a new LocalDate representing the current value with the given number of months added.
  remarks: >-
    <p>

    This method does not try to maintain the year of the current value, so adding four months to a value in

    October will result in a value in the following February.

    </p>

    <p>

    If the resulting date is invalid, the day of month is reduced to find a valid value.

    For example, adding one month to January 30th 2011 will return February 28th 2011; subtracting one month from

    March 30th 2011 will return February 28th 2011.

    </p>
  example: []
  syntax:
    content: public LocalDate PlusMonths(int months)
    parameters:
    - id: months
      type: System.Int32
      description: The number of months to add
    return:
      type: NodaTime.LocalDate
      description: The current date plus the given number of months
    content.vb: Public Function PlusMonths(months As Integer) As LocalDate
  overload: NodaTime.LocalDate.PlusMonths*
  nameWithType.vb: LocalDate.PlusMonths(Integer)
  fullName.vb: NodaTime.LocalDate.PlusMonths(Integer)
  name.vb: PlusMonths(Integer)
- uid: NodaTime.LocalDate.PlusDays(System.Int32)
  commentId: M:NodaTime.LocalDate.PlusDays(System.Int32)
  id: PlusDays(System.Int32)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: PlusDays(int)
  nameWithType: LocalDate.PlusDays(int)
  fullName: NodaTime.LocalDate.PlusDays(int)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns a new LocalDate representing the current value with the given number of days added.
  remarks: >-
    <p>

    This method does not try to maintain the month or year of the current value, so adding 3 days to a value of January 30th

    will result in a value of February 2nd.

    </p>
  example: []
  syntax:
    content: public LocalDate PlusDays(int days)
    parameters:
    - id: days
      type: System.Int32
      description: The number of days to add
    return:
      type: NodaTime.LocalDate
      description: The current value plus the given number of days.
    content.vb: Public Function PlusDays(days As Integer) As LocalDate
  overload: NodaTime.LocalDate.PlusDays*
  nameWithType.vb: LocalDate.PlusDays(Integer)
  fullName.vb: NodaTime.LocalDate.PlusDays(Integer)
  name.vb: PlusDays(Integer)
- uid: NodaTime.LocalDate.PlusWeeks(System.Int32)
  commentId: M:NodaTime.LocalDate.PlusWeeks(System.Int32)
  id: PlusWeeks(System.Int32)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: PlusWeeks(int)
  nameWithType: LocalDate.PlusWeeks(int)
  fullName: NodaTime.LocalDate.PlusWeeks(int)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns a new LocalDate representing the current value with the given number of weeks added.
  example: []
  syntax:
    content: public LocalDate PlusWeeks(int weeks)
    parameters:
    - id: weeks
      type: System.Int32
      description: The number of weeks to add
    return:
      type: NodaTime.LocalDate
      description: The current value plus the given number of weeks.
    content.vb: Public Function PlusWeeks(weeks As Integer) As LocalDate
  overload: NodaTime.LocalDate.PlusWeeks*
  nameWithType.vb: LocalDate.PlusWeeks(Integer)
  fullName.vb: NodaTime.LocalDate.PlusWeeks(Integer)
  name.vb: PlusWeeks(Integer)
- uid: NodaTime.LocalDate.Next(NodaTime.IsoDayOfWeek)
  commentId: M:NodaTime.LocalDate.Next(NodaTime.IsoDayOfWeek)
  id: Next(NodaTime.IsoDayOfWeek)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Next(IsoDayOfWeek)
  nameWithType: LocalDate.Next(IsoDayOfWeek)
  fullName: NodaTime.LocalDate.Next(NodaTime.IsoDayOfWeek)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Returns the next <xref href="NodaTime.LocalDate" data-throw-if-not-resolved="false"></xref> falling on the specified <xref href="NodaTime.IsoDayOfWeek" data-throw-if-not-resolved="false"></xref>.

    This is a strict "next" - if this date on already falls on the target

    day of the week, the returned value will be a week later.
  example: []
  syntax:
    content: public LocalDate Next(IsoDayOfWeek targetDayOfWeek)
    parameters:
    - id: targetDayOfWeek
      type: NodaTime.IsoDayOfWeek
      description: The ISO day of the week to return the next date of.
    return:
      type: NodaTime.LocalDate
      description: The next <xref href="NodaTime.LocalDate" data-throw-if-not-resolved="false"></xref> falling on the specified day of the week.
    content.vb: Public Function [Next](targetDayOfWeek As IsoDayOfWeek) As LocalDate
  overload: NodaTime.LocalDate.Next*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The underlying calendar doesn't use ISO days of the week.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: >-
      <code class="paramref">targetDayOfWeek</code> is not a valid day of the

      week (Monday to Sunday).
- uid: NodaTime.LocalDate.Previous(NodaTime.IsoDayOfWeek)
  commentId: M:NodaTime.LocalDate.Previous(NodaTime.IsoDayOfWeek)
  id: Previous(NodaTime.IsoDayOfWeek)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Previous(IsoDayOfWeek)
  nameWithType: LocalDate.Previous(IsoDayOfWeek)
  fullName: NodaTime.LocalDate.Previous(NodaTime.IsoDayOfWeek)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Returns the previous <xref href="NodaTime.LocalDate" data-throw-if-not-resolved="false"></xref> falling on the specified <xref href="NodaTime.IsoDayOfWeek" data-throw-if-not-resolved="false"></xref>.

    This is a strict "previous" - if this date on already falls on the target

    day of the week, the returned value will be a week earlier.
  example: []
  syntax:
    content: public LocalDate Previous(IsoDayOfWeek targetDayOfWeek)
    parameters:
    - id: targetDayOfWeek
      type: NodaTime.IsoDayOfWeek
      description: The ISO day of the week to return the previous date of.
    return:
      type: NodaTime.LocalDate
      description: The previous <xref href="NodaTime.LocalDate" data-throw-if-not-resolved="false"></xref> falling on the specified day of the week.
    content.vb: Public Function Previous(targetDayOfWeek As IsoDayOfWeek) As LocalDate
  overload: NodaTime.LocalDate.Previous*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The underlying calendar doesn't use ISO days of the week.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: >-
      <code class="paramref">targetDayOfWeek</code> is not a valid day of the

      week (Monday to Sunday).
- uid: NodaTime.LocalDate.WithOffset(NodaTime.Offset)
  commentId: M:NodaTime.LocalDate.WithOffset(NodaTime.Offset)
  id: WithOffset(NodaTime.Offset)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: WithOffset(Offset)
  nameWithType: LocalDate.WithOffset(Offset)
  fullName: NodaTime.LocalDate.WithOffset(NodaTime.Offset)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns an <xref href="NodaTime.OffsetDate" data-throw-if-not-resolved="false"></xref> for this local date with the given offset.
  remarks: This method is purely a convenient alternative to calling the <xref href="NodaTime.OffsetDate" data-throw-if-not-resolved="false"></xref> constructor directly.
  example: []
  syntax:
    content: public OffsetDate WithOffset(Offset offset)
    parameters:
    - id: offset
      type: NodaTime.Offset
      description: The offset to apply.
    return:
      type: NodaTime.OffsetDate
      description: The result of this date offset by the given amount.
    content.vb: Public Function WithOffset(offset As Offset) As OffsetDate
  overload: NodaTime.LocalDate.WithOffset*
- uid: NodaTime.LocalDate.At(NodaTime.LocalTime)
  commentId: M:NodaTime.LocalDate.At(NodaTime.LocalTime)
  id: At(NodaTime.LocalTime)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: At(LocalTime)
  nameWithType: LocalDate.At(LocalTime)
  fullName: NodaTime.LocalDate.At(NodaTime.LocalTime)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Combines this <xref href="NodaTime.LocalDate" data-throw-if-not-resolved="false"></xref> with the given <xref href="NodaTime.LocalTime" data-throw-if-not-resolved="false"></xref>

    into a single <xref href="NodaTime.LocalDateTime" data-throw-if-not-resolved="false"></xref>.

    Fluent alternative to <code>operator+()</code>.
  example: []
  syntax:
    content: public LocalDateTime At(LocalTime time)
    parameters:
    - id: time
      type: NodaTime.LocalTime
      description: The time to combine with this date.
    return:
      type: NodaTime.LocalDateTime
      description: The <xref href="NodaTime.LocalDateTime" data-throw-if-not-resolved="false"></xref> representation of the given time on this date
    content.vb: Public Function At(time As LocalTime) As LocalDateTime
  overload: NodaTime.LocalDate.At*
- uid: NodaTime.LocalDate.With(System.Func{NodaTime.LocalDate,NodaTime.LocalDate})
  commentId: M:NodaTime.LocalDate.With(System.Func{NodaTime.LocalDate,NodaTime.LocalDate})
  id: With(System.Func{NodaTime.LocalDate,NodaTime.LocalDate})
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: With(Func<LocalDate, LocalDate>)
  nameWithType: LocalDate.With(Func<LocalDate, LocalDate>)
  fullName: NodaTime.LocalDate.With(System.Func<NodaTime.LocalDate, NodaTime.LocalDate>)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns this date, with the given adjuster applied to it.
  remarks: >-
    If the adjuster attempts to construct an invalid date (such as by trying

    to set a day-of-month of 30 in February), any exception thrown by

    that construction attempt will be propagated through this method.
  example: []
  syntax:
    content: public LocalDate With(Func<LocalDate, LocalDate> adjuster)
    parameters:
    - id: adjuster
      type: System.Func{NodaTime.LocalDate,NodaTime.LocalDate}
      description: The adjuster to apply.
    return:
      type: NodaTime.LocalDate
      description: The adjusted date.
    content.vb: Public Function [With](adjuster As Func(Of LocalDate, LocalDate)) As LocalDate
  overload: NodaTime.LocalDate.With*
  nameWithType.vb: LocalDate.With(Func(Of LocalDate, LocalDate))
  fullName.vb: NodaTime.LocalDate.With(System.Func(Of NodaTime.LocalDate, NodaTime.LocalDate))
  name.vb: With(Func(Of LocalDate, LocalDate))
- uid: NodaTime.LocalDate.Deconstruct(System.Int32@,System.Int32@,System.Int32@)
  commentId: M:NodaTime.LocalDate.Deconstruct(System.Int32@,System.Int32@,System.Int32@)
  id: Deconstruct(System.Int32@,System.Int32@,System.Int32@)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Deconstruct(out int, out int, out int)
  nameWithType: LocalDate.Deconstruct(out int, out int, out int)
  fullName: NodaTime.LocalDate.Deconstruct(out int, out int, out int)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Deconstructs the current instance into its components.
  example: []
  syntax:
    content: public void Deconstruct(out int year, out int month, out int day)
    parameters:
    - id: year
      type: System.Int32
      description: The year component of the date.
    - id: month
      type: System.Int32
      description: The month component of the date.
    - id: day
      type: System.Int32
      description: The day component of the date.
    content.vb: Public Sub Deconstruct(year As Integer, month As Integer, day As Integer)
  overload: NodaTime.LocalDate.Deconstruct*
  nameWithType.vb: LocalDate.Deconstruct(Integer, Integer, Integer)
  fullName.vb: NodaTime.LocalDate.Deconstruct(Integer, Integer, Integer)
  name.vb: Deconstruct(Integer, Integer, Integer)
- uid: NodaTime.LocalDate.Deconstruct(System.Int32@,System.Int32@,System.Int32@,NodaTime.CalendarSystem@)
  commentId: M:NodaTime.LocalDate.Deconstruct(System.Int32@,System.Int32@,System.Int32@,NodaTime.CalendarSystem@)
  id: Deconstruct(System.Int32@,System.Int32@,System.Int32@,NodaTime.CalendarSystem@)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: Deconstruct(out int, out int, out int, out CalendarSystem)
  nameWithType: LocalDate.Deconstruct(out int, out int, out int, out CalendarSystem)
  fullName: NodaTime.LocalDate.Deconstruct(out int, out int, out int, out NodaTime.CalendarSystem)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Deconstructs the current instance into its components.
  example: []
  syntax:
    content: public void Deconstruct(out int year, out int month, out int day, out CalendarSystem calendar)
    parameters:
    - id: year
      type: System.Int32
      description: The year component of the date.
    - id: month
      type: System.Int32
      description: The month component of the date.
    - id: day
      type: System.Int32
      description: The day component of the date.
    - id: calendar
      type: NodaTime.CalendarSystem
      description: The <xref href="NodaTime.CalendarSystem" data-throw-if-not-resolved="false"></xref> associated with the date.
    content.vb: Public Sub Deconstruct(year As Integer, month As Integer, day As Integer, calendar As CalendarSystem)
  overload: NodaTime.LocalDate.Deconstruct*
  nameWithType.vb: LocalDate.Deconstruct(Integer, Integer, Integer, CalendarSystem)
  fullName.vb: NodaTime.LocalDate.Deconstruct(Integer, Integer, Integer, NodaTime.CalendarSystem)
  name.vb: Deconstruct(Integer, Integer, Integer, CalendarSystem)
- uid: NodaTime.LocalDate.ToString
  commentId: M:NodaTime.LocalDate.ToString
  id: ToString
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: LocalDate.ToString()
  fullName: NodaTime.LocalDate.ToString()
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this instance.
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: >-
        The value of the current instance in the default format pattern ("D"), using the current thread's

        culture to obtain a format provider.
    content.vb: Public Overrides Function ToString() As String
  overridden: System.ValueType.ToString
  overload: NodaTime.LocalDate.ToString*
- uid: NodaTime.LocalDate.ToString(System.String,System.IFormatProvider)
  commentId: M:NodaTime.LocalDate.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: ToString(string?, IFormatProvider?)
  nameWithType: LocalDate.ToString(string?, IFormatProvider?)
  fullName: NodaTime.LocalDate.ToString(string?, System.IFormatProvider?)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Formats the value of the current instance using the specified pattern.
  example: []
  syntax:
    content: public string ToString(string? patternText, IFormatProvider? formatProvider)
    parameters:
    - id: patternText
      type: System.String
      description: >-
        The <xref href="System.String" data-throw-if-not-resolved="false"></xref> specifying the pattern to use,
            or null to use the default format pattern ("D").
    - id: formatProvider
      type: System.IFormatProvider
      description: >-
        The <xref href="System.IFormatProvider" data-throw-if-not-resolved="false"></xref> to use when formatting the value,
            or null to use the current thread's culture to obtain a format provider.
    return:
      type: System.String
      description: A <xref href="System.String" data-throw-if-not-resolved="false"></xref> containing the value of the current instance in the specified format.
    content.vb: Public Function ToString(patternText As String, formatProvider As IFormatProvider) As String
  overload: NodaTime.LocalDate.ToString*
  implements:
  - System.IFormattable.ToString(System.String,System.IFormatProvider)
  nameWithType.vb: LocalDate.ToString(String, IFormatProvider)
  fullName.vb: NodaTime.LocalDate.ToString(String, System.IFormatProvider)
  name.vb: ToString(String, IFormatProvider)
- uid: NodaTime.LocalDate.AddSchema(System.Xml.Schema.XmlSchemaSet)
  commentId: M:NodaTime.LocalDate.AddSchema(System.Xml.Schema.XmlSchemaSet)
  id: AddSchema(System.Xml.Schema.XmlSchemaSet)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: AddSchema(XmlSchemaSet)
  nameWithType: LocalDate.AddSchema(XmlSchemaSet)
  fullName: NodaTime.LocalDate.AddSchema(System.Xml.Schema.XmlSchemaSet)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Adds the XML schema type describing the structure of the <xref href="NodaTime.LocalTime" data-throw-if-not-resolved="false"></xref> XML serialization to the given <code class="paramref">xmlSchemaSet</code>.

    the <code class="paramref">xmlSchemaSet</code>.
  example: []
  syntax:
    content: public static XmlQualifiedName AddSchema(XmlSchemaSet xmlSchemaSet)
    parameters:
    - id: xmlSchemaSet
      type: System.Xml.Schema.XmlSchemaSet
      description: The XML schema set provided by <xref href="System.Xml.Serialization.XmlSchemaExporter" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Xml.XmlQualifiedName
      description: The qualified name of the schema type that was added to the <code class="paramref">xmlSchemaSet</code>.
    content.vb: Public Shared Function AddSchema(xmlSchemaSet As XmlSchemaSet) As XmlQualifiedName
  overload: NodaTime.LocalDate.AddSchema*
- uid: NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#GetSchema
  commentId: M:NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#GetSchema
  id: System#Xml#Serialization#IXmlSerializable#GetSchema
  isEii: true
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: IXmlSerializable.GetSchema()
  nameWithType: LocalDate.IXmlSerializable.GetSchema()
  fullName: NodaTime.LocalDate.System.Xml.Serialization.IXmlSerializable.GetSchema()
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: This method is reserved and should not be used. When implementing the <code>IXmlSerializable</code> interface, you should return <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> (<code>Nothing</code> in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <xref href="System.Xml.Serialization.XmlSchemaProviderAttribute" data-throw-if-not-resolved="false"></xref> to the class.
  example: []
  syntax:
    content: XmlSchema IXmlSerializable.GetSchema()
    return:
      type: System.Xml.Schema.XmlSchema
      description: An <xref href="System.Xml.Schema.XmlSchema" data-throw-if-not-resolved="false"></xref> that describes the XML representation of the object that is produced by the <xref href="System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" data-throw-if-not-resolved="false"></xref> method and consumed by the <xref href="System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" data-throw-if-not-resolved="false"></xref> method.
    content.vb: ''
  overload: NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#GetSchema*
  nameWithType.vb: ''
  fullName.vb: ''
  name.vb: ''
- uid: NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  commentId: M:NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  id: System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  isEii: true
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: IXmlSerializable.ReadXml(XmlReader)
  nameWithType: LocalDate.IXmlSerializable.ReadXml(XmlReader)
  fullName: NodaTime.LocalDate.System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Generates an object from its XML representation.
  example: []
  syntax:
    content: void IXmlSerializable.ReadXml(XmlReader reader)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: The <xref href="System.Xml.XmlReader" data-throw-if-not-resolved="false"></xref> stream from which the object is deserialized.
    content.vb: ''
  overload: NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#ReadXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  nameWithType.vb: ''
  fullName.vb: ''
  name.vb: ''
- uid: NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  commentId: M:NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  id: System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  isEii: true
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: LocalDate.IXmlSerializable.WriteXml(XmlWriter)
  fullName: NodaTime.LocalDate.System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Converts an object into its XML representation.
  example: []
  syntax:
    content: void IXmlSerializable.WriteXml(XmlWriter writer)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: The <xref href="System.Xml.XmlWriter" data-throw-if-not-resolved="false"></xref> stream to which the object is serialized.
    content.vb: ''
  overload: NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#WriteXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  nameWithType.vb: ''
  fullName.vb: ''
  name.vb: ''
- uid: NodaTime.LocalDate.ToDateOnly
  commentId: M:NodaTime.LocalDate.ToDateOnly
  id: ToDateOnly
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: ToDateOnly()
  nameWithType: LocalDate.ToDateOnly()
  fullName: NodaTime.LocalDate.ToDateOnly()
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Converts this value to an equivalent <xref href="System.DateOnly" data-throw-if-not-resolved="false"></xref>.
  remarks: >-
    <xref href="System.DateOnly" data-throw-if-not-resolved="false"></xref> uses the Gregorian calendar by definition, so the value is implicitly converted

    to the Gregorian calendar first. The result will be on the same physical day,

    but the values returned by the Year/Month/Day properties of the <xref href="System.DateTime" data-throw-if-not-resolved="false"></xref> may not

    match the Year/Month/Day properties of this value.
  example: []
  syntax:
    content: public DateOnly ToDateOnly()
    return:
      type: System.DateOnly
      description: A <xref href="System.DateOnly" data-throw-if-not-resolved="false"></xref> value equivalent to this one.
    content.vb: Public Function ToDateOnly() As DateOnly
  overload: NodaTime.LocalDate.ToDateOnly*
- uid: NodaTime.LocalDate.FromDateOnly(System.DateOnly)
  commentId: M:NodaTime.LocalDate.FromDateOnly(System.DateOnly)
  id: FromDateOnly(System.DateOnly)
  parent: NodaTime.LocalDate
  langs:
  - csharp
  - vb
  name: FromDateOnly(DateOnly)
  nameWithType: LocalDate.FromDateOnly(DateOnly)
  fullName: NodaTime.LocalDate.FromDateOnly(System.DateOnly)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Constructs a <xref href="NodaTime.LocalDate" data-throw-if-not-resolved="false"></xref> from a <xref href="System.DateOnly" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static LocalDate FromDateOnly(DateOnly date)
    parameters:
    - id: date
      type: System.DateOnly
      description: The date to convert.
    return:
      type: NodaTime.LocalDate
      description: The <xref href="NodaTime.LocalDate" data-throw-if-not-resolved="false"></xref> equivalent, which is always in the ISO calendar system.
    content.vb: Public Shared Function FromDateOnly([date] As DateOnly) As LocalDate
  overload: NodaTime.LocalDate.FromDateOnly*
references:
- uid: NodaTime.LocalDate.CompareTo(NodaTime.LocalDate)
  commentId: M:NodaTime.LocalDate.CompareTo(NodaTime.LocalDate)
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_CompareTo_NodaTime_LocalDate_
  name: CompareTo(LocalDate)
  nameWithType: LocalDate.CompareTo(LocalDate)
  fullName: NodaTime.LocalDate.CompareTo(NodaTime.LocalDate)
  spec.csharp:
  - uid: NodaTime.LocalDate.CompareTo(NodaTime.LocalDate)
    name: CompareTo
    href: NodaTime.LocalDate.html#NodaTime_LocalDate_CompareTo_NodaTime_LocalDate_
  - name: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: )
  spec.vb:
  - uid: NodaTime.LocalDate.CompareTo(NodaTime.LocalDate)
    name: CompareTo
    href: NodaTime.LocalDate.html#NodaTime_LocalDate_CompareTo_NodaTime_LocalDate_
  - name: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: )
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: NodaTime
  commentId: N:NodaTime
  href: NodaTime.html
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System.IEquatable{NodaTime.LocalDate}
  commentId: T:System.IEquatable{NodaTime.LocalDate}
  parent: System
  definition: System.IEquatable`1
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<LocalDate>
  nameWithType: IEquatable<LocalDate>
  fullName: System.IEquatable<NodaTime.LocalDate>
  nameWithType.vb: IEquatable(Of LocalDate)
  fullName.vb: System.IEquatable(Of NodaTime.LocalDate)
  name.vb: IEquatable(Of LocalDate)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: )
- uid: System.IComparable{NodaTime.LocalDate}
  commentId: T:System.IComparable{NodaTime.LocalDate}
  parent: System
  definition: System.IComparable`1
  href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  name: IComparable<LocalDate>
  nameWithType: IComparable<LocalDate>
  fullName: System.IComparable<NodaTime.LocalDate>
  nameWithType.vb: IComparable(Of LocalDate)
  fullName.vb: System.IComparable(Of NodaTime.LocalDate)
  name.vb: IComparable(Of LocalDate)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: <
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: (
  - name: Of
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: )
- uid: System.IComparable
  commentId: T:System.IComparable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.IFormattable
  commentId: T:System.IFormattable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iformattable
  name: IFormattable
  nameWithType: IFormattable
  fullName: System.IFormattable
- uid: System.Xml.Serialization.IXmlSerializable
  commentId: T:System.Xml.Serialization.IXmlSerializable
  parent: System.Xml.Serialization
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable
  name: IXmlSerializable
  nameWithType: IXmlSerializable
  fullName: System.Xml.Serialization.IXmlSerializable
- uid: System.Numerics.IAdditionOperators{NodaTime.LocalDate,NodaTime.Period,NodaTime.LocalDate}
  commentId: T:System.Numerics.IAdditionOperators{NodaTime.LocalDate,NodaTime.Period,NodaTime.LocalDate}
  parent: System.Numerics
  definition: System.Numerics.IAdditionOperators`3
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3
  name: IAdditionOperators<LocalDate, Period, LocalDate>
  nameWithType: IAdditionOperators<LocalDate, Period, LocalDate>
  fullName: System.Numerics.IAdditionOperators<NodaTime.LocalDate, NodaTime.Period, NodaTime.LocalDate>
  nameWithType.vb: IAdditionOperators(Of LocalDate, Period, LocalDate)
  fullName.vb: System.Numerics.IAdditionOperators(Of NodaTime.LocalDate, NodaTime.Period, NodaTime.LocalDate)
  name.vb: IAdditionOperators(Of LocalDate, Period, LocalDate)
  spec.csharp:
  - uid: System.Numerics.IAdditionOperators`3
    name: IAdditionOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3
  - name: <
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.Period
    name: Period
    href: NodaTime.Period.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IAdditionOperators`3
    name: IAdditionOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3
  - name: (
  - name: Of
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.Period
    name: Period
    href: NodaTime.Period.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: )
- uid: System.Numerics.IAdditionOperators{NodaTime.LocalDate,NodaTime.LocalTime,NodaTime.LocalDateTime}
  commentId: T:System.Numerics.IAdditionOperators{NodaTime.LocalDate,NodaTime.LocalTime,NodaTime.LocalDateTime}
  parent: System.Numerics
  definition: System.Numerics.IAdditionOperators`3
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3
  name: IAdditionOperators<LocalDate, LocalTime, LocalDateTime>
  nameWithType: IAdditionOperators<LocalDate, LocalTime, LocalDateTime>
  fullName: System.Numerics.IAdditionOperators<NodaTime.LocalDate, NodaTime.LocalTime, NodaTime.LocalDateTime>
  nameWithType.vb: IAdditionOperators(Of LocalDate, LocalTime, LocalDateTime)
  fullName.vb: System.Numerics.IAdditionOperators(Of NodaTime.LocalDate, NodaTime.LocalTime, NodaTime.LocalDateTime)
  name.vb: IAdditionOperators(Of LocalDate, LocalTime, LocalDateTime)
  spec.csharp:
  - uid: System.Numerics.IAdditionOperators`3
    name: IAdditionOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3
  - name: <
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    href: NodaTime.LocalDateTime.html
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IAdditionOperators`3
    name: IAdditionOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3
  - name: (
  - name: Of
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalDateTime
    name: LocalDateTime
    href: NodaTime.LocalDateTime.html
  - name: )
- uid: System.Numerics.ISubtractionOperators{NodaTime.LocalDate,NodaTime.Period,NodaTime.LocalDate}
  commentId: T:System.Numerics.ISubtractionOperators{NodaTime.LocalDate,NodaTime.Period,NodaTime.LocalDate}
  parent: System.Numerics
  definition: System.Numerics.ISubtractionOperators`3
  href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3
  name: ISubtractionOperators<LocalDate, Period, LocalDate>
  nameWithType: ISubtractionOperators<LocalDate, Period, LocalDate>
  fullName: System.Numerics.ISubtractionOperators<NodaTime.LocalDate, NodaTime.Period, NodaTime.LocalDate>
  nameWithType.vb: ISubtractionOperators(Of LocalDate, Period, LocalDate)
  fullName.vb: System.Numerics.ISubtractionOperators(Of NodaTime.LocalDate, NodaTime.Period, NodaTime.LocalDate)
  name.vb: ISubtractionOperators(Of LocalDate, Period, LocalDate)
  spec.csharp:
  - uid: System.Numerics.ISubtractionOperators`3
    name: ISubtractionOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3
  - name: <
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.Period
    name: Period
    href: NodaTime.Period.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: '>'
  spec.vb:
  - uid: System.Numerics.ISubtractionOperators`3
    name: ISubtractionOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3
  - name: (
  - name: Of
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.Period
    name: Period
    href: NodaTime.Period.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: )
- uid: System.Numerics.ISubtractionOperators{NodaTime.LocalDate,NodaTime.LocalDate,NodaTime.Period}
  commentId: T:System.Numerics.ISubtractionOperators{NodaTime.LocalDate,NodaTime.LocalDate,NodaTime.Period}
  parent: System.Numerics
  definition: System.Numerics.ISubtractionOperators`3
  href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3
  name: ISubtractionOperators<LocalDate, LocalDate, Period>
  nameWithType: ISubtractionOperators<LocalDate, LocalDate, Period>
  fullName: System.Numerics.ISubtractionOperators<NodaTime.LocalDate, NodaTime.LocalDate, NodaTime.Period>
  nameWithType.vb: ISubtractionOperators(Of LocalDate, LocalDate, Period)
  fullName.vb: System.Numerics.ISubtractionOperators(Of NodaTime.LocalDate, NodaTime.LocalDate, NodaTime.Period)
  name.vb: ISubtractionOperators(Of LocalDate, LocalDate, Period)
  spec.csharp:
  - uid: System.Numerics.ISubtractionOperators`3
    name: ISubtractionOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3
  - name: <
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.Period
    name: Period
    href: NodaTime.Period.html
  - name: '>'
  spec.vb:
  - uid: System.Numerics.ISubtractionOperators`3
    name: ISubtractionOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3
  - name: (
  - name: Of
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.Period
    name: Period
    href: NodaTime.Period.html
  - name: )
- uid: System.Numerics.IComparisonOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}
  commentId: T:System.Numerics.IComparisonOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}
  parent: System.Numerics
  definition: System.Numerics.IComparisonOperators`3
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3
  name: IComparisonOperators<LocalDate, LocalDate, bool>
  nameWithType: IComparisonOperators<LocalDate, LocalDate, bool>
  fullName: System.Numerics.IComparisonOperators<NodaTime.LocalDate, NodaTime.LocalDate, bool>
  nameWithType.vb: IComparisonOperators(Of LocalDate, LocalDate, Boolean)
  fullName.vb: System.Numerics.IComparisonOperators(Of NodaTime.LocalDate, NodaTime.LocalDate, Boolean)
  name.vb: IComparisonOperators(Of LocalDate, LocalDate, Boolean)
  spec.csharp:
  - uid: System.Numerics.IComparisonOperators`3
    name: IComparisonOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3
  - name: <
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IComparisonOperators`3
    name: IComparisonOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3
  - name: (
  - name: Of
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Numerics.IEqualityOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}
  commentId: T:System.Numerics.IEqualityOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}
  parent: System.Numerics
  definition: System.Numerics.IEqualityOperators`3
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3
  name: IEqualityOperators<LocalDate, LocalDate, bool>
  nameWithType: IEqualityOperators<LocalDate, LocalDate, bool>
  fullName: System.Numerics.IEqualityOperators<NodaTime.LocalDate, NodaTime.LocalDate, bool>
  nameWithType.vb: IEqualityOperators(Of LocalDate, LocalDate, Boolean)
  fullName.vb: System.Numerics.IEqualityOperators(Of NodaTime.LocalDate, NodaTime.LocalDate, Boolean)
  name.vb: IEqualityOperators(Of LocalDate, LocalDate, Boolean)
  spec.csharp:
  - uid: System.Numerics.IEqualityOperators`3
    name: IEqualityOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3
  - name: <
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IEqualityOperators`3
    name: IEqualityOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3
  - name: (
  - name: Of
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Xml.Serialization
  commentId: N:System.Xml.Serialization
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Xml.Serialization
  nameWithType: System.Xml.Serialization
  fullName: System.Xml.Serialization
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Xml
    name: Xml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml
  - name: .
  - uid: System.Xml.Serialization
    name: Serialization
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.serialization
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Xml
    name: Xml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml
  - name: .
  - uid: System.Xml.Serialization
    name: Serialization
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.serialization
- uid: System.Numerics.IAdditionOperators`3
  commentId: T:System.Numerics.IAdditionOperators`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3
  name: IAdditionOperators<TSelf, TOther, TResult>
  nameWithType: IAdditionOperators<TSelf, TOther, TResult>
  fullName: System.Numerics.IAdditionOperators<TSelf, TOther, TResult>
  nameWithType.vb: IAdditionOperators(Of TSelf, TOther, TResult)
  fullName.vb: System.Numerics.IAdditionOperators(Of TSelf, TOther, TResult)
  name.vb: IAdditionOperators(Of TSelf, TOther, TResult)
  spec.csharp:
  - uid: System.Numerics.IAdditionOperators`3
    name: IAdditionOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3
  - name: <
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IAdditionOperators`3
    name: IAdditionOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3
  - name: (
  - name: Of
  - name: " "
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Numerics
  commentId: N:System.Numerics
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Numerics
  nameWithType: System.Numerics
  fullName: System.Numerics
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Numerics
    name: Numerics
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Numerics
    name: Numerics
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics
- uid: System.Numerics.ISubtractionOperators`3
  commentId: T:System.Numerics.ISubtractionOperators`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3
  name: ISubtractionOperators<TSelf, TOther, TResult>
  nameWithType: ISubtractionOperators<TSelf, TOther, TResult>
  fullName: System.Numerics.ISubtractionOperators<TSelf, TOther, TResult>
  nameWithType.vb: ISubtractionOperators(Of TSelf, TOther, TResult)
  fullName.vb: System.Numerics.ISubtractionOperators(Of TSelf, TOther, TResult)
  name.vb: ISubtractionOperators(Of TSelf, TOther, TResult)
  spec.csharp:
  - uid: System.Numerics.ISubtractionOperators`3
    name: ISubtractionOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3
  - name: <
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Numerics.ISubtractionOperators`3
    name: ISubtractionOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3
  - name: (
  - name: Of
  - name: " "
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Numerics.IComparisonOperators`3
  commentId: T:System.Numerics.IComparisonOperators`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3
  name: IComparisonOperators<TSelf, TOther, TResult>
  nameWithType: IComparisonOperators<TSelf, TOther, TResult>
  fullName: System.Numerics.IComparisonOperators<TSelf, TOther, TResult>
  nameWithType.vb: IComparisonOperators(Of TSelf, TOther, TResult)
  fullName.vb: System.Numerics.IComparisonOperators(Of TSelf, TOther, TResult)
  name.vb: IComparisonOperators(Of TSelf, TOther, TResult)
  spec.csharp:
  - uid: System.Numerics.IComparisonOperators`3
    name: IComparisonOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3
  - name: <
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IComparisonOperators`3
    name: IComparisonOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3
  - name: (
  - name: Of
  - name: " "
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Numerics.IEqualityOperators`3
  commentId: T:System.Numerics.IEqualityOperators`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3
  name: IEqualityOperators<TSelf, TOther, TResult>
  nameWithType: IEqualityOperators<TSelf, TOther, TResult>
  fullName: System.Numerics.IEqualityOperators<TSelf, TOther, TResult>
  nameWithType.vb: IEqualityOperators(Of TSelf, TOther, TResult)
  fullName.vb: System.Numerics.IEqualityOperators(Of TSelf, TOther, TResult)
  name.vb: IEqualityOperators(Of TSelf, TOther, TResult)
  spec.csharp:
  - uid: System.Numerics.IEqualityOperators`3
    name: IEqualityOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3
  - name: <
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IEqualityOperators`3
    name: IEqualityOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3
  - name: (
  - name: Of
  - name: " "
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: NodaTime.LocalDate.MaxIsoValue*
  commentId: Overload:NodaTime.LocalDate.MaxIsoValue
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_MaxIsoValue
  name: MaxIsoValue
  nameWithType: LocalDate.MaxIsoValue
  fullName: NodaTime.LocalDate.MaxIsoValue
- uid: NodaTime.LocalDate
  commentId: T:NodaTime.LocalDate
  parent: NodaTime
  href: NodaTime.LocalDate.html
  name: LocalDate
  nameWithType: LocalDate
  fullName: NodaTime.LocalDate
- uid: NodaTime.LocalDate.MinIsoValue*
  commentId: Overload:NodaTime.LocalDate.MinIsoValue
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_MinIsoValue
  name: MinIsoValue
  nameWithType: LocalDate.MinIsoValue
  fullName: NodaTime.LocalDate.MinIsoValue
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: NodaTime.LocalDate.#ctor*
  commentId: Overload:NodaTime.LocalDate.#ctor
  href: NodaTime.LocalDate.html#NodaTime_LocalDate__ctor_System_Int32_System_Int32_System_Int32_
  name: LocalDate
  nameWithType: LocalDate.LocalDate
  fullName: NodaTime.LocalDate.LocalDate
  nameWithType.vb: LocalDate.New
  fullName.vb: NodaTime.LocalDate.New
  name.vb: New
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: NodaTime.CalendarSystem
  commentId: T:NodaTime.CalendarSystem
  parent: NodaTime
  href: NodaTime.CalendarSystem.html
  name: CalendarSystem
  nameWithType: CalendarSystem
  fullName: NodaTime.CalendarSystem
- uid: NodaTime.Calendars.Era
  commentId: T:NodaTime.Calendars.Era
  parent: NodaTime.Calendars
  href: NodaTime.Calendars.Era.html
  name: Era
  nameWithType: Era
  fullName: NodaTime.Calendars.Era
- uid: NodaTime.Calendars
  commentId: N:NodaTime.Calendars
  href: NodaTime.html
  name: NodaTime.Calendars
  nameWithType: NodaTime.Calendars
  fullName: NodaTime.Calendars
  spec.csharp:
  - uid: NodaTime
    name: NodaTime
    href: NodaTime.html
  - name: .
  - uid: NodaTime.Calendars
    name: Calendars
    href: NodaTime.Calendars.html
  spec.vb:
  - uid: NodaTime
    name: NodaTime
    href: NodaTime.html
  - name: .
  - uid: NodaTime.Calendars
    name: Calendars
    href: NodaTime.Calendars.html
- uid: NodaTime.LocalDate.Calendar*
  commentId: Overload:NodaTime.LocalDate.Calendar
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_Calendar
  name: Calendar
  nameWithType: LocalDate.Calendar
  fullName: NodaTime.LocalDate.Calendar
- uid: NodaTime.LocalDate.Year*
  commentId: Overload:NodaTime.LocalDate.Year
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_Year
  name: Year
  nameWithType: LocalDate.Year
  fullName: NodaTime.LocalDate.Year
- uid: NodaTime.LocalDate.Month*
  commentId: Overload:NodaTime.LocalDate.Month
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_Month
  name: Month
  nameWithType: LocalDate.Month
  fullName: NodaTime.LocalDate.Month
- uid: NodaTime.LocalDate.Day*
  commentId: Overload:NodaTime.LocalDate.Day
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_Day
  name: Day
  nameWithType: LocalDate.Day
  fullName: NodaTime.LocalDate.Day
- uid: NodaTime.IsoDayOfWeek
  commentId: T:NodaTime.IsoDayOfWeek
  parent: NodaTime
  href: NodaTime.IsoDayOfWeek.html
  name: IsoDayOfWeek
  nameWithType: IsoDayOfWeek
  fullName: NodaTime.IsoDayOfWeek
- uid: NodaTime.LocalDate.DayOfWeek*
  commentId: Overload:NodaTime.LocalDate.DayOfWeek
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_DayOfWeek
  name: DayOfWeek
  nameWithType: LocalDate.DayOfWeek
  fullName: NodaTime.LocalDate.DayOfWeek
- uid: NodaTime.LocalDate.YearOfEra*
  commentId: Overload:NodaTime.LocalDate.YearOfEra
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_YearOfEra
  name: YearOfEra
  nameWithType: LocalDate.YearOfEra
  fullName: NodaTime.LocalDate.YearOfEra
- uid: NodaTime.LocalDate.Era*
  commentId: Overload:NodaTime.LocalDate.Era
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_Era
  name: Era
  nameWithType: LocalDate.Era
  fullName: NodaTime.LocalDate.Era
- uid: NodaTime.LocalDate.DayOfYear*
  commentId: Overload:NodaTime.LocalDate.DayOfYear
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_DayOfYear
  name: DayOfYear
  nameWithType: LocalDate.DayOfYear
  fullName: NodaTime.LocalDate.DayOfYear
- uid: NodaTime.LocalDateTime
  commentId: T:NodaTime.LocalDateTime
  parent: NodaTime
  href: NodaTime.LocalDateTime.html
  name: LocalDateTime
  nameWithType: LocalDateTime
  fullName: NodaTime.LocalDateTime
- uid: NodaTime.LocalDate.AtMidnight*
  commentId: Overload:NodaTime.LocalDate.AtMidnight
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_AtMidnight
  name: AtMidnight
  nameWithType: LocalDate.AtMidnight
  fullName: NodaTime.LocalDate.AtMidnight
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.datetime
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
  nameWithType.vb: Date
  fullName.vb: Date
  name.vb: Date
- uid: System.DateTime.Kind
  commentId: P:System.DateTime.Kind
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.datetime.kind
  name: Kind
  nameWithType: DateTime.Kind
  fullName: System.DateTime.Kind
  nameWithType.vb: Date.Kind
  fullName.vb: Date.Kind
- uid: System.DateTimeKind.Unspecified
  commentId: F:System.DateTimeKind.Unspecified
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.datetimekind#system-datetimekind-unspecified
  name: Unspecified
  nameWithType: DateTimeKind.Unspecified
  fullName: System.DateTimeKind.Unspecified
- uid: System.DateTime.ToLocalTime
  commentId: M:System.DateTime.ToLocalTime
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.datetime.tolocaltime
  name: ToLocalTime()
  nameWithType: DateTime.ToLocalTime()
  fullName: System.DateTime.ToLocalTime()
  nameWithType.vb: Date.ToLocalTime()
  fullName.vb: Date.ToLocalTime()
  spec.csharp:
  - uid: System.DateTime.ToLocalTime
    name: ToLocalTime
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetime.tolocaltime
  - name: (
  - name: )
  spec.vb:
  - uid: System.DateTime.ToLocalTime
    name: ToLocalTime
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetime.tolocaltime
  - name: (
  - name: )
- uid: System.DateTime.ToUniversalTime
  commentId: M:System.DateTime.ToUniversalTime
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.datetime.touniversaltime
  name: ToUniversalTime()
  nameWithType: DateTime.ToUniversalTime()
  fullName: System.DateTime.ToUniversalTime()
  nameWithType.vb: Date.ToUniversalTime()
  fullName.vb: Date.ToUniversalTime()
  spec.csharp:
  - uid: System.DateTime.ToUniversalTime
    name: ToUniversalTime
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetime.touniversaltime
  - name: (
  - name: )
  spec.vb:
  - uid: System.DateTime.ToUniversalTime
    name: ToUniversalTime
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetime.touniversaltime
  - name: (
  - name: )
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.datetimeoffset
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: NodaTime.LocalDate.ToDateTimeUnspecified*
  commentId: Overload:NodaTime.LocalDate.ToDateTimeUnspecified
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_ToDateTimeUnspecified
  name: ToDateTimeUnspecified
  nameWithType: LocalDate.ToDateTimeUnspecified
  fullName: NodaTime.LocalDate.ToDateTimeUnspecified
- uid: System.DateTimeKind.Utc
  commentId: F:System.DateTimeKind.Utc
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.datetimekind#system-datetimekind-utc
  name: Utc
  nameWithType: DateTimeKind.Utc
  fullName: System.DateTimeKind.Utc
- uid: NodaTime.LocalDate.FromDateTime*
  commentId: Overload:NodaTime.LocalDate.FromDateTime
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_FromDateTime_System_DateTime_
  name: FromDateTime
  nameWithType: LocalDate.FromDateTime
  fullName: NodaTime.LocalDate.FromDateTime
- uid: NodaTime.LocalDate.FromWeekYearWeekAndDay*
  commentId: Overload:NodaTime.LocalDate.FromWeekYearWeekAndDay
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_FromWeekYearWeekAndDay_System_Int32_System_Int32_NodaTime_IsoDayOfWeek_
  name: FromWeekYearWeekAndDay
  nameWithType: LocalDate.FromWeekYearWeekAndDay
  fullName: NodaTime.LocalDate.FromWeekYearWeekAndDay
- uid: NodaTime.LocalDate.FromYearMonthWeekAndDay*
  commentId: Overload:NodaTime.LocalDate.FromYearMonthWeekAndDay
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_FromYearMonthWeekAndDay_System_Int32_System_Int32_System_Int32_NodaTime_IsoDayOfWeek_
  name: FromYearMonthWeekAndDay
  nameWithType: LocalDate.FromYearMonthWeekAndDay
  fullName: NodaTime.LocalDate.FromYearMonthWeekAndDay
- uid: NodaTime.YearMonth
  commentId: T:NodaTime.YearMonth
  parent: NodaTime
  href: NodaTime.YearMonth.html
  name: YearMonth
  nameWithType: YearMonth
  fullName: NodaTime.YearMonth
- uid: NodaTime.LocalDate.ToYearMonth*
  commentId: Overload:NodaTime.LocalDate.ToYearMonth
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_ToYearMonth
  name: ToYearMonth
  nameWithType: LocalDate.ToYearMonth
  fullName: NodaTime.LocalDate.ToYearMonth
- uid: NodaTime.LocalDate.op_Addition*
  commentId: Overload:NodaTime.LocalDate.op_Addition
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_op_Addition_NodaTime_LocalDate_NodaTime_Period_
  name: operator +
  nameWithType: LocalDate.operator +
  fullName: NodaTime.LocalDate.operator +
  nameWithType.vb: LocalDate.+
  fullName.vb: NodaTime.LocalDate.+
  name.vb: +
  spec.csharp:
  - name: operator
  - name: " "
  - uid: NodaTime.LocalDate.op_Addition*
    name: +
    href: NodaTime.LocalDate.html#NodaTime_LocalDate_op_Addition_NodaTime_LocalDate_NodaTime_Period_
- uid: System.Numerics.IAdditionOperators{NodaTime.LocalDate,NodaTime.Period,NodaTime.LocalDate}.op_Addition(NodaTime.LocalDate,NodaTime.Period)
  commentId: M:System.Numerics.IAdditionOperators{NodaTime.LocalDate,NodaTime.Period,NodaTime.LocalDate}.op_Addition(NodaTime.LocalDate,NodaTime.Period)
  parent: System.Numerics.IAdditionOperators{NodaTime.LocalDate,NodaTime.Period,NodaTime.LocalDate}
  definition: System.Numerics.IAdditionOperators`3.op_Addition(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3.op_addition
  name: operator +(LocalDate, Period)
  nameWithType: IAdditionOperators<LocalDate, Period, LocalDate>.operator +(LocalDate, Period)
  fullName: System.Numerics.IAdditionOperators<NodaTime.LocalDate, NodaTime.Period, NodaTime.LocalDate>.operator +(NodaTime.LocalDate, NodaTime.Period)
  nameWithType.vb: IAdditionOperators(Of LocalDate, Period, LocalDate).+(LocalDate, Period)
  fullName.vb: System.Numerics.IAdditionOperators(Of NodaTime.LocalDate, NodaTime.Period, NodaTime.LocalDate).+(NodaTime.LocalDate, NodaTime.Period)
  name.vb: +(LocalDate, Period)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IAdditionOperators{NodaTime.LocalDate,NodaTime.Period,NodaTime.LocalDate}.op_Addition(NodaTime.LocalDate,NodaTime.Period)
    name: +
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3.op_addition
  - name: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.Period
    name: Period
    href: NodaTime.Period.html
  - name: )
  spec.vb:
  - name: +
  - name: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.Period
    name: Period
    href: NodaTime.Period.html
  - name: )
- uid: NodaTime.Period
  commentId: T:NodaTime.Period
  parent: NodaTime
  href: NodaTime.Period.html
  name: Period
  nameWithType: Period
  fullName: NodaTime.Period
- uid: System.Numerics.IAdditionOperators`3.op_Addition(`0,`1)
  commentId: M:System.Numerics.IAdditionOperators`3.op_Addition(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3.op_addition
  name: operator +(TSelf, TOther)
  nameWithType: IAdditionOperators<TSelf, TOther, TResult>.operator +(TSelf, TOther)
  fullName: System.Numerics.IAdditionOperators<TSelf, TOther, TResult>.operator +(TSelf, TOther)
  nameWithType.vb: IAdditionOperators(Of TSelf, TOther, TResult).+(TSelf, TOther)
  fullName.vb: System.Numerics.IAdditionOperators(Of TSelf, TOther, TResult).+(TSelf, TOther)
  name.vb: +(TSelf, TOther)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IAdditionOperators`3.op_Addition(`0,`1)
    name: +
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3.op_addition
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: +
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: NodaTime.LocalDate.Add*
  commentId: Overload:NodaTime.LocalDate.Add
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_Add_NodaTime_LocalDate_NodaTime_Period_
  name: Add
  nameWithType: LocalDate.Add
  fullName: NodaTime.LocalDate.Add
- uid: NodaTime.LocalDate.Plus*
  commentId: Overload:NodaTime.LocalDate.Plus
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_Plus_NodaTime_Period_
  name: Plus
  nameWithType: LocalDate.Plus
  fullName: NodaTime.LocalDate.Plus
- uid: NodaTime.LocalTime
  commentId: T:NodaTime.LocalTime
  parent: NodaTime
  href: NodaTime.LocalTime.html
  name: LocalTime
  nameWithType: LocalTime
  fullName: NodaTime.LocalTime
- uid: System.Numerics.IAdditionOperators{NodaTime.LocalDate,NodaTime.LocalTime,NodaTime.LocalDateTime}.op_Addition(NodaTime.LocalDate,NodaTime.LocalTime)
  commentId: M:System.Numerics.IAdditionOperators{NodaTime.LocalDate,NodaTime.LocalTime,NodaTime.LocalDateTime}.op_Addition(NodaTime.LocalDate,NodaTime.LocalTime)
  parent: System.Numerics.IAdditionOperators{NodaTime.LocalDate,NodaTime.LocalTime,NodaTime.LocalDateTime}
  definition: System.Numerics.IAdditionOperators`3.op_Addition(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3.op_addition
  name: operator +(LocalDate, LocalTime)
  nameWithType: IAdditionOperators<LocalDate, LocalTime, LocalDateTime>.operator +(LocalDate, LocalTime)
  fullName: System.Numerics.IAdditionOperators<NodaTime.LocalDate, NodaTime.LocalTime, NodaTime.LocalDateTime>.operator +(NodaTime.LocalDate, NodaTime.LocalTime)
  nameWithType.vb: IAdditionOperators(Of LocalDate, LocalTime, LocalDateTime).+(LocalDate, LocalTime)
  fullName.vb: System.Numerics.IAdditionOperators(Of NodaTime.LocalDate, NodaTime.LocalTime, NodaTime.LocalDateTime).+(NodaTime.LocalDate, NodaTime.LocalTime)
  name.vb: +(LocalDate, LocalTime)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IAdditionOperators{NodaTime.LocalDate,NodaTime.LocalTime,NodaTime.LocalDateTime}.op_Addition(NodaTime.LocalDate,NodaTime.LocalTime)
    name: +
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3.op_addition
  - name: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: )
  spec.vb:
  - name: +
  - name: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalTime
    name: LocalTime
    href: NodaTime.LocalTime.html
  - name: )
- uid: NodaTime.LocalDate.Minus(NodaTime.Period)
  commentId: M:NodaTime.LocalDate.Minus(NodaTime.Period)
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_Minus_NodaTime_Period_
  name: Minus(Period)
  nameWithType: LocalDate.Minus(Period)
  fullName: NodaTime.LocalDate.Minus(NodaTime.Period)
  spec.csharp:
  - uid: NodaTime.LocalDate.Minus(NodaTime.Period)
    name: Minus
    href: NodaTime.LocalDate.html#NodaTime_LocalDate_Minus_NodaTime_Period_
  - name: (
  - uid: NodaTime.Period
    name: Period
    href: NodaTime.Period.html
  - name: )
  spec.vb:
  - uid: NodaTime.LocalDate.Minus(NodaTime.Period)
    name: Minus
    href: NodaTime.LocalDate.html#NodaTime_LocalDate_Minus_NodaTime_Period_
  - name: (
  - uid: NodaTime.Period
    name: Period
    href: NodaTime.Period.html
  - name: )
- uid: NodaTime.LocalDate.op_Subtraction*
  commentId: Overload:NodaTime.LocalDate.op_Subtraction
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_op_Subtraction_NodaTime_LocalDate_NodaTime_Period_
  name: operator -
  nameWithType: LocalDate.operator -
  fullName: NodaTime.LocalDate.operator -
  nameWithType.vb: LocalDate.-
  fullName.vb: NodaTime.LocalDate.-
  name.vb: '-'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: NodaTime.LocalDate.op_Subtraction*
    name: '-'
    href: NodaTime.LocalDate.html#NodaTime_LocalDate_op_Subtraction_NodaTime_LocalDate_NodaTime_Period_
- uid: System.Numerics.ISubtractionOperators{NodaTime.LocalDate,NodaTime.Period,NodaTime.LocalDate}.op_Subtraction(NodaTime.LocalDate,NodaTime.Period)
  commentId: M:System.Numerics.ISubtractionOperators{NodaTime.LocalDate,NodaTime.Period,NodaTime.LocalDate}.op_Subtraction(NodaTime.LocalDate,NodaTime.Period)
  parent: System.Numerics.ISubtractionOperators{NodaTime.LocalDate,NodaTime.Period,NodaTime.LocalDate}
  definition: System.Numerics.ISubtractionOperators`3.op_Subtraction(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3.op_subtraction
  name: operator -(LocalDate, Period)
  nameWithType: ISubtractionOperators<LocalDate, Period, LocalDate>.operator -(LocalDate, Period)
  fullName: System.Numerics.ISubtractionOperators<NodaTime.LocalDate, NodaTime.Period, NodaTime.LocalDate>.operator -(NodaTime.LocalDate, NodaTime.Period)
  nameWithType.vb: ISubtractionOperators(Of LocalDate, Period, LocalDate).-(LocalDate, Period)
  fullName.vb: System.Numerics.ISubtractionOperators(Of NodaTime.LocalDate, NodaTime.Period, NodaTime.LocalDate).-(NodaTime.LocalDate, NodaTime.Period)
  name.vb: -(LocalDate, Period)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.ISubtractionOperators{NodaTime.LocalDate,NodaTime.Period,NodaTime.LocalDate}.op_Subtraction(NodaTime.LocalDate,NodaTime.Period)
    name: '-'
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3.op_subtraction
  - name: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.Period
    name: Period
    href: NodaTime.Period.html
  - name: )
  spec.vb:
  - name: '-'
  - name: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.Period
    name: Period
    href: NodaTime.Period.html
  - name: )
- uid: System.Numerics.ISubtractionOperators`3.op_Subtraction(`0,`1)
  commentId: M:System.Numerics.ISubtractionOperators`3.op_Subtraction(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3.op_subtraction
  name: operator -(TSelf, TOther)
  nameWithType: ISubtractionOperators<TSelf, TOther, TResult>.operator -(TSelf, TOther)
  fullName: System.Numerics.ISubtractionOperators<TSelf, TOther, TResult>.operator -(TSelf, TOther)
  nameWithType.vb: ISubtractionOperators(Of TSelf, TOther, TResult).-(TSelf, TOther)
  fullName.vb: System.Numerics.ISubtractionOperators(Of TSelf, TOther, TResult).-(TSelf, TOther)
  name.vb: -(TSelf, TOther)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.ISubtractionOperators`3.op_Subtraction(`0,`1)
    name: '-'
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3.op_subtraction
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: '-'
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: NodaTime.LocalDate.Subtract*
  commentId: Overload:NodaTime.LocalDate.Subtract
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_Subtract_NodaTime_LocalDate_NodaTime_Period_
  name: Subtract
  nameWithType: LocalDate.Subtract
  fullName: NodaTime.LocalDate.Subtract
- uid: NodaTime.LocalDate.Minus*
  commentId: Overload:NodaTime.LocalDate.Minus
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_Minus_NodaTime_Period_
  name: Minus
  nameWithType: LocalDate.Minus
  fullName: NodaTime.LocalDate.Minus
- uid: NodaTime.Period.Between(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:NodaTime.Period.Between(NodaTime.LocalDate,NodaTime.LocalDate)
  href: NodaTime.Period.html#NodaTime_Period_Between_NodaTime_LocalDate_NodaTime_LocalDate_
  name: Between(LocalDate, LocalDate)
  nameWithType: Period.Between(LocalDate, LocalDate)
  fullName: NodaTime.Period.Between(NodaTime.LocalDate, NodaTime.LocalDate)
  spec.csharp:
  - uid: NodaTime.Period.Between(NodaTime.LocalDate,NodaTime.LocalDate)
    name: Between
    href: NodaTime.Period.html#NodaTime_Period_Between_NodaTime_LocalDate_NodaTime_LocalDate_
  - name: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: )
  spec.vb:
  - uid: NodaTime.Period.Between(NodaTime.LocalDate,NodaTime.LocalDate)
    name: Between
    href: NodaTime.Period.html#NodaTime_Period_Between_NodaTime_LocalDate_NodaTime_LocalDate_
  - name: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: )
- uid: System.Numerics.ISubtractionOperators{NodaTime.LocalDate,NodaTime.LocalDate,NodaTime.Period}.op_Subtraction(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:System.Numerics.ISubtractionOperators{NodaTime.LocalDate,NodaTime.LocalDate,NodaTime.Period}.op_Subtraction(NodaTime.LocalDate,NodaTime.LocalDate)
  parent: System.Numerics.ISubtractionOperators{NodaTime.LocalDate,NodaTime.LocalDate,NodaTime.Period}
  definition: System.Numerics.ISubtractionOperators`3.op_Subtraction(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3.op_subtraction
  name: operator -(LocalDate, LocalDate)
  nameWithType: ISubtractionOperators<LocalDate, LocalDate, Period>.operator -(LocalDate, LocalDate)
  fullName: System.Numerics.ISubtractionOperators<NodaTime.LocalDate, NodaTime.LocalDate, NodaTime.Period>.operator -(NodaTime.LocalDate, NodaTime.LocalDate)
  nameWithType.vb: ISubtractionOperators(Of LocalDate, LocalDate, Period).-(LocalDate, LocalDate)
  fullName.vb: System.Numerics.ISubtractionOperators(Of NodaTime.LocalDate, NodaTime.LocalDate, NodaTime.Period).-(NodaTime.LocalDate, NodaTime.LocalDate)
  name.vb: -(LocalDate, LocalDate)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.ISubtractionOperators{NodaTime.LocalDate,NodaTime.LocalDate,NodaTime.Period}.op_Subtraction(NodaTime.LocalDate,NodaTime.LocalDate)
    name: '-'
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3.op_subtraction
  - name: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: )
  spec.vb:
  - name: '-'
  - name: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: )
- uid: NodaTime.LocalDate.op_Equality*
  commentId: Overload:NodaTime.LocalDate.op_Equality
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_op_Equality_NodaTime_LocalDate_NodaTime_LocalDate_
  name: operator ==
  nameWithType: LocalDate.operator ==
  fullName: NodaTime.LocalDate.operator ==
  nameWithType.vb: LocalDate.=
  fullName.vb: NodaTime.LocalDate.=
  name.vb: =
  spec.csharp:
  - name: operator
  - name: " "
  - uid: NodaTime.LocalDate.op_Equality*
    name: ==
    href: NodaTime.LocalDate.html#NodaTime_LocalDate_op_Equality_NodaTime_LocalDate_NodaTime_LocalDate_
- uid: System.Numerics.IEqualityOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}.op_Equality(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:System.Numerics.IEqualityOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}.op_Equality(NodaTime.LocalDate,NodaTime.LocalDate)
  parent: System.Numerics.IEqualityOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}
  definition: System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_equality
  name: operator ==(LocalDate, LocalDate)
  nameWithType: IEqualityOperators<LocalDate, LocalDate, bool>.operator ==(LocalDate, LocalDate)
  fullName: System.Numerics.IEqualityOperators<NodaTime.LocalDate, NodaTime.LocalDate, bool>.operator ==(NodaTime.LocalDate, NodaTime.LocalDate)
  nameWithType.vb: IEqualityOperators(Of LocalDate, LocalDate, Boolean).=(LocalDate, LocalDate)
  fullName.vb: System.Numerics.IEqualityOperators(Of NodaTime.LocalDate, NodaTime.LocalDate, Boolean).=(NodaTime.LocalDate, NodaTime.LocalDate)
  name.vb: =(LocalDate, LocalDate)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IEqualityOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}.op_Equality(NodaTime.LocalDate,NodaTime.LocalDate)
    name: ==
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_equality
  - name: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: )
  spec.vb:
  - name: =
  - name: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)
  commentId: M:System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_equality
  name: operator ==(TSelf, TOther)
  nameWithType: IEqualityOperators<TSelf, TOther, TResult>.operator ==(TSelf, TOther)
  fullName: System.Numerics.IEqualityOperators<TSelf, TOther, TResult>.operator ==(TSelf, TOther)
  nameWithType.vb: IEqualityOperators(Of TSelf, TOther, TResult).=(TSelf, TOther)
  fullName.vb: System.Numerics.IEqualityOperators(Of TSelf, TOther, TResult).=(TSelf, TOther)
  name.vb: =(TSelf, TOther)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)
    name: ==
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_equality
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: =
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: NodaTime.LocalDate.op_Inequality*
  commentId: Overload:NodaTime.LocalDate.op_Inequality
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_op_Inequality_NodaTime_LocalDate_NodaTime_LocalDate_
  name: operator !=
  nameWithType: LocalDate.operator !=
  fullName: NodaTime.LocalDate.operator !=
  nameWithType.vb: LocalDate.<>
  fullName.vb: NodaTime.LocalDate.<>
  name.vb: <>
  spec.csharp:
  - name: operator
  - name: " "
  - uid: NodaTime.LocalDate.op_Inequality*
    name: '!='
    href: NodaTime.LocalDate.html#NodaTime_LocalDate_op_Inequality_NodaTime_LocalDate_NodaTime_LocalDate_
- uid: System.Numerics.IEqualityOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}.op_Inequality(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:System.Numerics.IEqualityOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}.op_Inequality(NodaTime.LocalDate,NodaTime.LocalDate)
  parent: System.Numerics.IEqualityOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}
  definition: System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_inequality
  name: operator !=(LocalDate, LocalDate)
  nameWithType: IEqualityOperators<LocalDate, LocalDate, bool>.operator !=(LocalDate, LocalDate)
  fullName: System.Numerics.IEqualityOperators<NodaTime.LocalDate, NodaTime.LocalDate, bool>.operator !=(NodaTime.LocalDate, NodaTime.LocalDate)
  nameWithType.vb: IEqualityOperators(Of LocalDate, LocalDate, Boolean).<>(LocalDate, LocalDate)
  fullName.vb: System.Numerics.IEqualityOperators(Of NodaTime.LocalDate, NodaTime.LocalDate, Boolean).<>(NodaTime.LocalDate, NodaTime.LocalDate)
  name.vb: <>(LocalDate, LocalDate)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IEqualityOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}.op_Inequality(NodaTime.LocalDate,NodaTime.LocalDate)
    name: '!='
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_inequality
  - name: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: )
  spec.vb:
  - name: <>
  - name: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: )
- uid: System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)
  commentId: M:System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_inequality
  name: operator !=(TSelf, TOther)
  nameWithType: IEqualityOperators<TSelf, TOther, TResult>.operator !=(TSelf, TOther)
  fullName: System.Numerics.IEqualityOperators<TSelf, TOther, TResult>.operator !=(TSelf, TOther)
  nameWithType.vb: IEqualityOperators(Of TSelf, TOther, TResult).<>(TSelf, TOther)
  fullName.vb: System.Numerics.IEqualityOperators(Of TSelf, TOther, TResult).<>(TSelf, TOther)
  name.vb: <>(TSelf, TOther)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)
    name: '!='
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_inequality
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: <>
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: NodaTime.LocalDate.op_LessThan*
  commentId: Overload:NodaTime.LocalDate.op_LessThan
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_op_LessThan_NodaTime_LocalDate_NodaTime_LocalDate_
  name: operator <
  nameWithType: LocalDate.operator <
  fullName: NodaTime.LocalDate.operator <
  nameWithType.vb: LocalDate.<
  fullName.vb: NodaTime.LocalDate.<
  name.vb: <
  spec.csharp:
  - name: operator
  - name: " "
  - uid: NodaTime.LocalDate.op_LessThan*
    name: <
    href: NodaTime.LocalDate.html#NodaTime_LocalDate_op_LessThan_NodaTime_LocalDate_NodaTime_LocalDate_
- uid: System.Numerics.IComparisonOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}.op_LessThan(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:System.Numerics.IComparisonOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}.op_LessThan(NodaTime.LocalDate,NodaTime.LocalDate)
  parent: System.Numerics.IComparisonOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}
  definition: System.Numerics.IComparisonOperators`3.op_LessThan(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_lessthan
  name: operator <(LocalDate, LocalDate)
  nameWithType: IComparisonOperators<LocalDate, LocalDate, bool>.operator <(LocalDate, LocalDate)
  fullName: System.Numerics.IComparisonOperators<NodaTime.LocalDate, NodaTime.LocalDate, bool>.operator <(NodaTime.LocalDate, NodaTime.LocalDate)
  nameWithType.vb: IComparisonOperators(Of LocalDate, LocalDate, Boolean).<(LocalDate, LocalDate)
  fullName.vb: System.Numerics.IComparisonOperators(Of NodaTime.LocalDate, NodaTime.LocalDate, Boolean).<(NodaTime.LocalDate, NodaTime.LocalDate)
  name.vb: <(LocalDate, LocalDate)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IComparisonOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}.op_LessThan(NodaTime.LocalDate,NodaTime.LocalDate)
    name: <
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_lessthan
  - name: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: )
  spec.vb:
  - name: <
  - name: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: )
- uid: System.Numerics.IComparisonOperators`3.op_LessThan(`0,`1)
  commentId: M:System.Numerics.IComparisonOperators`3.op_LessThan(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_lessthan
  name: operator <(TSelf, TOther)
  nameWithType: IComparisonOperators<TSelf, TOther, TResult>.operator <(TSelf, TOther)
  fullName: System.Numerics.IComparisonOperators<TSelf, TOther, TResult>.operator <(TSelf, TOther)
  nameWithType.vb: IComparisonOperators(Of TSelf, TOther, TResult).<(TSelf, TOther)
  fullName.vb: System.Numerics.IComparisonOperators(Of TSelf, TOther, TResult).<(TSelf, TOther)
  name.vb: <(TSelf, TOther)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IComparisonOperators`3.op_LessThan(`0,`1)
    name: <
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_lessthan
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: <
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: NodaTime.LocalDate.op_LessThanOrEqual*
  commentId: Overload:NodaTime.LocalDate.op_LessThanOrEqual
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_op_LessThanOrEqual_NodaTime_LocalDate_NodaTime_LocalDate_
  name: operator <=
  nameWithType: LocalDate.operator <=
  fullName: NodaTime.LocalDate.operator <=
  nameWithType.vb: LocalDate.<=
  fullName.vb: NodaTime.LocalDate.<=
  name.vb: <=
  spec.csharp:
  - name: operator
  - name: " "
  - uid: NodaTime.LocalDate.op_LessThanOrEqual*
    name: <=
    href: NodaTime.LocalDate.html#NodaTime_LocalDate_op_LessThanOrEqual_NodaTime_LocalDate_NodaTime_LocalDate_
- uid: System.Numerics.IComparisonOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}.op_LessThanOrEqual(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:System.Numerics.IComparisonOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}.op_LessThanOrEqual(NodaTime.LocalDate,NodaTime.LocalDate)
  parent: System.Numerics.IComparisonOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}
  definition: System.Numerics.IComparisonOperators`3.op_LessThanOrEqual(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_lessthanorequal
  name: operator <=(LocalDate, LocalDate)
  nameWithType: IComparisonOperators<LocalDate, LocalDate, bool>.operator <=(LocalDate, LocalDate)
  fullName: System.Numerics.IComparisonOperators<NodaTime.LocalDate, NodaTime.LocalDate, bool>.operator <=(NodaTime.LocalDate, NodaTime.LocalDate)
  nameWithType.vb: IComparisonOperators(Of LocalDate, LocalDate, Boolean).<=(LocalDate, LocalDate)
  fullName.vb: System.Numerics.IComparisonOperators(Of NodaTime.LocalDate, NodaTime.LocalDate, Boolean).<=(NodaTime.LocalDate, NodaTime.LocalDate)
  name.vb: <=(LocalDate, LocalDate)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IComparisonOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}.op_LessThanOrEqual(NodaTime.LocalDate,NodaTime.LocalDate)
    name: <=
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_lessthanorequal
  - name: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: )
  spec.vb:
  - name: <=
  - name: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: )
- uid: System.Numerics.IComparisonOperators`3.op_LessThanOrEqual(`0,`1)
  commentId: M:System.Numerics.IComparisonOperators`3.op_LessThanOrEqual(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_lessthanorequal
  name: operator <=(TSelf, TOther)
  nameWithType: IComparisonOperators<TSelf, TOther, TResult>.operator <=(TSelf, TOther)
  fullName: System.Numerics.IComparisonOperators<TSelf, TOther, TResult>.operator <=(TSelf, TOther)
  nameWithType.vb: IComparisonOperators(Of TSelf, TOther, TResult).<=(TSelf, TOther)
  fullName.vb: System.Numerics.IComparisonOperators(Of TSelf, TOther, TResult).<=(TSelf, TOther)
  name.vb: <=(TSelf, TOther)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IComparisonOperators`3.op_LessThanOrEqual(`0,`1)
    name: <=
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_lessthanorequal
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: <=
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: NodaTime.LocalDate.op_GreaterThan*
  commentId: Overload:NodaTime.LocalDate.op_GreaterThan
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_op_GreaterThan_NodaTime_LocalDate_NodaTime_LocalDate_
  name: operator >
  nameWithType: LocalDate.operator >
  fullName: NodaTime.LocalDate.operator >
  nameWithType.vb: LocalDate.>
  fullName.vb: NodaTime.LocalDate.>
  name.vb: '>'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: NodaTime.LocalDate.op_GreaterThan*
    name: '>'
    href: NodaTime.LocalDate.html#NodaTime_LocalDate_op_GreaterThan_NodaTime_LocalDate_NodaTime_LocalDate_
- uid: System.Numerics.IComparisonOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}.op_GreaterThan(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:System.Numerics.IComparisonOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}.op_GreaterThan(NodaTime.LocalDate,NodaTime.LocalDate)
  parent: System.Numerics.IComparisonOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}
  definition: System.Numerics.IComparisonOperators`3.op_GreaterThan(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_greaterthan
  name: operator >(LocalDate, LocalDate)
  nameWithType: IComparisonOperators<LocalDate, LocalDate, bool>.operator >(LocalDate, LocalDate)
  fullName: System.Numerics.IComparisonOperators<NodaTime.LocalDate, NodaTime.LocalDate, bool>.operator >(NodaTime.LocalDate, NodaTime.LocalDate)
  nameWithType.vb: IComparisonOperators(Of LocalDate, LocalDate, Boolean).>(LocalDate, LocalDate)
  fullName.vb: System.Numerics.IComparisonOperators(Of NodaTime.LocalDate, NodaTime.LocalDate, Boolean).>(NodaTime.LocalDate, NodaTime.LocalDate)
  name.vb: '>(LocalDate, LocalDate)'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IComparisonOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}.op_GreaterThan(NodaTime.LocalDate,NodaTime.LocalDate)
    name: '>'
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_greaterthan
  - name: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: )
  spec.vb:
  - name: '>'
  - name: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: )
- uid: System.Numerics.IComparisonOperators`3.op_GreaterThan(`0,`1)
  commentId: M:System.Numerics.IComparisonOperators`3.op_GreaterThan(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_greaterthan
  name: operator >(TSelf, TOther)
  nameWithType: IComparisonOperators<TSelf, TOther, TResult>.operator >(TSelf, TOther)
  fullName: System.Numerics.IComparisonOperators<TSelf, TOther, TResult>.operator >(TSelf, TOther)
  nameWithType.vb: IComparisonOperators(Of TSelf, TOther, TResult).>(TSelf, TOther)
  fullName.vb: System.Numerics.IComparisonOperators(Of TSelf, TOther, TResult).>(TSelf, TOther)
  name.vb: '>(TSelf, TOther)'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IComparisonOperators`3.op_GreaterThan(`0,`1)
    name: '>'
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_greaterthan
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: '>'
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: NodaTime.LocalDate.op_GreaterThanOrEqual*
  commentId: Overload:NodaTime.LocalDate.op_GreaterThanOrEqual
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_op_GreaterThanOrEqual_NodaTime_LocalDate_NodaTime_LocalDate_
  name: operator >=
  nameWithType: LocalDate.operator >=
  fullName: NodaTime.LocalDate.operator >=
  nameWithType.vb: LocalDate.>=
  fullName.vb: NodaTime.LocalDate.>=
  name.vb: '>='
  spec.csharp:
  - name: operator
  - name: " "
  - uid: NodaTime.LocalDate.op_GreaterThanOrEqual*
    name: '>='
    href: NodaTime.LocalDate.html#NodaTime_LocalDate_op_GreaterThanOrEqual_NodaTime_LocalDate_NodaTime_LocalDate_
- uid: System.Numerics.IComparisonOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}.op_GreaterThanOrEqual(NodaTime.LocalDate,NodaTime.LocalDate)
  commentId: M:System.Numerics.IComparisonOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}.op_GreaterThanOrEqual(NodaTime.LocalDate,NodaTime.LocalDate)
  parent: System.Numerics.IComparisonOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}
  definition: System.Numerics.IComparisonOperators`3.op_GreaterThanOrEqual(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_greaterthanorequal
  name: operator >=(LocalDate, LocalDate)
  nameWithType: IComparisonOperators<LocalDate, LocalDate, bool>.operator >=(LocalDate, LocalDate)
  fullName: System.Numerics.IComparisonOperators<NodaTime.LocalDate, NodaTime.LocalDate, bool>.operator >=(NodaTime.LocalDate, NodaTime.LocalDate)
  nameWithType.vb: IComparisonOperators(Of LocalDate, LocalDate, Boolean).>=(LocalDate, LocalDate)
  fullName.vb: System.Numerics.IComparisonOperators(Of NodaTime.LocalDate, NodaTime.LocalDate, Boolean).>=(NodaTime.LocalDate, NodaTime.LocalDate)
  name.vb: '>=(LocalDate, LocalDate)'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IComparisonOperators{NodaTime.LocalDate,NodaTime.LocalDate,System.Boolean}.op_GreaterThanOrEqual(NodaTime.LocalDate,NodaTime.LocalDate)
    name: '>='
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_greaterthanorequal
  - name: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: )
  spec.vb:
  - name: '>='
  - name: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: )
- uid: System.Numerics.IComparisonOperators`3.op_GreaterThanOrEqual(`0,`1)
  commentId: M:System.Numerics.IComparisonOperators`3.op_GreaterThanOrEqual(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_greaterthanorequal
  name: operator >=(TSelf, TOther)
  nameWithType: IComparisonOperators<TSelf, TOther, TResult>.operator >=(TSelf, TOther)
  fullName: System.Numerics.IComparisonOperators<TSelf, TOther, TResult>.operator >=(TSelf, TOther)
  nameWithType.vb: IComparisonOperators(Of TSelf, TOther, TResult).>=(TSelf, TOther)
  fullName.vb: System.Numerics.IComparisonOperators(Of TSelf, TOther, TResult).>=(TSelf, TOther)
  name.vb: '>=(TSelf, TOther)'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IComparisonOperators`3.op_GreaterThanOrEqual(`0,`1)
    name: '>='
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_greaterthanorequal
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: '>='
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: NodaTime.LocalDate.CompareTo*
  commentId: Overload:NodaTime.LocalDate.CompareTo
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_CompareTo_NodaTime_LocalDate_
  name: CompareTo
  nameWithType: LocalDate.CompareTo
  fullName: NodaTime.LocalDate.CompareTo
- uid: System.IComparable{NodaTime.LocalDate}.CompareTo(NodaTime.LocalDate)
  commentId: M:System.IComparable{NodaTime.LocalDate}.CompareTo(NodaTime.LocalDate)
  parent: System.IComparable{NodaTime.LocalDate}
  definition: System.IComparable`1.CompareTo(`0)
  href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  name: CompareTo(LocalDate)
  nameWithType: IComparable<LocalDate>.CompareTo(LocalDate)
  fullName: System.IComparable<NodaTime.LocalDate>.CompareTo(NodaTime.LocalDate)
  nameWithType.vb: IComparable(Of LocalDate).CompareTo(LocalDate)
  fullName.vb: System.IComparable(Of NodaTime.LocalDate).CompareTo(NodaTime.LocalDate)
  spec.csharp:
  - uid: System.IComparable{NodaTime.LocalDate}.CompareTo(NodaTime.LocalDate)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  - name: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: )
  spec.vb:
  - uid: System.IComparable{NodaTime.LocalDate}.CompareTo(NodaTime.LocalDate)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  - name: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  - name: (
  - name: T
  - name: )
- uid: System.IComparable.CompareTo(System.Object)
  commentId: M:System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable.compareto
  name: CompareTo(object)
  nameWithType: IComparable.CompareTo(object)
  fullName: System.IComparable.CompareTo(object)
  nameWithType.vb: IComparable.CompareTo(Object)
  fullName.vb: System.IComparable.CompareTo(Object)
  name.vb: CompareTo(Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable.compareto
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable.compareto
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: NodaTime.LocalDate.System#IComparable#CompareTo*
  commentId: Overload:NodaTime.LocalDate.System#IComparable#CompareTo
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable
  name: IComparable.CompareTo
  nameWithType: LocalDate.IComparable.CompareTo
  fullName: NodaTime.LocalDate.System.IComparable.CompareTo
  spec.csharp:
  - uid: System.IComparable*
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable
  - name: .
  - uid: NodaTime.LocalDate.System#IComparable#CompareTo*
    name: CompareTo
    href: NodaTime.LocalDate.html#NodaTime_LocalDate_System_IComparable_CompareTo_System_Object_
- uid: NodaTime.LocalDate.Max*
  commentId: Overload:NodaTime.LocalDate.Max
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_Max_NodaTime_LocalDate_NodaTime_LocalDate_
  name: Max
  nameWithType: LocalDate.Max
  fullName: NodaTime.LocalDate.Max
- uid: NodaTime.LocalDate.Min*
  commentId: Overload:NodaTime.LocalDate.Min
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_Min_NodaTime_LocalDate_NodaTime_LocalDate_
  name: Min
  nameWithType: LocalDate.Min
  fullName: NodaTime.LocalDate.Min
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
- uid: NodaTime.LocalDate.GetHashCode*
  commentId: Overload:NodaTime.LocalDate.GetHashCode
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_GetHashCode
  name: GetHashCode
  nameWithType: LocalDate.GetHashCode
  fullName: NodaTime.LocalDate.GetHashCode
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: NodaTime.LocalDate.Equals*
  commentId: Overload:NodaTime.LocalDate.Equals
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_Equals_System_Object_
  name: Equals
  nameWithType: LocalDate.Equals
  fullName: NodaTime.LocalDate.Equals
- uid: System.IEquatable{NodaTime.LocalDate}.Equals(NodaTime.LocalDate)
  commentId: M:System.IEquatable{NodaTime.LocalDate}.Equals(NodaTime.LocalDate)
  parent: System.IEquatable{NodaTime.LocalDate}
  definition: System.IEquatable`1.Equals(`0)
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(LocalDate)
  nameWithType: IEquatable<LocalDate>.Equals(LocalDate)
  fullName: System.IEquatable<NodaTime.LocalDate>.Equals(NodaTime.LocalDate)
  nameWithType.vb: IEquatable(Of LocalDate).Equals(LocalDate)
  fullName.vb: System.IEquatable(Of NodaTime.LocalDate).Equals(NodaTime.LocalDate)
  spec.csharp:
  - uid: System.IEquatable{NodaTime.LocalDate}.Equals(NodaTime.LocalDate)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: )
  spec.vb:
  - uid: System.IEquatable{NodaTime.LocalDate}.Equals(NodaTime.LocalDate)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
- uid: NodaTime.ZonedDateTime
  commentId: T:NodaTime.ZonedDateTime
  parent: NodaTime
  href: NodaTime.ZonedDateTime.html
  name: ZonedDateTime
  nameWithType: ZonedDateTime
  fullName: NodaTime.ZonedDateTime
- uid: NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)
  commentId: M:NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)
  parent: NodaTime.DateTimeZone
  href: NodaTime.DateTimeZone.html#NodaTime_DateTimeZone_AtStartOfDay_NodaTime_LocalDate_
  name: AtStartOfDay(LocalDate)
  nameWithType: DateTimeZone.AtStartOfDay(LocalDate)
  fullName: NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)
  spec.csharp:
  - uid: NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)
    name: AtStartOfDay
    href: NodaTime.DateTimeZone.html#NodaTime_DateTimeZone_AtStartOfDay_NodaTime_LocalDate_
  - name: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: )
  spec.vb:
  - uid: NodaTime.DateTimeZone.AtStartOfDay(NodaTime.LocalDate)
    name: AtStartOfDay
    href: NodaTime.DateTimeZone.html#NodaTime_DateTimeZone_AtStartOfDay_NodaTime_LocalDate_
  - name: (
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: )
- uid: NodaTime.SkippedTimeException
  commentId: T:NodaTime.SkippedTimeException
  href: NodaTime.SkippedTimeException.html
  name: SkippedTimeException
  nameWithType: SkippedTimeException
  fullName: NodaTime.SkippedTimeException
- uid: NodaTime.LocalDate.AtStartOfDayInZone*
  commentId: Overload:NodaTime.LocalDate.AtStartOfDayInZone
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_AtStartOfDayInZone_NodaTime_DateTimeZone_
  name: AtStartOfDayInZone
  nameWithType: LocalDate.AtStartOfDayInZone
  fullName: NodaTime.LocalDate.AtStartOfDayInZone
- uid: NodaTime.DateTimeZone
  commentId: T:NodaTime.DateTimeZone
  parent: NodaTime
  href: NodaTime.DateTimeZone.html
  name: DateTimeZone
  nameWithType: DateTimeZone
  fullName: NodaTime.DateTimeZone
- uid: NodaTime.LocalDate.WithCalendar*
  commentId: Overload:NodaTime.LocalDate.WithCalendar
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_WithCalendar_NodaTime_CalendarSystem_
  name: WithCalendar
  nameWithType: LocalDate.WithCalendar
  fullName: NodaTime.LocalDate.WithCalendar
- uid: NodaTime.LocalDate.PlusYears*
  commentId: Overload:NodaTime.LocalDate.PlusYears
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_PlusYears_System_Int32_
  name: PlusYears
  nameWithType: LocalDate.PlusYears
  fullName: NodaTime.LocalDate.PlusYears
- uid: NodaTime.LocalDate.PlusMonths*
  commentId: Overload:NodaTime.LocalDate.PlusMonths
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_PlusMonths_System_Int32_
  name: PlusMonths
  nameWithType: LocalDate.PlusMonths
  fullName: NodaTime.LocalDate.PlusMonths
- uid: NodaTime.LocalDate.PlusDays*
  commentId: Overload:NodaTime.LocalDate.PlusDays
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_PlusDays_System_Int32_
  name: PlusDays
  nameWithType: LocalDate.PlusDays
  fullName: NodaTime.LocalDate.PlusDays
- uid: NodaTime.LocalDate.PlusWeeks*
  commentId: Overload:NodaTime.LocalDate.PlusWeeks
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_PlusWeeks_System_Int32_
  name: PlusWeeks
  nameWithType: LocalDate.PlusWeeks
  fullName: NodaTime.LocalDate.PlusWeeks
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.invalidoperationexception
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: NodaTime.LocalDate.Next*
  commentId: Overload:NodaTime.LocalDate.Next
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_Next_NodaTime_IsoDayOfWeek_
  name: Next
  nameWithType: LocalDate.Next
  fullName: NodaTime.LocalDate.Next
- uid: NodaTime.LocalDate.Previous*
  commentId: Overload:NodaTime.LocalDate.Previous
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_Previous_NodaTime_IsoDayOfWeek_
  name: Previous
  nameWithType: LocalDate.Previous
  fullName: NodaTime.LocalDate.Previous
- uid: NodaTime.OffsetDate
  commentId: T:NodaTime.OffsetDate
  parent: NodaTime
  href: NodaTime.OffsetDate.html
  name: OffsetDate
  nameWithType: OffsetDate
  fullName: NodaTime.OffsetDate
- uid: NodaTime.LocalDate.WithOffset*
  commentId: Overload:NodaTime.LocalDate.WithOffset
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_WithOffset_NodaTime_Offset_
  name: WithOffset
  nameWithType: LocalDate.WithOffset
  fullName: NodaTime.LocalDate.WithOffset
- uid: NodaTime.Offset
  commentId: T:NodaTime.Offset
  parent: NodaTime
  href: NodaTime.Offset.html
  name: Offset
  nameWithType: Offset
  fullName: NodaTime.Offset
- uid: NodaTime.LocalDate.At*
  commentId: Overload:NodaTime.LocalDate.At
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_At_NodaTime_LocalTime_
  name: At
  nameWithType: LocalDate.At
  fullName: NodaTime.LocalDate.At
- uid: NodaTime.LocalDate.With*
  commentId: Overload:NodaTime.LocalDate.With
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_With_System_Func_NodaTime_LocalDate_NodaTime_LocalDate__
  name: With
  nameWithType: LocalDate.With
  fullName: NodaTime.LocalDate.With
- uid: System.Func{NodaTime.LocalDate,NodaTime.LocalDate}
  commentId: T:System.Func{NodaTime.LocalDate,NodaTime.LocalDate}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<LocalDate, LocalDate>
  nameWithType: Func<LocalDate, LocalDate>
  fullName: System.Func<NodaTime.LocalDate, NodaTime.LocalDate>
  nameWithType.vb: Func(Of LocalDate, LocalDate)
  fullName.vb: System.Func(Of NodaTime.LocalDate, NodaTime.LocalDate)
  name.vb: Func(Of LocalDate, LocalDate)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: ','
  - name: " "
  - uid: NodaTime.LocalDate
    name: LocalDate
    href: NodaTime.LocalDate.html
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NodaTime.LocalDate.Deconstruct*
  commentId: Overload:NodaTime.LocalDate.Deconstruct
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_Deconstruct_System_Int32__System_Int32__System_Int32__
  name: Deconstruct
  nameWithType: LocalDate.Deconstruct
  fullName: NodaTime.LocalDate.Deconstruct
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
- uid: NodaTime.LocalDate.ToString*
  commentId: Overload:NodaTime.LocalDate.ToString
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_ToString
  name: ToString
  nameWithType: LocalDate.ToString
  fullName: NodaTime.LocalDate.ToString
- uid: System.IFormatProvider
  commentId: T:System.IFormatProvider
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iformatprovider
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)
  parent: System.IFormattable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iformattable.tostring
  name: ToString(string, IFormatProvider)
  nameWithType: IFormattable.ToString(string, IFormatProvider)
  fullName: System.IFormattable.ToString(string, System.IFormatProvider)
  nameWithType.vb: IFormattable.ToString(String, IFormatProvider)
  fullName.vb: System.IFormattable.ToString(String, System.IFormatProvider)
  name.vb: ToString(String, IFormatProvider)
  spec.csharp:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iformattable.tostring
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.IFormatProvider
    name: IFormatProvider
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iformatprovider
  - name: )
  spec.vb:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iformattable.tostring
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.IFormatProvider
    name: IFormatProvider
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iformatprovider
  - name: )
- uid: System.Xml.Serialization.XmlSchemaExporter
  commentId: T:System.Xml.Serialization.XmlSchemaExporter
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.xmlschemaexporter
  name: XmlSchemaExporter
  nameWithType: XmlSchemaExporter
  fullName: System.Xml.Serialization.XmlSchemaExporter
- uid: NodaTime.LocalDate.AddSchema*
  commentId: Overload:NodaTime.LocalDate.AddSchema
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_AddSchema_System_Xml_Schema_XmlSchemaSet_
  name: AddSchema
  nameWithType: LocalDate.AddSchema
  fullName: NodaTime.LocalDate.AddSchema
- uid: System.Xml.Schema.XmlSchemaSet
  commentId: T:System.Xml.Schema.XmlSchemaSet
  parent: System.Xml.Schema
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.schema.xmlschemaset
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
- uid: System.Xml.XmlQualifiedName
  commentId: T:System.Xml.XmlQualifiedName
  parent: System.Xml
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.xmlqualifiedname
  name: XmlQualifiedName
  nameWithType: XmlQualifiedName
  fullName: System.Xml.XmlQualifiedName
- uid: System.Xml.Schema
  commentId: N:System.Xml.Schema
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Xml.Schema
  nameWithType: System.Xml.Schema
  fullName: System.Xml.Schema
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Xml
    name: Xml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml
  - name: .
  - uid: System.Xml.Schema
    name: Schema
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.schema
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Xml
    name: Xml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml
  - name: .
  - uid: System.Xml.Schema
    name: Schema
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.schema
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Xml
    name: Xml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Xml
    name: Xml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml
- uid: System.Xml.Serialization.XmlSchemaProviderAttribute
  commentId: T:System.Xml.Serialization.XmlSchemaProviderAttribute
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.xmlschemaproviderattribute
  name: XmlSchemaProviderAttribute
  nameWithType: XmlSchemaProviderAttribute
  fullName: System.Xml.Serialization.XmlSchemaProviderAttribute
- uid: System.Xml.Schema.XmlSchema
  commentId: T:System.Xml.Schema.XmlSchema
  parent: System.Xml.Schema
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.schema.xmlschema
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema
- uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  commentId: M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable.writexml
  name: WriteXml(XmlWriter)
  nameWithType: IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable.writexml
  - name: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.xmlwriter
  - name: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable.writexml
  - name: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.xmlwriter
  - name: )
- uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  commentId: M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable.readxml
  name: ReadXml(XmlReader)
  nameWithType: IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable.readxml
  - name: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.xmlreader
  - name: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable.readxml
  - name: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.xmlreader
  - name: )
- uid: NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#GetSchema*
  commentId: Overload:NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#GetSchema
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable
  name: IXmlSerializable.GetSchema
  nameWithType: LocalDate.IXmlSerializable.GetSchema
  fullName: NodaTime.LocalDate.System.Xml.Serialization.IXmlSerializable.GetSchema
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable*
    name: IXmlSerializable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable
  - name: .
  - uid: NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#GetSchema*
    name: GetSchema
    href: NodaTime.LocalDate.html#NodaTime_LocalDate_System_Xml_Serialization_IXmlSerializable_GetSchema
- uid: System.Xml.XmlReader
  commentId: T:System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.xmlreader
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#ReadXml*
  commentId: Overload:NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#ReadXml
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable
  name: IXmlSerializable.ReadXml
  nameWithType: LocalDate.IXmlSerializable.ReadXml
  fullName: NodaTime.LocalDate.System.Xml.Serialization.IXmlSerializable.ReadXml
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable*
    name: IXmlSerializable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable
  - name: .
  - uid: NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#ReadXml*
    name: ReadXml
    href: NodaTime.LocalDate.html#NodaTime_LocalDate_System_Xml_Serialization_IXmlSerializable_ReadXml_System_Xml_XmlReader_
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.xmlwriter
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#WriteXml*
  commentId: Overload:NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#WriteXml
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable
  name: IXmlSerializable.WriteXml
  nameWithType: LocalDate.IXmlSerializable.WriteXml
  fullName: NodaTime.LocalDate.System.Xml.Serialization.IXmlSerializable.WriteXml
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable*
    name: IXmlSerializable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable
  - name: .
  - uid: NodaTime.LocalDate.System#Xml#Serialization#IXmlSerializable#WriteXml*
    name: WriteXml
    href: NodaTime.LocalDate.html#NodaTime_LocalDate_System_Xml_Serialization_IXmlSerializable_WriteXml_System_Xml_XmlWriter_
- uid: System.DateOnly
  commentId: T:System.DateOnly
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.dateonly
  name: DateOnly
  nameWithType: DateOnly
  fullName: System.DateOnly
- uid: NodaTime.LocalDate.ToDateOnly*
  commentId: Overload:NodaTime.LocalDate.ToDateOnly
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_ToDateOnly
  name: ToDateOnly
  nameWithType: LocalDate.ToDateOnly
  fullName: NodaTime.LocalDate.ToDateOnly
- uid: NodaTime.LocalDate.FromDateOnly*
  commentId: Overload:NodaTime.LocalDate.FromDateOnly
  href: NodaTime.LocalDate.html#NodaTime_LocalDate_FromDateOnly_System_DateOnly_
  name: FromDateOnly
  nameWithType: LocalDate.FromDateOnly
  fullName: NodaTime.LocalDate.FromDateOnly
shouldSkipMarkup: true
