### YamlMime:ManagedReference
items:
- uid: NodaTime.Text.UnparsableValueException
  commentId: T:NodaTime.Text.UnparsableValueException
  id: UnparsableValueException
  parent: NodaTime.Text
  children:
  - NodaTime.Text.UnparsableValueException.#ctor
  - NodaTime.Text.UnparsableValueException.#ctor(System.String)
  - NodaTime.Text.UnparsableValueException.#ctor(System.String,System.Exception)
  - NodaTime.Text.UnparsableValueException.#ctor(System.String,System.String,System.Int32)
  - NodaTime.Text.UnparsableValueException.#ctor(System.String,System.String,System.Int32,System.Exception)
  - NodaTime.Text.UnparsableValueException.Index
  - NodaTime.Text.UnparsableValueException.Value
  langs:
  - csharp
  - vb
  name: UnparsableValueException
  nameWithType: UnparsableValueException
  fullName: NodaTime.Text.UnparsableValueException
  type: Class
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: Exception thrown to indicate that the specified value could not be parsed.
  example: []
  syntax:
    content: 'public sealed class UnparsableValueException : FormatException, ISerializable'
    content.vb: Public NotInheritable Class UnparsableValueException Inherits FormatException Implements ISerializable
  inheritance:
  - System.Object
  - System.Exception
  - System.SystemException
  - System.FormatException
  implements:
  - System.Runtime.Serialization.ISerializable
  inheritedMembers:
  - System.Exception.GetBaseException
  - System.Exception.GetType
  - System.Exception.ToString
  - System.Exception.Data
  - System.Exception.HelpLink
  - System.Exception.HResult
  - System.Exception.InnerException
  - System.Exception.Message
  - System.Exception.Source
  - System.Exception.StackTrace
  - System.Exception.TargetSite
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.ReferenceEquals(System.Object,System.Object)
- uid: NodaTime.Text.UnparsableValueException.#ctor
  commentId: M:NodaTime.Text.UnparsableValueException.#ctor
  id: '#ctor'
  parent: NodaTime.Text.UnparsableValueException
  langs:
  - csharp
  - vb
  name: UnparsableValueException()
  nameWithType: UnparsableValueException.UnparsableValueException()
  fullName: NodaTime.Text.UnparsableValueException.UnparsableValueException()
  type: Constructor
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: >-
    Creates a new UnparsableValueException with no message, value or index.

    <xref href="NodaTime.Text.UnparsableValueException.Value" data-throw-if-not-resolved="false"></xref> will be an empty string, and <xref href="NodaTime.Text.UnparsableValueException.Index" data-throw-if-not-resolved="false"></xref> will have a value of -1.
  example: []
  syntax:
    content: >-
      [Obsolete("Use constructors accepting a value")]

      public UnparsableValueException()
    content.vb: >-
      <Obsolete("Use constructors accepting a value")>

      Public Sub New()
  overload: NodaTime.Text.UnparsableValueException.#ctor*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use constructors accepting a value
  nameWithType.vb: UnparsableValueException.New()
  fullName.vb: NodaTime.Text.UnparsableValueException.New()
  name.vb: New()
- uid: NodaTime.Text.UnparsableValueException.#ctor(System.String)
  commentId: M:NodaTime.Text.UnparsableValueException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: NodaTime.Text.UnparsableValueException
  langs:
  - csharp
  - vb
  name: UnparsableValueException(string)
  nameWithType: UnparsableValueException.UnparsableValueException(string)
  fullName: NodaTime.Text.UnparsableValueException.UnparsableValueException(string)
  type: Constructor
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: >-
    Creates a new UnparsableValueException with the given message, but no value or index.

    <xref href="NodaTime.Text.UnparsableValueException.Value" data-throw-if-not-resolved="false"></xref> will be an empty string, and <xref href="NodaTime.Text.UnparsableValueException.Index" data-throw-if-not-resolved="false"></xref> will have a value of -1.
  example: []
  syntax:
    content: >-
      [Obsolete("Use constructors accepting a value")]

      public UnparsableValueException(string message)
    parameters:
    - id: message
      type: System.String
      description: The failure message
    content.vb: >-
      <Obsolete("Use constructors accepting a value")>

      Public Sub New(message As String)
  overload: NodaTime.Text.UnparsableValueException.#ctor*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use constructors accepting a value
  nameWithType.vb: UnparsableValueException.New(String)
  fullName.vb: NodaTime.Text.UnparsableValueException.New(String)
  name.vb: New(String)
- uid: NodaTime.Text.UnparsableValueException.#ctor(System.String,System.Exception)
  commentId: M:NodaTime.Text.UnparsableValueException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: NodaTime.Text.UnparsableValueException
  langs:
  - csharp
  - vb
  name: UnparsableValueException(string, Exception)
  nameWithType: UnparsableValueException.UnparsableValueException(string, Exception)
  fullName: NodaTime.Text.UnparsableValueException.UnparsableValueException(string, System.Exception)
  type: Constructor
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: >-
    Creates a new UnparsableValueException with the given message and base exception, but no value or index.

    <xref href="NodaTime.Text.UnparsableValueException.Value" data-throw-if-not-resolved="false"></xref> will be an empty string, and <xref href="NodaTime.Text.UnparsableValueException.Index" data-throw-if-not-resolved="false"></xref> will have a value of -1.
  example: []
  syntax:
    content: >-
      [Obsolete("Use constructors accepting a value")]

      public UnparsableValueException(string message, Exception innerException)
    parameters:
    - id: message
      type: System.String
      description: The failure message
    - id: innerException
      type: System.Exception
      description: The inner exception
    content.vb: >-
      <Obsolete("Use constructors accepting a value")>

      Public Sub New(message As String, innerException As Exception)
  overload: NodaTime.Text.UnparsableValueException.#ctor*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use constructors accepting a value
  nameWithType.vb: UnparsableValueException.New(String, Exception)
  fullName.vb: NodaTime.Text.UnparsableValueException.New(String, System.Exception)
  name.vb: New(String, Exception)
- uid: NodaTime.Text.UnparsableValueException.#ctor(System.String,System.String,System.Int32)
  commentId: M:NodaTime.Text.UnparsableValueException.#ctor(System.String,System.String,System.Int32)
  id: '#ctor(System.String,System.String,System.Int32)'
  parent: NodaTime.Text.UnparsableValueException
  langs:
  - csharp
  - vb
  name: UnparsableValueException(string, string, int)
  nameWithType: UnparsableValueException.UnparsableValueException(string, string, int)
  fullName: NodaTime.Text.UnparsableValueException.UnparsableValueException(string, string, int)
  type: Constructor
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: >-
    Creates a new UnparsableValueException with the given message, value and index

    at which parsing failed.
  example: []
  syntax:
    content: public UnparsableValueException(string message, string value, int index)
    parameters:
    - id: message
      type: System.String
      description: The failure message
    - id: value
      type: System.String
      description: The value which could not be parsed
    - id: index
      type: System.Int32
      description: The index within the value where parsing failed
    content.vb: Public Sub New(message As String, value As String, index As Integer)
  overload: NodaTime.Text.UnparsableValueException.#ctor*
  nameWithType.vb: UnparsableValueException.New(String, String, Integer)
  fullName.vb: NodaTime.Text.UnparsableValueException.New(String, String, Integer)
  name.vb: New(String, String, Integer)
- uid: NodaTime.Text.UnparsableValueException.#ctor(System.String,System.String,System.Int32,System.Exception)
  commentId: M:NodaTime.Text.UnparsableValueException.#ctor(System.String,System.String,System.Int32,System.Exception)
  id: '#ctor(System.String,System.String,System.Int32,System.Exception)'
  parent: NodaTime.Text.UnparsableValueException
  langs:
  - csharp
  - vb
  name: UnparsableValueException(string, string, int, Exception)
  nameWithType: UnparsableValueException.UnparsableValueException(string, string, int, Exception)
  fullName: NodaTime.Text.UnparsableValueException.UnparsableValueException(string, string, int, System.Exception)
  type: Constructor
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: Creates a new UnparsableValueException with the given message, value, index and inner exception.
  example: []
  syntax:
    content: public UnparsableValueException(string message, string value, int index, Exception innerException)
    parameters:
    - id: message
      type: System.String
      description: The failure message
    - id: value
      type: System.String
      description: The value which could not be parsed
    - id: index
      type: System.Int32
      description: The index within the value where parsing failed
    - id: innerException
      type: System.Exception
      description: The inner exception
    content.vb: Public Sub New(message As String, value As String, index As Integer, innerException As Exception)
  overload: NodaTime.Text.UnparsableValueException.#ctor*
  nameWithType.vb: UnparsableValueException.New(String, String, Integer, Exception)
  fullName.vb: NodaTime.Text.UnparsableValueException.New(String, String, Integer, System.Exception)
  name.vb: New(String, String, Integer, Exception)
- uid: NodaTime.Text.UnparsableValueException.Value
  commentId: P:NodaTime.Text.UnparsableValueException.Value
  id: Value
  parent: NodaTime.Text.UnparsableValueException
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: UnparsableValueException.Value
  fullName: NodaTime.Text.UnparsableValueException.Value
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: The value which could not be parsed.
  example: []
  syntax:
    content: public string Value { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Value As String
  overload: NodaTime.Text.UnparsableValueException.Value*
- uid: NodaTime.Text.UnparsableValueException.Index
  commentId: P:NodaTime.Text.UnparsableValueException.Index
  id: Index
  parent: NodaTime.Text.UnparsableValueException
  langs:
  - csharp
  - vb
  name: Index
  nameWithType: UnparsableValueException.Index
  fullName: NodaTime.Text.UnparsableValueException.Index
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: >-
    The index within the value where parsing failed.

    This will be -1 if parsing failed before examining any text,

    for example because parsing was requested on a format-only pattern, or

    the value to be parsed was empty.
  example: []
  syntax:
    content: public int Index { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property Index As Integer
  overload: NodaTime.Text.UnparsableValueException.Index*
references:
- uid: NodaTime.Text
  commentId: N:NodaTime.Text
  href: NodaTime.html
  name: NodaTime.Text
  nameWithType: NodaTime.Text
  fullName: NodaTime.Text
  spec.csharp:
  - uid: NodaTime
    name: NodaTime
    href: NodaTime.html
  - name: .
  - uid: NodaTime.Text
    name: Text
    href: NodaTime.Text.html
  spec.vb:
  - uid: NodaTime
    name: NodaTime
    href: NodaTime.html
  - name: .
  - uid: NodaTime.Text
    name: Text
    href: NodaTime.Text.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.exception
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.SystemException
  commentId: T:System.SystemException
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.systemexception
  name: SystemException
  nameWithType: SystemException
  fullName: System.SystemException
- uid: System.FormatException
  commentId: T:System.FormatException
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.formatexception
  name: FormatException
  nameWithType: FormatException
  fullName: System.FormatException
- uid: System.Runtime.Serialization.ISerializable
  commentId: T:System.Runtime.Serialization.ISerializable
  parent: System.Runtime.Serialization
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.runtime.serialization.iserializable
  name: ISerializable
  nameWithType: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
- uid: System.Exception.GetBaseException
  commentId: M:System.Exception.GetBaseException
  parent: System.Exception
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.exception.getbaseexception
  name: GetBaseException()
  nameWithType: Exception.GetBaseException()
  fullName: System.Exception.GetBaseException()
  spec.csharp:
  - uid: System.Exception.GetBaseException
    name: GetBaseException
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.exception.getbaseexception
  - name: (
  - name: )
  spec.vb:
  - uid: System.Exception.GetBaseException
    name: GetBaseException
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.exception.getbaseexception
  - name: (
  - name: )
- uid: System.Exception.GetType
  commentId: M:System.Exception.GetType
  parent: System.Exception
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.exception.gettype
  name: GetType()
  nameWithType: Exception.GetType()
  fullName: System.Exception.GetType()
  spec.csharp:
  - uid: System.Exception.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.exception.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Exception.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.exception.gettype
  - name: (
  - name: )
- uid: System.Exception.ToString
  commentId: M:System.Exception.ToString
  parent: System.Exception
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.exception.tostring
  name: ToString()
  nameWithType: Exception.ToString()
  fullName: System.Exception.ToString()
  spec.csharp:
  - uid: System.Exception.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.exception.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Exception.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.exception.tostring
  - name: (
  - name: )
- uid: System.Exception.Data
  commentId: P:System.Exception.Data
  parent: System.Exception
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.exception.data
  name: Data
  nameWithType: Exception.Data
  fullName: System.Exception.Data
- uid: System.Exception.HelpLink
  commentId: P:System.Exception.HelpLink
  parent: System.Exception
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.exception.helplink
  name: HelpLink
  nameWithType: Exception.HelpLink
  fullName: System.Exception.HelpLink
- uid: System.Exception.HResult
  commentId: P:System.Exception.HResult
  parent: System.Exception
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.exception.hresult
  name: HResult
  nameWithType: Exception.HResult
  fullName: System.Exception.HResult
- uid: System.Exception.InnerException
  commentId: P:System.Exception.InnerException
  parent: System.Exception
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.exception.innerexception
  name: InnerException
  nameWithType: Exception.InnerException
  fullName: System.Exception.InnerException
- uid: System.Exception.Message
  commentId: P:System.Exception.Message
  parent: System.Exception
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.exception.message
  name: Message
  nameWithType: Exception.Message
  fullName: System.Exception.Message
- uid: System.Exception.Source
  commentId: P:System.Exception.Source
  parent: System.Exception
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.exception.source
  name: Source
  nameWithType: Exception.Source
  fullName: System.Exception.Source
- uid: System.Exception.StackTrace
  commentId: P:System.Exception.StackTrace
  parent: System.Exception
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.exception.stacktrace
  name: StackTrace
  nameWithType: Exception.StackTrace
  fullName: System.Exception.StackTrace
- uid: System.Exception.TargetSite
  commentId: P:System.Exception.TargetSite
  parent: System.Exception
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.exception.targetsite
  name: TargetSite
  nameWithType: Exception.TargetSite
  fullName: System.Exception.TargetSite
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Runtime.Serialization
  commentId: N:System.Runtime.Serialization
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Runtime.Serialization
  nameWithType: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Runtime
    name: Runtime
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.runtime
  - name: .
  - uid: System.Runtime.Serialization
    name: Serialization
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.runtime.serialization
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Runtime
    name: Runtime
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.runtime
  - name: .
  - uid: System.Runtime.Serialization
    name: Serialization
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.runtime.serialization
- uid: NodaTime.Text.UnparsableValueException.Value
  commentId: P:NodaTime.Text.UnparsableValueException.Value
  href: NodaTime.Text.UnparsableValueException.html#NodaTime_Text_UnparsableValueException_Value
  name: Value
  nameWithType: UnparsableValueException.Value
  fullName: NodaTime.Text.UnparsableValueException.Value
- uid: NodaTime.Text.UnparsableValueException.Index
  commentId: P:NodaTime.Text.UnparsableValueException.Index
  href: NodaTime.Text.UnparsableValueException.html#NodaTime_Text_UnparsableValueException_Index
  name: Index
  nameWithType: UnparsableValueException.Index
  fullName: NodaTime.Text.UnparsableValueException.Index
- uid: NodaTime.Text.UnparsableValueException.#ctor*
  commentId: Overload:NodaTime.Text.UnparsableValueException.#ctor
  href: NodaTime.Text.UnparsableValueException.html#NodaTime_Text_UnparsableValueException__ctor
  name: UnparsableValueException
  nameWithType: UnparsableValueException.UnparsableValueException
  fullName: NodaTime.Text.UnparsableValueException.UnparsableValueException
  nameWithType.vb: UnparsableValueException.New
  fullName.vb: NodaTime.Text.UnparsableValueException.New
  name.vb: New
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: NodaTime.Text.UnparsableValueException.Value*
  commentId: Overload:NodaTime.Text.UnparsableValueException.Value
  href: NodaTime.Text.UnparsableValueException.html#NodaTime_Text_UnparsableValueException_Value
  name: Value
  nameWithType: UnparsableValueException.Value
  fullName: NodaTime.Text.UnparsableValueException.Value
- uid: NodaTime.Text.UnparsableValueException.Index*
  commentId: Overload:NodaTime.Text.UnparsableValueException.Index
  href: NodaTime.Text.UnparsableValueException.html#NodaTime_Text_UnparsableValueException_Index
  name: Index
  nameWithType: UnparsableValueException.Index
  fullName: NodaTime.Text.UnparsableValueException.Index
shouldSkipMarkup: true
