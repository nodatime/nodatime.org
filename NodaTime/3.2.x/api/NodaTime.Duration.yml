### YamlMime:ManagedReference
items:
- uid: NodaTime.Duration
  commentId: T:NodaTime.Duration
  id: Duration
  parent: NodaTime
  children:
  - NodaTime.Duration.Add(NodaTime.Duration,NodaTime.Duration)
  - NodaTime.Duration.AddSchema(System.Xml.Schema.XmlSchemaSet)
  - NodaTime.Duration.AdditiveIdentity
  - NodaTime.Duration.BclCompatibleTicks
  - NodaTime.Duration.CompareTo(NodaTime.Duration)
  - NodaTime.Duration.Days
  - NodaTime.Duration.Divide(NodaTime.Duration,NodaTime.Duration)
  - NodaTime.Duration.Divide(NodaTime.Duration,System.Double)
  - NodaTime.Duration.Divide(NodaTime.Duration,System.Int64)
  - NodaTime.Duration.Epsilon
  - NodaTime.Duration.Equals(NodaTime.Duration)
  - NodaTime.Duration.Equals(System.Object)
  - NodaTime.Duration.FromDays(System.Double)
  - NodaTime.Duration.FromDays(System.Int32)
  - NodaTime.Duration.FromHours(System.Double)
  - NodaTime.Duration.FromHours(System.Int32)
  - NodaTime.Duration.FromMilliseconds(System.Double)
  - NodaTime.Duration.FromMilliseconds(System.Int64)
  - NodaTime.Duration.FromMinutes(System.Double)
  - NodaTime.Duration.FromMinutes(System.Int64)
  - NodaTime.Duration.FromNanoseconds(System.Double)
  - NodaTime.Duration.FromNanoseconds(System.Int128)
  - NodaTime.Duration.FromNanoseconds(System.Int64)
  - NodaTime.Duration.FromNanoseconds(System.Numerics.BigInteger)
  - NodaTime.Duration.FromSeconds(System.Double)
  - NodaTime.Duration.FromSeconds(System.Int64)
  - NodaTime.Duration.FromTicks(System.Double)
  - NodaTime.Duration.FromTicks(System.Int64)
  - NodaTime.Duration.FromTimeSpan(System.TimeSpan)
  - NodaTime.Duration.GetHashCode
  - NodaTime.Duration.Hours
  - NodaTime.Duration.Max(NodaTime.Duration,NodaTime.Duration)
  - NodaTime.Duration.MaxValue
  - NodaTime.Duration.Milliseconds
  - NodaTime.Duration.Min(NodaTime.Duration,NodaTime.Duration)
  - NodaTime.Duration.MinValue
  - NodaTime.Duration.Minus(NodaTime.Duration)
  - NodaTime.Duration.Minutes
  - NodaTime.Duration.Multiply(NodaTime.Duration,System.Double)
  - NodaTime.Duration.Multiply(NodaTime.Duration,System.Int64)
  - NodaTime.Duration.Multiply(System.Double,NodaTime.Duration)
  - NodaTime.Duration.Multiply(System.Int64,NodaTime.Duration)
  - NodaTime.Duration.NanosecondOfDay
  - NodaTime.Duration.Negate(NodaTime.Duration)
  - NodaTime.Duration.Plus(NodaTime.Duration)
  - NodaTime.Duration.Seconds
  - NodaTime.Duration.SubsecondNanoseconds
  - NodaTime.Duration.SubsecondTicks
  - NodaTime.Duration.Subtract(NodaTime.Duration,NodaTime.Duration)
  - NodaTime.Duration.System#IComparable#CompareTo(System.Object)
  - NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#GetSchema
  - NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  - NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  - NodaTime.Duration.ToBigIntegerNanoseconds
  - NodaTime.Duration.ToInt128Nanoseconds
  - NodaTime.Duration.ToInt64Nanoseconds
  - NodaTime.Duration.ToString
  - NodaTime.Duration.ToString(System.String,System.IFormatProvider)
  - NodaTime.Duration.ToTimeSpan
  - NodaTime.Duration.TotalDays
  - NodaTime.Duration.TotalHours
  - NodaTime.Duration.TotalMilliseconds
  - NodaTime.Duration.TotalMinutes
  - NodaTime.Duration.TotalNanoseconds
  - NodaTime.Duration.TotalSeconds
  - NodaTime.Duration.TotalTicks
  - NodaTime.Duration.Zero
  - NodaTime.Duration.op_Addition(NodaTime.Duration,NodaTime.Duration)
  - NodaTime.Duration.op_Division(NodaTime.Duration,NodaTime.Duration)
  - NodaTime.Duration.op_Division(NodaTime.Duration,System.Double)
  - NodaTime.Duration.op_Division(NodaTime.Duration,System.Int64)
  - NodaTime.Duration.op_Equality(NodaTime.Duration,NodaTime.Duration)
  - NodaTime.Duration.op_GreaterThan(NodaTime.Duration,NodaTime.Duration)
  - NodaTime.Duration.op_GreaterThanOrEqual(NodaTime.Duration,NodaTime.Duration)
  - NodaTime.Duration.op_Inequality(NodaTime.Duration,NodaTime.Duration)
  - NodaTime.Duration.op_LessThan(NodaTime.Duration,NodaTime.Duration)
  - NodaTime.Duration.op_LessThanOrEqual(NodaTime.Duration,NodaTime.Duration)
  - NodaTime.Duration.op_Multiply(NodaTime.Duration,System.Double)
  - NodaTime.Duration.op_Multiply(NodaTime.Duration,System.Int64)
  - NodaTime.Duration.op_Multiply(System.Double,NodaTime.Duration)
  - NodaTime.Duration.op_Multiply(System.Int64,NodaTime.Duration)
  - NodaTime.Duration.op_Subtraction(NodaTime.Duration,NodaTime.Duration)
  - NodaTime.Duration.op_UnaryNegation(NodaTime.Duration)
  - NodaTime.Duration.op_UnaryPlus(NodaTime.Duration)
  langs:
  - csharp
  - vb
  name: Duration
  nameWithType: Duration
  fullName: NodaTime.Duration
  type: Struct
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Represents a fixed (and calendar-independent) length of time.
  remarks: >-
    <p>

    A duration is a length of time defined by an integral number of nanoseconds.

    Although durations are usually used with a positive number of nanoseconds, negative durations are valid, and may occur

    naturally when e.g. subtracting a later <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref> from an earlier one.

    </p>

    <p>Equality and ordering are defined in the natural way, simply comparing the number of nanoseconds contained.</p>

    <p>

    A duration represents a fixed length of elapsed time along the time line that occupies the same amount of

    time regardless of when it is applied. In contrast, <xref href="NodaTime.Period" data-throw-if-not-resolved="false"></xref> represents a period of time in

    calendrical terms (years, months, days, and so on) that may vary in elapsed time when applied.

    </p>

    <p>

    In general, use <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> to represent durations applied to global types like <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref>

    and <xref href="NodaTime.ZonedDateTime" data-throw-if-not-resolved="false"></xref>; use <code>Period</code> to represent a period applied to local types like

    <xref href="NodaTime.LocalDateTime" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    The range of valid values of a <code>Duration</code> is greater than the span of time supported by Noda Time - so for

    example, subtracting one <xref href="NodaTime.Instant" data-throw-if-not-resolved="false"></xref> from another will always give a valid <code>Duration</code>. The range

    is also greater than that of <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> (<xref href="System.Int64.MinValue" data-throw-if-not-resolved="false"></xref> ticks to <xref href="System.Int64.MaxValue" data-throw-if-not-resolved="false"></xref> ticks).

    See the user guide for more details of the exact range, but it is not expected that this will ever be exceeded in normal code.

    </p>

    <p>

    Various operations accept or return a <xref href="System.Double" data-throw-if-not-resolved="false"></xref>, in-keeping with durations often being natural lengths

    of time which are imprecisely measured anyway. The implementation of these operations should never result in a not-a-number

    or infinite value, nor do any operations accept not-a-number or infinite values. Additionally, operations involving

    <code>Double</code> have initially been implemented fairly naively; it's possible that future releases will improve the accuracy

    or performance (or both) of various operations.

    </p>

    <p>The default value of this type is <xref href="NodaTime.Duration.Zero" data-throw-if-not-resolved="false"></xref>.</p>
  example: []
  syntax:
    content: >-
      [TypeConverter(typeof(DurationTypeConverter))]

      public readonly struct Duration : IEquatable<Duration>, IComparable<Duration>, IComparable, IXmlSerializable, IFormattable, IAdditionOperators<Duration, Duration, Duration>, ISubtractionOperators<Duration, Duration, Duration>, IUnaryNegationOperators<Duration, Duration>, IUnaryPlusOperators<Duration, Duration>, IComparisonOperators<Duration, Duration, bool>, IEqualityOperators<Duration, Duration, bool>, IMinMaxValue<Duration>, IAdditiveIdentity<Duration, Duration>
    content.vb: >-
      <TypeConverter(GetType(DurationTypeConverter))>

      Public Structure Duration Implements IEquatable(Of Duration), IComparable(Of Duration), IComparable, IXmlSerializable, IFormattable, IAdditionOperators(Of Duration, Duration, Duration), ISubtractionOperators(Of Duration, Duration, Duration), IUnaryNegationOperators(Of Duration, Duration), IUnaryPlusOperators(Of Duration, Duration), IComparisonOperators(Of Duration, Duration, Boolean), IEqualityOperators(Of Duration, Duration, Boolean), IMinMaxValue(Of Duration), IAdditiveIdentity(Of Duration, Duration)
  implements:
  - System.IEquatable{NodaTime.Duration}
  - System.IComparable{NodaTime.Duration}
  - System.IComparable
  - System.Xml.Serialization.IXmlSerializable
  - System.IFormattable
  - System.Numerics.IAdditionOperators{NodaTime.Duration,NodaTime.Duration,NodaTime.Duration}
  - System.Numerics.ISubtractionOperators{NodaTime.Duration,NodaTime.Duration,NodaTime.Duration}
  - System.Numerics.IUnaryNegationOperators{NodaTime.Duration,NodaTime.Duration}
  - System.Numerics.IUnaryPlusOperators{NodaTime.Duration,NodaTime.Duration}
  - System.Numerics.IComparisonOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}
  - System.Numerics.IEqualityOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}
  - System.Numerics.IMinMaxValue{NodaTime.Duration}
  - System.Numerics.IAdditiveIdentity{NodaTime.Duration,NodaTime.Duration}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
- uid: NodaTime.Duration.Zero
  commentId: P:NodaTime.Duration.Zero
  id: Zero
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: Duration.Zero
  fullName: NodaTime.Duration.Zero
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets a zero <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> of 0 nanoseconds.
  example: []
  syntax:
    content: public static Duration Zero { get; }
    parameters: []
    return:
      type: NodaTime.Duration
      description: The zero <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> value.
    content.vb: Public Shared ReadOnly Property Zero As Duration
  overload: NodaTime.Duration.Zero*
- uid: NodaTime.Duration.AdditiveIdentity
  commentId: P:NodaTime.Duration.AdditiveIdentity
  id: AdditiveIdentity
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: AdditiveIdentity
  nameWithType: Duration.AdditiveIdentity
  fullName: NodaTime.Duration.AdditiveIdentity
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the additive identity.
  example: []
  syntax:
    content: public static Duration AdditiveIdentity { get; }
    parameters: []
    return:
      type: NodaTime.Duration
    content.vb: Public Shared ReadOnly Property AdditiveIdentity As Duration
  overload: NodaTime.Duration.AdditiveIdentity*
  implements:
  - System.Numerics.IAdditiveIdentity{NodaTime.Duration,NodaTime.Duration}.AdditiveIdentity
- uid: NodaTime.Duration.Epsilon
  commentId: P:NodaTime.Duration.Epsilon
  id: Epsilon
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Epsilon
  nameWithType: Duration.Epsilon
  fullName: NodaTime.Duration.Epsilon
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets a <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> value equal to 1 nanosecond; the smallest amount by which an instant can vary.
  example: []
  syntax:
    content: public static Duration Epsilon { get; }
    parameters: []
    return:
      type: NodaTime.Duration
      description: A duration representing 1 nanosecond.
    content.vb: Public Shared ReadOnly Property Epsilon As Duration
  overload: NodaTime.Duration.Epsilon*
- uid: NodaTime.Duration.MaxValue
  commentId: P:NodaTime.Duration.MaxValue
  id: MaxValue
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: MaxValue
  nameWithType: Duration.MaxValue
  fullName: NodaTime.Duration.MaxValue
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the maximum value supported by <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static Duration MaxValue { get; }
    parameters: []
    return:
      type: NodaTime.Duration
    content.vb: Public Shared ReadOnly Property MaxValue As Duration
  overload: NodaTime.Duration.MaxValue*
  implements:
  - System.Numerics.IMinMaxValue{NodaTime.Duration}.MaxValue
- uid: NodaTime.Duration.MinValue
  commentId: P:NodaTime.Duration.MinValue
  id: MinValue
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: MinValue
  nameWithType: Duration.MinValue
  fullName: NodaTime.Duration.MinValue
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the minimum (largest negative) value supported by <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static Duration MinValue { get; }
    parameters: []
    return:
      type: NodaTime.Duration
    content.vb: Public Shared ReadOnly Property MinValue As Duration
  overload: NodaTime.Duration.MinValue*
  implements:
  - System.Numerics.IMinMaxValue{NodaTime.Duration}.MinValue
- uid: NodaTime.Duration.Days
  commentId: P:NodaTime.Duration.Days
  id: Days
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Days
  nameWithType: Duration.Days
  fullName: NodaTime.Duration.Days
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Gets the whole number of standard (24 hour) days within this duration. This is truncated towards zero;

    for example, "-1.75 days" and "1.75 days" would have results of -1 and 1 respectively.
  example: []
  syntax:
    content: public int Days { get; }
    parameters: []
    return:
      type: System.Int32
      description: The whole number of days in the duration
    content.vb: Public ReadOnly Property Days As Integer
  overload: NodaTime.Duration.Days*
- uid: NodaTime.Duration.NanosecondOfDay
  commentId: P:NodaTime.Duration.NanosecondOfDay
  id: NanosecondOfDay
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: NanosecondOfDay
  nameWithType: Duration.NanosecondOfDay
  fullName: NodaTime.Duration.NanosecondOfDay
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Gets the number of nanoseconds within the day of this duration. For negative durations, this

    will be negative (or zero).
  example: []
  syntax:
    content: public long NanosecondOfDay { get; }
    parameters: []
    return:
      type: System.Int64
      description: The number of nanoseconds within the day of this duration.
    content.vb: Public ReadOnly Property NanosecondOfDay As Long
  overload: NodaTime.Duration.NanosecondOfDay*
- uid: NodaTime.Duration.Hours
  commentId: P:NodaTime.Duration.Hours
  id: Hours
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Hours
  nameWithType: Duration.Hours
  fullName: NodaTime.Duration.Hours
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: The hour component of this duration, in the range [-23, 23], truncated towards zero.
  example: []
  syntax:
    content: public int Hours { get; }
    parameters: []
    return:
      type: System.Int32
      description: The hour component of the duration, within the day.
    content.vb: Public ReadOnly Property Hours As Integer
  overload: NodaTime.Duration.Hours*
- uid: NodaTime.Duration.Minutes
  commentId: P:NodaTime.Duration.Minutes
  id: Minutes
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Minutes
  nameWithType: Duration.Minutes
  fullName: NodaTime.Duration.Minutes
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: The minute component of this duration, in the range [-59, 59], truncated towards zero.
  example: []
  syntax:
    content: public int Minutes { get; }
    parameters: []
    return:
      type: System.Int32
      description: The minute component of the duration, within the hour.
    content.vb: Public ReadOnly Property Minutes As Integer
  overload: NodaTime.Duration.Minutes*
- uid: NodaTime.Duration.Seconds
  commentId: P:NodaTime.Duration.Seconds
  id: Seconds
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Seconds
  nameWithType: Duration.Seconds
  fullName: NodaTime.Duration.Seconds
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the second component of this duration, in the range [-59, 59], truncated towards zero.
  example: []
  syntax:
    content: public int Seconds { get; }
    parameters: []
    return:
      type: System.Int32
      description: The second component of the duration, within the minute.
    content.vb: Public ReadOnly Property Seconds As Integer
  overload: NodaTime.Duration.Seconds*
- uid: NodaTime.Duration.Milliseconds
  commentId: P:NodaTime.Duration.Milliseconds
  id: Milliseconds
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Milliseconds
  nameWithType: Duration.Milliseconds
  fullName: NodaTime.Duration.Milliseconds
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the subsecond component of this duration, expressed in milliseconds, in the range [-999, 999] and truncated towards zero.
  example: []
  syntax:
    content: public int Milliseconds { get; }
    parameters: []
    return:
      type: System.Int32
      description: The subsecond component of the duration, in milliseconds.
    content.vb: Public ReadOnly Property Milliseconds As Integer
  overload: NodaTime.Duration.Milliseconds*
- uid: NodaTime.Duration.SubsecondTicks
  commentId: P:NodaTime.Duration.SubsecondTicks
  id: SubsecondTicks
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: SubsecondTicks
  nameWithType: Duration.SubsecondTicks
  fullName: NodaTime.Duration.SubsecondTicks
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the subsecond component of this duration, expressed in ticks, in the range [-9999999, 9999999] and truncated towards zero.
  example: []
  syntax:
    content: public int SubsecondTicks { get; }
    parameters: []
    return:
      type: System.Int32
      description: The subsecond component of the duration, in ticks.
    content.vb: Public ReadOnly Property SubsecondTicks As Integer
  overload: NodaTime.Duration.SubsecondTicks*
- uid: NodaTime.Duration.SubsecondNanoseconds
  commentId: P:NodaTime.Duration.SubsecondNanoseconds
  id: SubsecondNanoseconds
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: SubsecondNanoseconds
  nameWithType: Duration.SubsecondNanoseconds
  fullName: NodaTime.Duration.SubsecondNanoseconds
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the subsecond component of this duration, expressed in nanoseconds, in the range [-999999999, 999999999].
  example: []
  syntax:
    content: public int SubsecondNanoseconds { get; }
    parameters: []
    return:
      type: System.Int32
      description: The subsecond component of the duration, in nanoseconds.
    content.vb: Public ReadOnly Property SubsecondNanoseconds As Integer
  overload: NodaTime.Duration.SubsecondNanoseconds*
- uid: NodaTime.Duration.BclCompatibleTicks
  commentId: P:NodaTime.Duration.BclCompatibleTicks
  id: BclCompatibleTicks
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: BclCompatibleTicks
  nameWithType: Duration.BclCompatibleTicks
  fullName: NodaTime.Duration.BclCompatibleTicks
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the total number of ticks in the duration as a 64-bit integer, truncating towards zero where necessary.
  remarks: >-
    <p>

    Within the constraints specified below, this property is intended to be equivalent to

    <xref href="System.TimeSpan.Ticks" data-throw-if-not-resolved="false"></xref>.

    </p>

    <p>

    If the number of nanoseconds in a duration is not a whole number of ticks, it is truncated towards zero.

    For example, durations in the range [-99ns, 99ns] would all count as 0 ticks.

    </p>

    <p>Although this method can overflow, it will only do so in very exceptional cases, with durations

    with a magnitude of more than 29000 Gregorian years or so.</p>
  example: []
  syntax:
    content: public long BclCompatibleTicks { get; }
    parameters: []
    return:
      type: System.Int64
      description: The total number of ticks in the duration.
    content.vb: Public ReadOnly Property BclCompatibleTicks As Long
  overload: NodaTime.Duration.BclCompatibleTicks*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The number of ticks cannot be represented a signed 64-bit integer.
  seealso:
  - linkId: NodaTime.Duration.TotalTicks
    commentId: P:NodaTime.Duration.TotalTicks
- uid: NodaTime.Duration.TotalDays
  commentId: P:NodaTime.Duration.TotalDays
  id: TotalDays
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: TotalDays
  nameWithType: Duration.TotalDays
  fullName: NodaTime.Duration.TotalDays
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the total number of days in this duration, as a <xref href="System.Double" data-throw-if-not-resolved="false"></xref>.
  remarks: >-
    This property is the <code>Duration</code> equivalent of <xref href="System.TimeSpan.TotalDays" data-throw-if-not-resolved="false"></xref>.
        It represents the complete duration in days, rather than only the whole number of
        days. For example, for a duration of 36 hours, this property would return 1.5.
  example: []
  syntax:
    content: public double TotalDays { get; }
    parameters: []
    return:
      type: System.Double
      description: The total number of days in this duration.
    content.vb: Public ReadOnly Property TotalDays As Double
  overload: NodaTime.Duration.TotalDays*
- uid: NodaTime.Duration.TotalHours
  commentId: P:NodaTime.Duration.TotalHours
  id: TotalHours
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: TotalHours
  nameWithType: Duration.TotalHours
  fullName: NodaTime.Duration.TotalHours
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the total number of hours in this duration, as a <xref href="System.Double" data-throw-if-not-resolved="false"></xref>.
  remarks: >-
    This property is the <code>Duration</code> equivalent of <xref href="System.TimeSpan.TotalHours" data-throw-if-not-resolved="false"></xref>.

    Unlike <xref href="NodaTime.Duration.Hours" data-throw-if-not-resolved="false"></xref>, it represents the complete duration in hours rather than the

    whole number of hours as part of the day. So for a duration

    of 1 day, 2 hours and 30 minutes, the <code>Hours</code> property will return 2, but <code>TotalHours</code>

    will return 26.5.
  example: []
  syntax:
    content: public double TotalHours { get; }
    parameters: []
    return:
      type: System.Double
      description: The total number of hours in this duration.
    content.vb: Public ReadOnly Property TotalHours As Double
  overload: NodaTime.Duration.TotalHours*
- uid: NodaTime.Duration.TotalMinutes
  commentId: P:NodaTime.Duration.TotalMinutes
  id: TotalMinutes
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: TotalMinutes
  nameWithType: Duration.TotalMinutes
  fullName: NodaTime.Duration.TotalMinutes
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the total number of minutes in this duration, as a <xref href="System.Double" data-throw-if-not-resolved="false"></xref>.
  remarks: >-
    This property is the <code>Duration</code> equivalent of <xref href="System.TimeSpan.TotalMinutes" data-throw-if-not-resolved="false"></xref>.
        Unlike <xref href="NodaTime.Duration.Minutes" data-throw-if-not-resolved="false"></xref>, it represents the complete duration in minutes rather than
        the whole number of minutes within the hour. So for a duration
        of 2 hours, 30 minutes and 45 seconds, the <code>Minutes</code> property will return 30, but <code>TotalMinutes</code>
        will return 150.75.
  example: []
  syntax:
    content: public double TotalMinutes { get; }
    parameters: []
    return:
      type: System.Double
      description: The total number of minutes in this duration.
    content.vb: Public ReadOnly Property TotalMinutes As Double
  overload: NodaTime.Duration.TotalMinutes*
- uid: NodaTime.Duration.TotalSeconds
  commentId: P:NodaTime.Duration.TotalSeconds
  id: TotalSeconds
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: TotalSeconds
  nameWithType: Duration.TotalSeconds
  fullName: NodaTime.Duration.TotalSeconds
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the total number of seconds in this duration, as a <xref href="System.Double" data-throw-if-not-resolved="false"></xref>.
  remarks: >-
    This property is the <code>Duration</code> equivalent of <xref href="System.TimeSpan.TotalSeconds" data-throw-if-not-resolved="false"></xref>.

    Unlike <xref href="NodaTime.Duration.Seconds" data-throw-if-not-resolved="false"></xref>, it represents the complete duration in seconds rather than

    the whole number of seconds within the minute. So for a duration

    of 10 minutes, 20 seconds and 250 milliseconds, the <code>Seconds</code> property will return 20, but <code>TotalSeconds</code>

    will return 620.25.
  example: []
  syntax:
    content: public double TotalSeconds { get; }
    parameters: []
    return:
      type: System.Double
      description: The total number of seconds in this duration.
    content.vb: Public ReadOnly Property TotalSeconds As Double
  overload: NodaTime.Duration.TotalSeconds*
- uid: NodaTime.Duration.TotalMilliseconds
  commentId: P:NodaTime.Duration.TotalMilliseconds
  id: TotalMilliseconds
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: TotalMilliseconds
  nameWithType: Duration.TotalMilliseconds
  fullName: NodaTime.Duration.TotalMilliseconds
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the total number of milliseconds in this duration, as a <xref href="System.Double" data-throw-if-not-resolved="false"></xref>.
  remarks: >-
    This property is the <code>Duration</code> equivalent of <xref href="System.TimeSpan.TotalMilliseconds" data-throw-if-not-resolved="false"></xref>.
        Unlike <xref href="NodaTime.Duration.Milliseconds" data-throw-if-not-resolved="false"></xref>, it represents the complete duration in milliseconds rather than
        the whole number of milliseconds within the second. So for a duration
        of 10 minutes, 20 seconds and 250 milliseconds, the <code>Milliseconds</code> property will return 250, but <code>TotalMilliseconds</code>
        will return 620250.
  example: []
  syntax:
    content: public double TotalMilliseconds { get; }
    parameters: []
    return:
      type: System.Double
      description: The total number of milliseconds in this duration.
    content.vb: Public ReadOnly Property TotalMilliseconds As Double
  overload: NodaTime.Duration.TotalMilliseconds*
- uid: NodaTime.Duration.TotalTicks
  commentId: P:NodaTime.Duration.TotalTicks
  id: TotalTicks
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: TotalTicks
  nameWithType: Duration.TotalTicks
  fullName: NodaTime.Duration.TotalTicks
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the total number of ticks in this duration, as a <xref href="System.Double" data-throw-if-not-resolved="false"></xref>.
  remarks: >-
    This property is the <code>Duration</code> equivalent of <xref href="System.TimeSpan.Ticks" data-throw-if-not-resolved="false"></xref>,
        except represented as double-precision floating point number instead of a 64-bit integer. This
        is because <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> has a precision of nanoseconds, and also because the range
        of 64-bit integers doesn't cover the number of possible ticks in a <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref>. (The
        latter is only an issue in durations outside the range of <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> - in other words,
        with magnitudes of over 29,000 years.)
  example: []
  syntax:
    content: public double TotalTicks { get; }
    parameters: []
    return:
      type: System.Double
      description: The total number of ticks in this duration.
    content.vb: Public ReadOnly Property TotalTicks As Double
  overload: NodaTime.Duration.TotalTicks*
  seealso:
  - linkId: NodaTime.Duration.BclCompatibleTicks
    commentId: P:NodaTime.Duration.BclCompatibleTicks
- uid: NodaTime.Duration.TotalNanoseconds
  commentId: P:NodaTime.Duration.TotalNanoseconds
  id: TotalNanoseconds
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: TotalNanoseconds
  nameWithType: Duration.TotalNanoseconds
  fullName: NodaTime.Duration.TotalNanoseconds
  type: Property
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Gets the total number of nanoseconds in this duration, as a <xref href="System.Double" data-throw-if-not-resolved="false"></xref>.
  remarks: >-
    The result is always an integer, but may not be precise due to the limitations
        of the <code>Double</code> type. In other works, <code>Duration.FromNanoseconds(duration.TotalNanoseconds)</code>
        is not guaranteed to round-trip. To guarantee precision and round-tripping,
        use <xref href="NodaTime.Duration.ToBigIntegerNanoseconds" data-throw-if-not-resolved="false"></xref> and <xref href="NodaTime.Duration.FromNanoseconds(System.Numerics.BigInteger)" data-throw-if-not-resolved="false"></xref>
        (or the <code>Int128</code> equivalents where available).
  example: []
  syntax:
    content: public double TotalNanoseconds { get; }
    parameters: []
    return:
      type: System.Double
      description: This duration as a number of nanoseconds, represented as a <code>Double</code>.
    content.vb: Public ReadOnly Property TotalNanoseconds As Double
  overload: NodaTime.Duration.TotalNanoseconds*
- uid: NodaTime.Duration.Equals(System.Object)
  commentId: M:NodaTime.Duration.Equals(System.Object)
  id: Equals(System.Object)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Equals(object?)
  nameWithType: Duration.Equals(object?)
  fullName: NodaTime.Duration.Equals(object?)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Determines whether the specified <xref href="System.Object" data-throw-if-not-resolved="false"></xref> is equal to this instance.

    See the type documentation for a description of equality semantics.
  example: []
  syntax:
    content: public override bool Equals(object? obj)
    parameters:
    - id: obj
      type: System.Object
      description: The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to compare with this instance.
    return:
      type: System.Boolean
      description: >-
        <code>true</code> if the specified <xref href="System.Object" data-throw-if-not-resolved="false"></xref> is equal to this instance;

        otherwise, <code>false</code>.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: NodaTime.Duration.Equals*
  nameWithType.vb: Duration.Equals(Object)
  fullName.vb: NodaTime.Duration.Equals(Object)
  name.vb: Equals(Object)
- uid: NodaTime.Duration.GetHashCode
  commentId: M:NodaTime.Duration.GetHashCode
  id: GetHashCode
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Duration.GetHashCode()
  fullName: NodaTime.Duration.GetHashCode()
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Returns a hash code for this instance.

    See the type documentation for a description of equality semantics.
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: >-
        A hash code for this instance, suitable for use in hashing algorithms and data

        structures like a hash table.
    content.vb: Public Overrides Function GetHashCode() As Integer
  overridden: System.ValueType.GetHashCode
  overload: NodaTime.Duration.GetHashCode*
- uid: NodaTime.Duration.ToString
  commentId: M:NodaTime.Duration.ToString
  id: ToString
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Duration.ToString()
  fullName: NodaTime.Duration.ToString()
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this instance.
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: >-
        The value of the current instance in the default format pattern ("o"), using the current thread's

        culture to obtain a format provider.
    content.vb: Public Overrides Function ToString() As String
  overridden: System.ValueType.ToString
  overload: NodaTime.Duration.ToString*
- uid: NodaTime.Duration.ToString(System.String,System.IFormatProvider)
  commentId: M:NodaTime.Duration.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: ToString(string?, IFormatProvider?)
  nameWithType: Duration.ToString(string?, IFormatProvider?)
  fullName: NodaTime.Duration.ToString(string?, System.IFormatProvider?)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Formats the value of the current instance using the specified pattern.
  example: []
  syntax:
    content: public string ToString(string? patternText, IFormatProvider? formatProvider)
    parameters:
    - id: patternText
      type: System.String
      description: >-
        The <xref href="System.String" data-throw-if-not-resolved="false"></xref> specifying the pattern to use,
            or null to use the default format pattern ("o").
    - id: formatProvider
      type: System.IFormatProvider
      description: >-
        The <xref href="System.IFormatProvider" data-throw-if-not-resolved="false"></xref> to use when formatting the value,
            or null to use the current thread's culture to obtain a format provider.
    return:
      type: System.String
      description: A <xref href="System.String" data-throw-if-not-resolved="false"></xref> containing the value of the current instance in the specified format.
    content.vb: Public Function ToString(patternText As String, formatProvider As IFormatProvider) As String
  overload: NodaTime.Duration.ToString*
  implements:
  - System.IFormattable.ToString(System.String,System.IFormatProvider)
  nameWithType.vb: Duration.ToString(String, IFormatProvider)
  fullName.vb: NodaTime.Duration.ToString(String, System.IFormatProvider)
  name.vb: ToString(String, IFormatProvider)
- uid: NodaTime.Duration.op_Addition(NodaTime.Duration,NodaTime.Duration)
  commentId: M:NodaTime.Duration.op_Addition(NodaTime.Duration,NodaTime.Duration)
  id: op_Addition(NodaTime.Duration,NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: operator +(Duration, Duration)
  nameWithType: Duration.operator +(Duration, Duration)
  fullName: NodaTime.Duration.operator +(NodaTime.Duration, NodaTime.Duration)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Implements the operator + (addition).
  example: []
  syntax:
    content: public static Duration operator +(Duration left, Duration right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Duration
      description: The right hand side of the operator.
    return:
      type: NodaTime.Duration
      description: A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the sum of the given values.
    content.vb: Public Shared Operator +(left As Duration, right As Duration) As Duration
  overload: NodaTime.Duration.op_Addition*
  implements:
  - System.Numerics.IAdditionOperators{NodaTime.Duration,NodaTime.Duration,NodaTime.Duration}.op_Addition(NodaTime.Duration,NodaTime.Duration)
  nameWithType.vb: Duration.+(Duration, Duration)
  fullName.vb: NodaTime.Duration.+(NodaTime.Duration, NodaTime.Duration)
  name.vb: +(Duration, Duration)
- uid: NodaTime.Duration.op_UnaryPlus(NodaTime.Duration)
  commentId: M:NodaTime.Duration.op_UnaryPlus(NodaTime.Duration)
  id: op_UnaryPlus(NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: operator +(Duration)
  nameWithType: Duration.operator +(Duration)
  fullName: NodaTime.Duration.operator +(NodaTime.Duration)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Implements the operator + (unary).
  example: []
  syntax:
    content: public static Duration operator +(Duration duration)
    parameters:
    - id: duration
      type: NodaTime.Duration
      description: The duration.
    return:
      type: NodaTime.Duration
      description: The same duration <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> as provided.
    content.vb: Public Shared Operator +(duration As Duration) As Duration
  overload: NodaTime.Duration.op_UnaryPlus*
  implements:
  - System.Numerics.IUnaryPlusOperators{NodaTime.Duration,NodaTime.Duration}.op_UnaryPlus(NodaTime.Duration)
  nameWithType.vb: Duration.+(Duration)
  fullName.vb: NodaTime.Duration.+(NodaTime.Duration)
  name.vb: +(Duration)
- uid: NodaTime.Duration.Add(NodaTime.Duration,NodaTime.Duration)
  commentId: M:NodaTime.Duration.Add(NodaTime.Duration,NodaTime.Duration)
  id: Add(NodaTime.Duration,NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Add(Duration, Duration)
  nameWithType: Duration.Add(Duration, Duration)
  fullName: NodaTime.Duration.Add(NodaTime.Duration, NodaTime.Duration)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Adds one duration to another. Friendly alternative to <code>operator+()</code>.
  example: []
  syntax:
    content: public static Duration Add(Duration left, Duration right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Duration
      description: The right hand side of the operator.
    return:
      type: NodaTime.Duration
      description: A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the sum of the given values.
    content.vb: Public Shared Function Add(left As Duration, right As Duration) As Duration
  overload: NodaTime.Duration.Add*
- uid: NodaTime.Duration.Plus(NodaTime.Duration)
  commentId: M:NodaTime.Duration.Plus(NodaTime.Duration)
  id: Plus(NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Plus(Duration)
  nameWithType: Duration.Plus(Duration)
  fullName: NodaTime.Duration.Plus(NodaTime.Duration)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns the result of adding another duration to this one, for a fluent alternative to <code>operator+()</code>.
  example: []
  syntax:
    content: public Duration Plus(Duration other)
    parameters:
    - id: other
      type: NodaTime.Duration
      description: The duration to add
    return:
      type: NodaTime.Duration
      description: A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the result of the addition.
    content.vb: Public Function Plus(other As Duration) As Duration
  overload: NodaTime.Duration.Plus*
- uid: NodaTime.Duration.op_Subtraction(NodaTime.Duration,NodaTime.Duration)
  commentId: M:NodaTime.Duration.op_Subtraction(NodaTime.Duration,NodaTime.Duration)
  id: op_Subtraction(NodaTime.Duration,NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: operator -(Duration, Duration)
  nameWithType: Duration.operator -(Duration, Duration)
  fullName: NodaTime.Duration.operator -(NodaTime.Duration, NodaTime.Duration)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Implements the operator - (subtraction).
  example: []
  syntax:
    content: public static Duration operator -(Duration left, Duration right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Duration
      description: The right hand side of the operator.
    return:
      type: NodaTime.Duration
      description: A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the difference of the given values.
    content.vb: Public Shared Operator -(left As Duration, right As Duration) As Duration
  overload: NodaTime.Duration.op_Subtraction*
  implements:
  - System.Numerics.ISubtractionOperators{NodaTime.Duration,NodaTime.Duration,NodaTime.Duration}.op_Subtraction(NodaTime.Duration,NodaTime.Duration)
  nameWithType.vb: Duration.-(Duration, Duration)
  fullName.vb: NodaTime.Duration.-(NodaTime.Duration, NodaTime.Duration)
  name.vb: -(Duration, Duration)
- uid: NodaTime.Duration.Subtract(NodaTime.Duration,NodaTime.Duration)
  commentId: M:NodaTime.Duration.Subtract(NodaTime.Duration,NodaTime.Duration)
  id: Subtract(NodaTime.Duration,NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Subtract(Duration, Duration)
  nameWithType: Duration.Subtract(Duration, Duration)
  fullName: NodaTime.Duration.Subtract(NodaTime.Duration, NodaTime.Duration)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Subtracts one duration from another. Friendly alternative to <code>operator-()</code>.
  example: []
  syntax:
    content: public static Duration Subtract(Duration left, Duration right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Duration
      description: The right hand side of the operator.
    return:
      type: NodaTime.Duration
      description: A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the difference of the given values.
    content.vb: Public Shared Function Subtract(left As Duration, right As Duration) As Duration
  overload: NodaTime.Duration.Subtract*
- uid: NodaTime.Duration.Minus(NodaTime.Duration)
  commentId: M:NodaTime.Duration.Minus(NodaTime.Duration)
  id: Minus(NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Minus(Duration)
  nameWithType: Duration.Minus(Duration)
  fullName: NodaTime.Duration.Minus(NodaTime.Duration)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns the result of subtracting another duration from this one, for a fluent alternative to <code>operator-()</code>.
  example: []
  syntax:
    content: public Duration Minus(Duration other)
    parameters:
    - id: other
      type: NodaTime.Duration
      description: The duration to subtract
    return:
      type: NodaTime.Duration
      description: A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the result of the subtraction.
    content.vb: Public Function Minus(other As Duration) As Duration
  overload: NodaTime.Duration.Minus*
- uid: NodaTime.Duration.op_Division(NodaTime.Duration,System.Int64)
  commentId: M:NodaTime.Duration.op_Division(NodaTime.Duration,System.Int64)
  id: op_Division(NodaTime.Duration,System.Int64)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: operator /(Duration, long)
  nameWithType: Duration.operator /(Duration, long)
  fullName: NodaTime.Duration.operator /(NodaTime.Duration, long)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Implements the operator / (division) to divide a duration by an <xref href="System.Int64" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static Duration operator /(Duration left, long right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: System.Int64
      description: The right hand side of the operator.
    return:
      type: NodaTime.Duration
      description: >-
        A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the result of dividing <code class="paramref">left</code> by
            <code class="paramref">right</code>.
    content.vb: Public Shared Operator /(left As Duration, right As Long) As Duration
  overload: NodaTime.Duration.op_Division*
  nameWithType.vb: Duration./(Duration, Long)
  fullName.vb: NodaTime.Duration./(NodaTime.Duration, Long)
  name.vb: /(Duration, Long)
- uid: NodaTime.Duration.op_Division(NodaTime.Duration,System.Double)
  commentId: M:NodaTime.Duration.op_Division(NodaTime.Duration,System.Double)
  id: op_Division(NodaTime.Duration,System.Double)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: operator /(Duration, double)
  nameWithType: Duration.operator /(Duration, double)
  fullName: NodaTime.Duration.operator /(NodaTime.Duration, double)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Implements the operator / (division) to divide a duration by a <xref href="System.Double" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static Duration operator /(Duration left, double right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: System.Double
      description: The right hand side of the operator.
    return:
      type: NodaTime.Duration
      description: >-
        A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the result of dividing <code class="paramref">left</code> by
            <code class="paramref">right</code>.
    content.vb: Public Shared Operator /(left As Duration, right As Double) As Duration
  overload: NodaTime.Duration.op_Division*
  nameWithType.vb: Duration./(Duration, Double)
  fullName.vb: NodaTime.Duration./(NodaTime.Duration, Double)
  name.vb: /(Duration, Double)
- uid: NodaTime.Duration.op_Division(NodaTime.Duration,NodaTime.Duration)
  commentId: M:NodaTime.Duration.op_Division(NodaTime.Duration,NodaTime.Duration)
  id: op_Division(NodaTime.Duration,NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: operator /(Duration, Duration)
  nameWithType: Duration.operator /(Duration, Duration)
  fullName: NodaTime.Duration.operator /(NodaTime.Duration, NodaTime.Duration)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Implements the operator / (division) to divide one duration by another.
  example: []
  syntax:
    content: public static double operator /(Duration left, Duration right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Duration
      description: The right hand side of the operator.
    return:
      type: System.Double
      description: >-
        The <xref href="System.Double" data-throw-if-not-resolved="false"></xref> representing the result of dividing <code class="paramref">left</code> by
            <code class="paramref">right</code>.
    content.vb: Public Shared Operator /(left As Duration, right As Duration) As Double
  overload: NodaTime.Duration.op_Division*
  nameWithType.vb: Duration./(Duration, Duration)
  fullName.vb: NodaTime.Duration./(NodaTime.Duration, NodaTime.Duration)
  name.vb: /(Duration, Duration)
- uid: NodaTime.Duration.Divide(NodaTime.Duration,System.Int64)
  commentId: M:NodaTime.Duration.Divide(NodaTime.Duration,System.Int64)
  id: Divide(NodaTime.Duration,System.Int64)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Divide(Duration, long)
  nameWithType: Duration.Divide(Duration, long)
  fullName: NodaTime.Duration.Divide(NodaTime.Duration, long)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Divides a duration by an <xref href="System.Int64" data-throw-if-not-resolved="false"></xref>. Friendly alternative to <code>operator/()</code>.
  example: []
  syntax:
    content: public static Duration Divide(Duration left, long right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: System.Int64
      description: The right hand side of the operator.
    return:
      type: NodaTime.Duration
      description: >-
        A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the result of dividing <code class="paramref">left</code> by
            <code class="paramref">right</code>.
    content.vb: Public Shared Function Divide(left As Duration, right As Long) As Duration
  overload: NodaTime.Duration.Divide*
  nameWithType.vb: Duration.Divide(Duration, Long)
  fullName.vb: NodaTime.Duration.Divide(NodaTime.Duration, Long)
  name.vb: Divide(Duration, Long)
- uid: NodaTime.Duration.Divide(NodaTime.Duration,System.Double)
  commentId: M:NodaTime.Duration.Divide(NodaTime.Duration,System.Double)
  id: Divide(NodaTime.Duration,System.Double)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Divide(Duration, double)
  nameWithType: Duration.Divide(Duration, double)
  fullName: NodaTime.Duration.Divide(NodaTime.Duration, double)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Divides a duration by a <xref href="System.Double" data-throw-if-not-resolved="false"></xref>. Friendly alternative to <code>operator/()</code>.
  example: []
  syntax:
    content: public static Duration Divide(Duration left, double right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: System.Double
      description: The right hand side of the operator.
    return:
      type: NodaTime.Duration
      description: >-
        A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the result of dividing <code class="paramref">left</code> by
            <code class="paramref">right</code>.
    content.vb: Public Shared Function Divide(left As Duration, right As Double) As Duration
  overload: NodaTime.Duration.Divide*
  nameWithType.vb: Duration.Divide(Duration, Double)
  fullName.vb: NodaTime.Duration.Divide(NodaTime.Duration, Double)
  name.vb: Divide(Duration, Double)
- uid: NodaTime.Duration.Divide(NodaTime.Duration,NodaTime.Duration)
  commentId: M:NodaTime.Duration.Divide(NodaTime.Duration,NodaTime.Duration)
  id: Divide(NodaTime.Duration,NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Divide(Duration, Duration)
  nameWithType: Duration.Divide(Duration, Duration)
  fullName: NodaTime.Duration.Divide(NodaTime.Duration, NodaTime.Duration)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Divides one duration by another. Friendly alternative to <code>operator/()</code>.
  example: []
  syntax:
    content: public static double Divide(Duration left, Duration right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Duration
      description: The right hand side of the operator.
    return:
      type: System.Double
      description: >-
        The <xref href="System.Double" data-throw-if-not-resolved="false"></xref> representing the result of dividing <code class="paramref">left</code> by
            <code class="paramref">right</code>.
    content.vb: Public Shared Function Divide(left As Duration, right As Duration) As Double
  overload: NodaTime.Duration.Divide*
- uid: NodaTime.Duration.op_Multiply(NodaTime.Duration,System.Double)
  commentId: M:NodaTime.Duration.op_Multiply(NodaTime.Duration,System.Double)
  id: op_Multiply(NodaTime.Duration,System.Double)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: operator *(Duration, double)
  nameWithType: Duration.operator *(Duration, double)
  fullName: NodaTime.Duration.operator *(NodaTime.Duration, double)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Implements the operator * (multiplication).
  example: []
  syntax:
    content: public static Duration operator *(Duration left, double right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: System.Double
      description: The right hand side of the operator.
    return:
      type: NodaTime.Duration
      description: >-
        A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the result of multiplying <code class="paramref">left</code> by
            <code class="paramref">right</code>.
    content.vb: Public Shared Operator *(left As Duration, right As Double) As Duration
  overload: NodaTime.Duration.op_Multiply*
  nameWithType.vb: Duration.*(Duration, Double)
  fullName.vb: NodaTime.Duration.*(NodaTime.Duration, Double)
  name.vb: '*(Duration, Double)'
- uid: NodaTime.Duration.op_Multiply(NodaTime.Duration,System.Int64)
  commentId: M:NodaTime.Duration.op_Multiply(NodaTime.Duration,System.Int64)
  id: op_Multiply(NodaTime.Duration,System.Int64)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: operator *(Duration, long)
  nameWithType: Duration.operator *(Duration, long)
  fullName: NodaTime.Duration.operator *(NodaTime.Duration, long)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Implements the operator * (multiplication).
  example: []
  syntax:
    content: public static Duration operator *(Duration left, long right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: System.Int64
      description: The right hand side of the operator.
    return:
      type: NodaTime.Duration
      description: >-
        A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the result of multiplying <code class="paramref">left</code> by
            <code class="paramref">right</code>.
    content.vb: Public Shared Operator *(left As Duration, right As Long) As Duration
  overload: NodaTime.Duration.op_Multiply*
  nameWithType.vb: Duration.*(Duration, Long)
  fullName.vb: NodaTime.Duration.*(NodaTime.Duration, Long)
  name.vb: '*(Duration, Long)'
- uid: NodaTime.Duration.op_Multiply(System.Double,NodaTime.Duration)
  commentId: M:NodaTime.Duration.op_Multiply(System.Double,NodaTime.Duration)
  id: op_Multiply(System.Double,NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: operator *(double, Duration)
  nameWithType: Duration.operator *(double, Duration)
  fullName: NodaTime.Duration.operator *(double, NodaTime.Duration)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Implements the operator * (multiplication).
  example: []
  syntax:
    content: public static Duration operator *(double left, Duration right)
    parameters:
    - id: left
      type: System.Double
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Duration
      description: The right hand side of the operator.
    return:
      type: NodaTime.Duration
      description: >-
        A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the result of multiplying <code class="paramref">left</code> by
            <code class="paramref">right</code>.
    content.vb: Public Shared Operator *(left As Double, right As Duration) As Duration
  overload: NodaTime.Duration.op_Multiply*
  nameWithType.vb: Duration.*(Double, Duration)
  fullName.vb: NodaTime.Duration.*(Double, NodaTime.Duration)
  name.vb: '*(Double, Duration)'
- uid: NodaTime.Duration.op_Multiply(System.Int64,NodaTime.Duration)
  commentId: M:NodaTime.Duration.op_Multiply(System.Int64,NodaTime.Duration)
  id: op_Multiply(System.Int64,NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: operator *(long, Duration)
  nameWithType: Duration.operator *(long, Duration)
  fullName: NodaTime.Duration.operator *(long, NodaTime.Duration)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Implements the operator * (multiplication).
  example: []
  syntax:
    content: public static Duration operator *(long left, Duration right)
    parameters:
    - id: left
      type: System.Int64
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Duration
      description: The right hand side of the operator.
    return:
      type: NodaTime.Duration
      description: >-
        A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the result of multiplying <code class="paramref">left</code> by
            <code class="paramref">right</code>.
    content.vb: Public Shared Operator *(left As Long, right As Duration) As Duration
  overload: NodaTime.Duration.op_Multiply*
  nameWithType.vb: Duration.*(Long, Duration)
  fullName.vb: NodaTime.Duration.*(Long, NodaTime.Duration)
  name.vb: '*(Long, Duration)'
- uid: NodaTime.Duration.Multiply(NodaTime.Duration,System.Int64)
  commentId: M:NodaTime.Duration.Multiply(NodaTime.Duration,System.Int64)
  id: Multiply(NodaTime.Duration,System.Int64)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Multiply(Duration, long)
  nameWithType: Duration.Multiply(Duration, long)
  fullName: NodaTime.Duration.Multiply(NodaTime.Duration, long)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Multiplies a duration by a number. Friendly alternative to <code>operator*()</code>.
  example: []
  syntax:
    content: public static Duration Multiply(Duration left, long right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: System.Int64
      description: The right hand side of the operator.
    return:
      type: NodaTime.Duration
      description: A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the product of the given values.
    content.vb: Public Shared Function Multiply(left As Duration, right As Long) As Duration
  overload: NodaTime.Duration.Multiply*
  nameWithType.vb: Duration.Multiply(Duration, Long)
  fullName.vb: NodaTime.Duration.Multiply(NodaTime.Duration, Long)
  name.vb: Multiply(Duration, Long)
- uid: NodaTime.Duration.Multiply(NodaTime.Duration,System.Double)
  commentId: M:NodaTime.Duration.Multiply(NodaTime.Duration,System.Double)
  id: Multiply(NodaTime.Duration,System.Double)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Multiply(Duration, double)
  nameWithType: Duration.Multiply(Duration, double)
  fullName: NodaTime.Duration.Multiply(NodaTime.Duration, double)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Multiplies a duration by a number. Friendly alternative to <code>operator*()</code>.
  example: []
  syntax:
    content: public static Duration Multiply(Duration left, double right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: System.Double
      description: The right hand side of the operator.
    return:
      type: NodaTime.Duration
      description: A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the product of the given values.
    content.vb: Public Shared Function Multiply(left As Duration, right As Double) As Duration
  overload: NodaTime.Duration.Multiply*
  nameWithType.vb: Duration.Multiply(Duration, Double)
  fullName.vb: NodaTime.Duration.Multiply(NodaTime.Duration, Double)
  name.vb: Multiply(Duration, Double)
- uid: NodaTime.Duration.Multiply(System.Int64,NodaTime.Duration)
  commentId: M:NodaTime.Duration.Multiply(System.Int64,NodaTime.Duration)
  id: Multiply(System.Int64,NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Multiply(long, Duration)
  nameWithType: Duration.Multiply(long, Duration)
  fullName: NodaTime.Duration.Multiply(long, NodaTime.Duration)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Multiplies a duration by a number. Friendly alternative to <code>operator*()</code>.
  example: []
  syntax:
    content: public static Duration Multiply(long left, Duration right)
    parameters:
    - id: left
      type: System.Int64
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Duration
      description: The right hand side of the operator.
    return:
      type: NodaTime.Duration
      description: A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the product of the given values.
    content.vb: Public Shared Function Multiply(left As Long, right As Duration) As Duration
  overload: NodaTime.Duration.Multiply*
  nameWithType.vb: Duration.Multiply(Long, Duration)
  fullName.vb: NodaTime.Duration.Multiply(Long, NodaTime.Duration)
  name.vb: Multiply(Long, Duration)
- uid: NodaTime.Duration.Multiply(System.Double,NodaTime.Duration)
  commentId: M:NodaTime.Duration.Multiply(System.Double,NodaTime.Duration)
  id: Multiply(System.Double,NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Multiply(double, Duration)
  nameWithType: Duration.Multiply(double, Duration)
  fullName: NodaTime.Duration.Multiply(double, NodaTime.Duration)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Multiplies a duration by a number. Friendly alternative to <code>operator*()</code>.
  example: []
  syntax:
    content: public static Duration Multiply(double left, Duration right)
    parameters:
    - id: left
      type: System.Double
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Duration
      description: The right hand side of the operator.
    return:
      type: NodaTime.Duration
      description: A new <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the product of the given values.
    content.vb: Public Shared Function Multiply(left As Double, right As Duration) As Duration
  overload: NodaTime.Duration.Multiply*
  nameWithType.vb: Duration.Multiply(Double, Duration)
  fullName.vb: NodaTime.Duration.Multiply(Double, NodaTime.Duration)
  name.vb: Multiply(Double, Duration)
- uid: NodaTime.Duration.op_Equality(NodaTime.Duration,NodaTime.Duration)
  commentId: M:NodaTime.Duration.op_Equality(NodaTime.Duration,NodaTime.Duration)
  id: op_Equality(NodaTime.Duration,NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: operator ==(Duration, Duration)
  nameWithType: Duration.operator ==(Duration, Duration)
  fullName: NodaTime.Duration.operator ==(NodaTime.Duration, NodaTime.Duration)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Implements the operator == (equality).

    See the type documentation for a description of equality semantics.
  example: []
  syntax:
    content: public static bool operator ==(Duration left, Duration right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Duration
      description: The right hand side of the operator.
    return:
      type: System.Boolean
      description: <code>true</code> if values are equal to each other, otherwise <code>false</code>.
    content.vb: Public Shared Operator =(left As Duration, right As Duration) As Boolean
  overload: NodaTime.Duration.op_Equality*
  implements:
  - System.Numerics.IEqualityOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}.op_Equality(NodaTime.Duration,NodaTime.Duration)
  nameWithType.vb: Duration.=(Duration, Duration)
  fullName.vb: NodaTime.Duration.=(NodaTime.Duration, NodaTime.Duration)
  name.vb: =(Duration, Duration)
- uid: NodaTime.Duration.op_Inequality(NodaTime.Duration,NodaTime.Duration)
  commentId: M:NodaTime.Duration.op_Inequality(NodaTime.Duration,NodaTime.Duration)
  id: op_Inequality(NodaTime.Duration,NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: operator !=(Duration, Duration)
  nameWithType: Duration.operator !=(Duration, Duration)
  fullName: NodaTime.Duration.operator !=(NodaTime.Duration, NodaTime.Duration)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Implements the operator != (inequality).

    See the type documentation for a description of equality semantics.
  example: []
  syntax:
    content: public static bool operator !=(Duration left, Duration right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Duration
      description: The right hand side of the operator.
    return:
      type: System.Boolean
      description: <code>true</code> if values are not equal to each other, otherwise <code>false</code>.
    content.vb: Public Shared Operator <>(left As Duration, right As Duration) As Boolean
  overload: NodaTime.Duration.op_Inequality*
  implements:
  - System.Numerics.IEqualityOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}.op_Inequality(NodaTime.Duration,NodaTime.Duration)
  nameWithType.vb: Duration.<>(Duration, Duration)
  fullName.vb: NodaTime.Duration.<>(NodaTime.Duration, NodaTime.Duration)
  name.vb: <>(Duration, Duration)
- uid: NodaTime.Duration.op_LessThan(NodaTime.Duration,NodaTime.Duration)
  commentId: M:NodaTime.Duration.op_LessThan(NodaTime.Duration,NodaTime.Duration)
  id: op_LessThan(NodaTime.Duration,NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: operator <(Duration, Duration)
  nameWithType: Duration.operator <(Duration, Duration)
  fullName: NodaTime.Duration.operator <(NodaTime.Duration, NodaTime.Duration)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Implements the operator &lt; (less than).

    See the type documentation for a description of ordering semantics.
  example: []
  syntax:
    content: public static bool operator <(Duration left, Duration right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Duration
      description: The right hand side of the operator.
    return:
      type: System.Boolean
      description: <code>true</code> if the left value is less than the right value, otherwise <code>false</code>.
    content.vb: Public Shared Operator <(left As Duration, right As Duration) As Boolean
  overload: NodaTime.Duration.op_LessThan*
  implements:
  - System.Numerics.IComparisonOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}.op_LessThan(NodaTime.Duration,NodaTime.Duration)
  nameWithType.vb: Duration.<(Duration, Duration)
  fullName.vb: NodaTime.Duration.<(NodaTime.Duration, NodaTime.Duration)
  name.vb: <(Duration, Duration)
- uid: NodaTime.Duration.op_LessThanOrEqual(NodaTime.Duration,NodaTime.Duration)
  commentId: M:NodaTime.Duration.op_LessThanOrEqual(NodaTime.Duration,NodaTime.Duration)
  id: op_LessThanOrEqual(NodaTime.Duration,NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: operator <=(Duration, Duration)
  nameWithType: Duration.operator <=(Duration, Duration)
  fullName: NodaTime.Duration.operator <=(NodaTime.Duration, NodaTime.Duration)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Implements the operator &lt;= (less than or equal).

    See the type documentation for a description of ordering semantics.
  example: []
  syntax:
    content: public static bool operator <=(Duration left, Duration right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Duration
      description: The right hand side of the operator.
    return:
      type: System.Boolean
      description: <code>true</code> if the left value is less than or equal to the right value, otherwise <code>false</code>.
    content.vb: Public Shared Operator <=(left As Duration, right As Duration) As Boolean
  overload: NodaTime.Duration.op_LessThanOrEqual*
  implements:
  - System.Numerics.IComparisonOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}.op_LessThanOrEqual(NodaTime.Duration,NodaTime.Duration)
  nameWithType.vb: Duration.<=(Duration, Duration)
  fullName.vb: NodaTime.Duration.<=(NodaTime.Duration, NodaTime.Duration)
  name.vb: <=(Duration, Duration)
- uid: NodaTime.Duration.op_GreaterThan(NodaTime.Duration,NodaTime.Duration)
  commentId: M:NodaTime.Duration.op_GreaterThan(NodaTime.Duration,NodaTime.Duration)
  id: op_GreaterThan(NodaTime.Duration,NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: operator >(Duration, Duration)
  nameWithType: Duration.operator >(Duration, Duration)
  fullName: NodaTime.Duration.operator >(NodaTime.Duration, NodaTime.Duration)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Implements the operator &gt; (greater than).

    See the type documentation for a description of ordering semantics.
  example: []
  syntax:
    content: public static bool operator >(Duration left, Duration right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Duration
      description: The right hand side of the operator.
    return:
      type: System.Boolean
      description: <code>true</code> if the left value is greater than the right value, otherwise <code>false</code>.
    content.vb: Public Shared Operator >(left As Duration, right As Duration) As Boolean
  overload: NodaTime.Duration.op_GreaterThan*
  implements:
  - System.Numerics.IComparisonOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}.op_GreaterThan(NodaTime.Duration,NodaTime.Duration)
  nameWithType.vb: Duration.>(Duration, Duration)
  fullName.vb: NodaTime.Duration.>(NodaTime.Duration, NodaTime.Duration)
  name.vb: '>(Duration, Duration)'
- uid: NodaTime.Duration.op_GreaterThanOrEqual(NodaTime.Duration,NodaTime.Duration)
  commentId: M:NodaTime.Duration.op_GreaterThanOrEqual(NodaTime.Duration,NodaTime.Duration)
  id: op_GreaterThanOrEqual(NodaTime.Duration,NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: operator >=(Duration, Duration)
  nameWithType: Duration.operator >=(Duration, Duration)
  fullName: NodaTime.Duration.operator >=(NodaTime.Duration, NodaTime.Duration)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Implements the operator &gt;= (greater than or equal).

    See the type documentation for a description of ordering semantics.
  example: []
  syntax:
    content: public static bool operator >=(Duration left, Duration right)
    parameters:
    - id: left
      type: NodaTime.Duration
      description: The left hand side of the operator.
    - id: right
      type: NodaTime.Duration
      description: The right hand side of the operator.
    return:
      type: System.Boolean
      description: <code>true</code> if the left value is greater than or equal to the right value, otherwise <code>false</code>.
    content.vb: Public Shared Operator >=(left As Duration, right As Duration) As Boolean
  overload: NodaTime.Duration.op_GreaterThanOrEqual*
  implements:
  - System.Numerics.IComparisonOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}.op_GreaterThanOrEqual(NodaTime.Duration,NodaTime.Duration)
  nameWithType.vb: Duration.>=(Duration, Duration)
  fullName.vb: NodaTime.Duration.>=(NodaTime.Duration, NodaTime.Duration)
  name.vb: '>=(Duration, Duration)'
- uid: NodaTime.Duration.op_UnaryNegation(NodaTime.Duration)
  commentId: M:NodaTime.Duration.op_UnaryNegation(NodaTime.Duration)
  id: op_UnaryNegation(NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: operator -(Duration)
  nameWithType: Duration.operator -(Duration)
  fullName: NodaTime.Duration.operator -(NodaTime.Duration)
  type: Operator
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Implements the unary negation operator.
  example: []
  syntax:
    content: public static Duration operator -(Duration duration)
    parameters:
    - id: duration
      type: NodaTime.Duration
      description: Duration to negate
    return:
      type: NodaTime.Duration
      description: The negative value of this duration
    content.vb: Public Shared Operator -(duration As Duration) As Duration
  overload: NodaTime.Duration.op_UnaryNegation*
  implements:
  - System.Numerics.IUnaryNegationOperators{NodaTime.Duration,NodaTime.Duration}.op_UnaryNegation(NodaTime.Duration)
  nameWithType.vb: Duration.-(Duration)
  fullName.vb: NodaTime.Duration.-(NodaTime.Duration)
  name.vb: -(Duration)
- uid: NodaTime.Duration.Negate(NodaTime.Duration)
  commentId: M:NodaTime.Duration.Negate(NodaTime.Duration)
  id: Negate(NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Negate(Duration)
  nameWithType: Duration.Negate(Duration)
  fullName: NodaTime.Duration.Negate(NodaTime.Duration)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Implements a friendly alternative to the unary negation operator.
  example: []
  syntax:
    content: public static Duration Negate(Duration duration)
    parameters:
    - id: duration
      type: NodaTime.Duration
      description: Duration to negate
    return:
      type: NodaTime.Duration
      description: The negative value of this duration
    content.vb: Public Shared Function Negate(duration As Duration) As Duration
  overload: NodaTime.Duration.Negate*
- uid: NodaTime.Duration.CompareTo(NodaTime.Duration)
  commentId: M:NodaTime.Duration.CompareTo(NodaTime.Duration)
  id: CompareTo(NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: CompareTo(Duration)
  nameWithType: Duration.CompareTo(Duration)
  fullName: NodaTime.Duration.CompareTo(NodaTime.Duration)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Implementation of <xref href="System.IComparable%601.CompareTo(%600)" data-throw-if-not-resolved="false"></xref> to compare two durations.

    See the type documentation for a description of ordering semantics.
  example: []
  syntax:
    content: public int CompareTo(Duration other)
    parameters:
    - id: other
      type: NodaTime.Duration
      description: An object to compare with this object.
    return:
      type: System.Int32
      description: >-
        A 32-bit signed integer that indicates the relative order of the objects being compared.

        The return value has the following meanings:

        <table><thead><tr><th class="term">Value</th><th class="description">Meaning</th></tr></thead><tbody><tr><td class="term">&lt; 0</td><td class="description">This object is less than the <code class="paramref">other</code> parameter.</td></tr><tr><td class="term">0</td><td class="description">This object is equal to <code class="paramref">other</code>.</td></tr><tr><td class="term">&gt; 0</td><td class="description">This object is greater than <code class="paramref">other</code>.</td></tr></tbody></table>
    content.vb: Public Function CompareTo(other As Duration) As Integer
  overload: NodaTime.Duration.CompareTo*
  implements:
  - System.IComparable{NodaTime.Duration}.CompareTo(NodaTime.Duration)
- uid: NodaTime.Duration.System#IComparable#CompareTo(System.Object)
  commentId: M:NodaTime.Duration.System#IComparable#CompareTo(System.Object)
  id: System#IComparable#CompareTo(System.Object)
  isEii: true
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: IComparable.CompareTo(object?)
  nameWithType: Duration.IComparable.CompareTo(object?)
  fullName: NodaTime.Duration.System.IComparable.CompareTo(object?)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Implementation of <xref href="System.IComparable.CompareTo(System.Object)" data-throw-if-not-resolved="false"></xref> to compare two durations.

    See the type documentation for a description of ordering semantics.
  remarks: This uses explicit interface implementation to avoid it being called accidentally. The generic implementation should usually be preferred.
  example: []
  syntax:
    content: int IComparable.CompareTo(object? obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare this value with.
    return:
      type: System.Int32
      description: >-
        The result of comparing this instant with another one; see <xref href="NodaTime.Duration.CompareTo(NodaTime.Duration)" data-throw-if-not-resolved="false"></xref> for general details.
            If <code class="paramref">obj</code> is null, this method returns a value greater than 0.
    content.vb: ''
  overload: NodaTime.Duration.System#IComparable#CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code class="paramref">obj</code> is non-null but does not refer to an instance of <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref>.
  implements:
  - System.IComparable.CompareTo(System.Object)
  nameWithType.vb: ''
  fullName.vb: ''
  name.vb: ''
- uid: NodaTime.Duration.Equals(NodaTime.Duration)
  commentId: M:NodaTime.Duration.Equals(NodaTime.Duration)
  id: Equals(NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Equals(Duration)
  nameWithType: Duration.Equals(Duration)
  fullName: NodaTime.Duration.Equals(NodaTime.Duration)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Indicates whether the current object is equal to another object of the same type.

    See the type documentation for a description of equality semantics.
  example: []
  syntax:
    content: public bool Equals(Duration other)
    parameters:
    - id: other
      type: NodaTime.Duration
      description: An object to compare with this object.
    return:
      type: System.Boolean
      description: >-
        true if the current object is equal to the <code class="paramref">other</code> parameter;

        otherwise, false.
    content.vb: Public Function Equals(other As Duration) As Boolean
  overload: NodaTime.Duration.Equals*
  implements:
  - System.IEquatable{NodaTime.Duration}.Equals(NodaTime.Duration)
- uid: NodaTime.Duration.FromDays(System.Int32)
  commentId: M:NodaTime.Duration.FromDays(System.Int32)
  id: FromDays(System.Int32)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: FromDays(int)
  nameWithType: Duration.FromDays(int)
  fullName: NodaTime.Duration.FromDays(int)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Returns a <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> that represents the given number of days, assuming a 'standard' 24-hour

    day.
  example: []
  syntax:
    content: public static Duration FromDays(int days)
    parameters:
    - id: days
      type: System.Int32
      description: The number of days.
    return:
      type: NodaTime.Duration
      description: A <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the given number of days.
    content.vb: Public Shared Function FromDays(days As Integer) As Duration
  overload: NodaTime.Duration.FromDays*
  nameWithType.vb: Duration.FromDays(Integer)
  fullName.vb: NodaTime.Duration.FromDays(Integer)
  name.vb: FromDays(Integer)
- uid: NodaTime.Duration.FromDays(System.Double)
  commentId: M:NodaTime.Duration.FromDays(System.Double)
  id: FromDays(System.Double)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: FromDays(double)
  nameWithType: Duration.FromDays(double)
  fullName: NodaTime.Duration.FromDays(double)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Returns a <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> that represents the given number of days, assuming a 'standard' 24-hour

    day.
  example: []
  syntax:
    content: public static Duration FromDays(double days)
    parameters:
    - id: days
      type: System.Double
      description: The number of days.
    return:
      type: NodaTime.Duration
      description: A <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the given number of days.
    content.vb: Public Shared Function FromDays(days As Double) As Duration
  overload: NodaTime.Duration.FromDays*
  nameWithType.vb: Duration.FromDays(Double)
  fullName.vb: NodaTime.Duration.FromDays(Double)
  name.vb: FromDays(Double)
- uid: NodaTime.Duration.FromHours(System.Int32)
  commentId: M:NodaTime.Duration.FromHours(System.Int32)
  id: FromHours(System.Int32)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: FromHours(int)
  nameWithType: Duration.FromHours(int)
  fullName: NodaTime.Duration.FromHours(int)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns a <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> that represents the given number of hours.
  example: []
  syntax:
    content: public static Duration FromHours(int hours)
    parameters:
    - id: hours
      type: System.Int32
      description: The number of hours.
    return:
      type: NodaTime.Duration
      description: A <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the given number of hours.
    content.vb: Public Shared Function FromHours(hours As Integer) As Duration
  overload: NodaTime.Duration.FromHours*
  nameWithType.vb: Duration.FromHours(Integer)
  fullName.vb: NodaTime.Duration.FromHours(Integer)
  name.vb: FromHours(Integer)
- uid: NodaTime.Duration.FromHours(System.Double)
  commentId: M:NodaTime.Duration.FromHours(System.Double)
  id: FromHours(System.Double)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: FromHours(double)
  nameWithType: Duration.FromHours(double)
  fullName: NodaTime.Duration.FromHours(double)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns a <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> that represents the given number of hours.
  example: []
  syntax:
    content: public static Duration FromHours(double hours)
    parameters:
    - id: hours
      type: System.Double
      description: The number of hours.
    return:
      type: NodaTime.Duration
      description: A <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the given number of hours.
    content.vb: Public Shared Function FromHours(hours As Double) As Duration
  overload: NodaTime.Duration.FromHours*
  nameWithType.vb: Duration.FromHours(Double)
  fullName.vb: NodaTime.Duration.FromHours(Double)
  name.vb: FromHours(Double)
- uid: NodaTime.Duration.FromMinutes(System.Int64)
  commentId: M:NodaTime.Duration.FromMinutes(System.Int64)
  id: FromMinutes(System.Int64)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: FromMinutes(long)
  nameWithType: Duration.FromMinutes(long)
  fullName: NodaTime.Duration.FromMinutes(long)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns a <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> that represents the given number of minutes.
  example: []
  syntax:
    content: public static Duration FromMinutes(long minutes)
    parameters:
    - id: minutes
      type: System.Int64
      description: The number of minutes.
    return:
      type: NodaTime.Duration
      description: A <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the given number of minutes.
    content.vb: Public Shared Function FromMinutes(minutes As Long) As Duration
  overload: NodaTime.Duration.FromMinutes*
  nameWithType.vb: Duration.FromMinutes(Long)
  fullName.vb: NodaTime.Duration.FromMinutes(Long)
  name.vb: FromMinutes(Long)
- uid: NodaTime.Duration.FromMinutes(System.Double)
  commentId: M:NodaTime.Duration.FromMinutes(System.Double)
  id: FromMinutes(System.Double)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: FromMinutes(double)
  nameWithType: Duration.FromMinutes(double)
  fullName: NodaTime.Duration.FromMinutes(double)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns a <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> that represents the given number of minutes.
  example: []
  syntax:
    content: public static Duration FromMinutes(double minutes)
    parameters:
    - id: minutes
      type: System.Double
      description: The number of minutes.
    return:
      type: NodaTime.Duration
      description: A <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the given number of minutes.
    content.vb: Public Shared Function FromMinutes(minutes As Double) As Duration
  overload: NodaTime.Duration.FromMinutes*
  nameWithType.vb: Duration.FromMinutes(Double)
  fullName.vb: NodaTime.Duration.FromMinutes(Double)
  name.vb: FromMinutes(Double)
- uid: NodaTime.Duration.FromSeconds(System.Int64)
  commentId: M:NodaTime.Duration.FromSeconds(System.Int64)
  id: FromSeconds(System.Int64)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: FromSeconds(long)
  nameWithType: Duration.FromSeconds(long)
  fullName: NodaTime.Duration.FromSeconds(long)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns a <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> that represents the given number of seconds.
  example: []
  syntax:
    content: public static Duration FromSeconds(long seconds)
    parameters:
    - id: seconds
      type: System.Int64
      description: The number of seconds.
    return:
      type: NodaTime.Duration
      description: A <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the given number of seconds.
    content.vb: Public Shared Function FromSeconds(seconds As Long) As Duration
  overload: NodaTime.Duration.FromSeconds*
  nameWithType.vb: Duration.FromSeconds(Long)
  fullName.vb: NodaTime.Duration.FromSeconds(Long)
  name.vb: FromSeconds(Long)
- uid: NodaTime.Duration.FromSeconds(System.Double)
  commentId: M:NodaTime.Duration.FromSeconds(System.Double)
  id: FromSeconds(System.Double)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: FromSeconds(double)
  nameWithType: Duration.FromSeconds(double)
  fullName: NodaTime.Duration.FromSeconds(double)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns a <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> that represents the given number of seconds.
  example: []
  syntax:
    content: public static Duration FromSeconds(double seconds)
    parameters:
    - id: seconds
      type: System.Double
      description: The number of seconds.
    return:
      type: NodaTime.Duration
      description: A <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the given number of seconds.
    content.vb: Public Shared Function FromSeconds(seconds As Double) As Duration
  overload: NodaTime.Duration.FromSeconds*
  nameWithType.vb: Duration.FromSeconds(Double)
  fullName.vb: NodaTime.Duration.FromSeconds(Double)
  name.vb: FromSeconds(Double)
- uid: NodaTime.Duration.FromMilliseconds(System.Int64)
  commentId: M:NodaTime.Duration.FromMilliseconds(System.Int64)
  id: FromMilliseconds(System.Int64)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: FromMilliseconds(long)
  nameWithType: Duration.FromMilliseconds(long)
  fullName: NodaTime.Duration.FromMilliseconds(long)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns a <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> that represents the given number of milliseconds.
  example: []
  syntax:
    content: public static Duration FromMilliseconds(long milliseconds)
    parameters:
    - id: milliseconds
      type: System.Int64
      description: The number of milliseconds.
    return:
      type: NodaTime.Duration
      description: A <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the given number of milliseconds.
    content.vb: Public Shared Function FromMilliseconds(milliseconds As Long) As Duration
  overload: NodaTime.Duration.FromMilliseconds*
  nameWithType.vb: Duration.FromMilliseconds(Long)
  fullName.vb: NodaTime.Duration.FromMilliseconds(Long)
  name.vb: FromMilliseconds(Long)
- uid: NodaTime.Duration.FromMilliseconds(System.Double)
  commentId: M:NodaTime.Duration.FromMilliseconds(System.Double)
  id: FromMilliseconds(System.Double)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: FromMilliseconds(double)
  nameWithType: Duration.FromMilliseconds(double)
  fullName: NodaTime.Duration.FromMilliseconds(double)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns a <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> that represents the given number of milliseconds.
  example: []
  syntax:
    content: public static Duration FromMilliseconds(double milliseconds)
    parameters:
    - id: milliseconds
      type: System.Double
      description: The number of milliseconds.
    return:
      type: NodaTime.Duration
      description: A <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the given number of milliseconds.
    content.vb: Public Shared Function FromMilliseconds(milliseconds As Double) As Duration
  overload: NodaTime.Duration.FromMilliseconds*
  nameWithType.vb: Duration.FromMilliseconds(Double)
  fullName.vb: NodaTime.Duration.FromMilliseconds(Double)
  name.vb: FromMilliseconds(Double)
- uid: NodaTime.Duration.FromTicks(System.Int64)
  commentId: M:NodaTime.Duration.FromTicks(System.Int64)
  id: FromTicks(System.Int64)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: FromTicks(long)
  nameWithType: Duration.FromTicks(long)
  fullName: NodaTime.Duration.FromTicks(long)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns a <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> that represents the given number of ticks.
  example: []
  syntax:
    content: public static Duration FromTicks(long ticks)
    parameters:
    - id: ticks
      type: System.Int64
      description: The number of ticks.
    return:
      type: NodaTime.Duration
      description: A <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the given number of ticks.
    content.vb: Public Shared Function FromTicks(ticks As Long) As Duration
  overload: NodaTime.Duration.FromTicks*
  nameWithType.vb: Duration.FromTicks(Long)
  fullName.vb: NodaTime.Duration.FromTicks(Long)
  name.vb: FromTicks(Long)
- uid: NodaTime.Duration.FromTicks(System.Double)
  commentId: M:NodaTime.Duration.FromTicks(System.Double)
  id: FromTicks(System.Double)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: FromTicks(double)
  nameWithType: Duration.FromTicks(double)
  fullName: NodaTime.Duration.FromTicks(double)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns a <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> that represents the given number of ticks.
  example: []
  syntax:
    content: public static Duration FromTicks(double ticks)
    parameters:
    - id: ticks
      type: System.Double
      description: The number of ticks.
    return:
      type: NodaTime.Duration
      description: A <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the given number of ticks.
    content.vb: Public Shared Function FromTicks(ticks As Double) As Duration
  overload: NodaTime.Duration.FromTicks*
  nameWithType.vb: Duration.FromTicks(Double)
  fullName.vb: NodaTime.Duration.FromTicks(Double)
  name.vb: FromTicks(Double)
- uid: NodaTime.Duration.FromNanoseconds(System.Int64)
  commentId: M:NodaTime.Duration.FromNanoseconds(System.Int64)
  id: FromNanoseconds(System.Int64)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: FromNanoseconds(long)
  nameWithType: Duration.FromNanoseconds(long)
  fullName: NodaTime.Duration.FromNanoseconds(long)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns a <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> that represents the given number of nanoseconds.
  example: []
  syntax:
    content: public static Duration FromNanoseconds(long nanoseconds)
    parameters:
    - id: nanoseconds
      type: System.Int64
      description: The number of nanoseconds.
    return:
      type: NodaTime.Duration
      description: A <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> representing the given number of nanoseconds.
    content.vb: Public Shared Function FromNanoseconds(nanoseconds As Long) As Duration
  overload: NodaTime.Duration.FromNanoseconds*
  nameWithType.vb: Duration.FromNanoseconds(Long)
  fullName.vb: NodaTime.Duration.FromNanoseconds(Long)
  name.vb: FromNanoseconds(Long)
- uid: NodaTime.Duration.FromNanoseconds(System.Double)
  commentId: M:NodaTime.Duration.FromNanoseconds(System.Double)
  id: FromNanoseconds(System.Double)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: FromNanoseconds(double)
  nameWithType: Duration.FromNanoseconds(double)
  fullName: NodaTime.Duration.FromNanoseconds(double)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Converts a number of nanoseconds expressed as a <xref href="System.Double" data-throw-if-not-resolved="false"></xref> into a duration. Any fractional

    parts of the value are truncated towards zero.
  example: []
  syntax:
    content: public static Duration FromNanoseconds(double nanoseconds)
    parameters:
    - id: nanoseconds
      type: System.Double
      description: The number of nanoseconds to represent.
    return:
      type: NodaTime.Duration
      description: A duration with the given number of nanoseconds.
    content.vb: Public Shared Function FromNanoseconds(nanoseconds As Double) As Duration
  overload: NodaTime.Duration.FromNanoseconds*
  nameWithType.vb: Duration.FromNanoseconds(Double)
  fullName.vb: NodaTime.Duration.FromNanoseconds(Double)
  name.vb: FromNanoseconds(Double)
- uid: NodaTime.Duration.FromNanoseconds(System.Numerics.BigInteger)
  commentId: M:NodaTime.Duration.FromNanoseconds(System.Numerics.BigInteger)
  id: FromNanoseconds(System.Numerics.BigInteger)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: FromNanoseconds(BigInteger)
  nameWithType: Duration.FromNanoseconds(BigInteger)
  fullName: NodaTime.Duration.FromNanoseconds(System.Numerics.BigInteger)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Converts a number of nanoseconds expressed as a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> into a duration.
  example: []
  syntax:
    content: public static Duration FromNanoseconds(BigInteger nanoseconds)
    parameters:
    - id: nanoseconds
      type: System.Numerics.BigInteger
      description: The number of nanoseconds to represent.
    return:
      type: NodaTime.Duration
      description: A duration with the given number of nanoseconds.
    content.vb: Public Shared Function FromNanoseconds(nanoseconds As BigInteger) As Duration
  overload: NodaTime.Duration.FromNanoseconds*
- uid: NodaTime.Duration.FromNanoseconds(System.Int128)
  commentId: M:NodaTime.Duration.FromNanoseconds(System.Int128)
  id: FromNanoseconds(System.Int128)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: FromNanoseconds(Int128)
  nameWithType: Duration.FromNanoseconds(Int128)
  fullName: NodaTime.Duration.FromNanoseconds(System.Int128)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Converts a number of nanoseconds expressed as an <xref href="System.Int128" data-throw-if-not-resolved="false"></xref> into a duration.
  example: []
  syntax:
    content: public static Duration FromNanoseconds(Int128 nanoseconds)
    parameters:
    - id: nanoseconds
      type: System.Int128
      description: The number of nanoseconds to represent.
    return:
      type: NodaTime.Duration
      description: A duration with the given number of nanoseconds.
    content.vb: Public Shared Function FromNanoseconds(nanoseconds As Int128) As Duration
  overload: NodaTime.Duration.FromNanoseconds*
- uid: NodaTime.Duration.FromTimeSpan(System.TimeSpan)
  commentId: M:NodaTime.Duration.FromTimeSpan(System.TimeSpan)
  id: FromTimeSpan(System.TimeSpan)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: FromTimeSpan(TimeSpan)
  nameWithType: Duration.FromTimeSpan(TimeSpan)
  fullName: NodaTime.Duration.FromTimeSpan(System.TimeSpan)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Returns a <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> that represents the same number of ticks as the

    given <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static Duration FromTimeSpan(TimeSpan timeSpan)
    parameters:
    - id: timeSpan
      type: System.TimeSpan
      description: The TimeSpan value to convert
    return:
      type: NodaTime.Duration
      description: A new Duration with the same number of ticks as the given TimeSpan.
    content.vb: Public Shared Function FromTimeSpan(timeSpan As TimeSpan) As Duration
  overload: NodaTime.Duration.FromTimeSpan*
- uid: NodaTime.Duration.ToTimeSpan
  commentId: M:NodaTime.Duration.ToTimeSpan
  id: ToTimeSpan
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: ToTimeSpan()
  nameWithType: Duration.ToTimeSpan()
  fullName: NodaTime.Duration.ToTimeSpan()
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Returns a <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents the same number of ticks as this

    <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref>.
  remarks: >-
    If the number of nanoseconds in a duration is not a whole number of ticks, it is truncated towards zero.

    For example, durations in the range [-99ns, 99ns] would all count as 0 ticks.
  example: []
  syntax:
    content: public TimeSpan ToTimeSpan()
    return:
      type: System.TimeSpan
      description: A new TimeSpan with the same number of ticks as this Duration.
    content.vb: Public Function ToTimeSpan() As TimeSpan
  overload: NodaTime.Duration.ToTimeSpan*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The number of ticks cannot be represented a signed 64-bit integer.
- uid: NodaTime.Duration.AddSchema(System.Xml.Schema.XmlSchemaSet)
  commentId: M:NodaTime.Duration.AddSchema(System.Xml.Schema.XmlSchemaSet)
  id: AddSchema(System.Xml.Schema.XmlSchemaSet)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: AddSchema(XmlSchemaSet)
  nameWithType: Duration.AddSchema(XmlSchemaSet)
  fullName: NodaTime.Duration.AddSchema(System.Xml.Schema.XmlSchemaSet)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Adds the XML schema type describing the structure of the <xref href="NodaTime.Duration" data-throw-if-not-resolved="false"></xref> XML serialization to the given <code class="paramref">xmlSchemaSet</code>.
  example: []
  syntax:
    content: public static XmlQualifiedName AddSchema(XmlSchemaSet xmlSchemaSet)
    parameters:
    - id: xmlSchemaSet
      type: System.Xml.Schema.XmlSchemaSet
      description: The XML schema set provided by <xref href="System.Xml.Serialization.XmlSchemaExporter" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Xml.XmlQualifiedName
      description: The qualified name of the schema type that was added to the <code class="paramref">xmlSchemaSet</code>.
    content.vb: Public Shared Function AddSchema(xmlSchemaSet As XmlSchemaSet) As XmlQualifiedName
  overload: NodaTime.Duration.AddSchema*
- uid: NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#GetSchema
  commentId: M:NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#GetSchema
  id: System#Xml#Serialization#IXmlSerializable#GetSchema
  isEii: true
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: IXmlSerializable.GetSchema()
  nameWithType: Duration.IXmlSerializable.GetSchema()
  fullName: NodaTime.Duration.System.Xml.Serialization.IXmlSerializable.GetSchema()
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: This method is reserved and should not be used. When implementing the <code>IXmlSerializable</code> interface, you should return <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a> (<code>Nothing</code> in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <xref href="System.Xml.Serialization.XmlSchemaProviderAttribute" data-throw-if-not-resolved="false"></xref> to the class.
  example: []
  syntax:
    content: XmlSchema IXmlSerializable.GetSchema()
    return:
      type: System.Xml.Schema.XmlSchema
      description: An <xref href="System.Xml.Schema.XmlSchema" data-throw-if-not-resolved="false"></xref> that describes the XML representation of the object that is produced by the <xref href="System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" data-throw-if-not-resolved="false"></xref> method and consumed by the <xref href="System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" data-throw-if-not-resolved="false"></xref> method.
    content.vb: ''
  overload: NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#GetSchema*
  nameWithType.vb: ''
  fullName.vb: ''
  name.vb: ''
- uid: NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  commentId: M:NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  id: System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  isEii: true
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: IXmlSerializable.ReadXml(XmlReader)
  nameWithType: Duration.IXmlSerializable.ReadXml(XmlReader)
  fullName: NodaTime.Duration.System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Generates an object from its XML representation.
  example: []
  syntax:
    content: void IXmlSerializable.ReadXml(XmlReader reader)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: The <xref href="System.Xml.XmlReader" data-throw-if-not-resolved="false"></xref> stream from which the object is deserialized.
    content.vb: ''
  overload: NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#ReadXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  nameWithType.vb: ''
  fullName.vb: ''
  name.vb: ''
- uid: NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  commentId: M:NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  id: System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  isEii: true
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: Duration.IXmlSerializable.WriteXml(XmlWriter)
  fullName: NodaTime.Duration.System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Converts an object into its XML representation.
  example: []
  syntax:
    content: void IXmlSerializable.WriteXml(XmlWriter writer)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: The <xref href="System.Xml.XmlWriter" data-throw-if-not-resolved="false"></xref> stream to which the object is serialized.
    content.vb: ''
  overload: NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#WriteXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  nameWithType.vb: ''
  fullName.vb: ''
  name.vb: ''
- uid: NodaTime.Duration.ToInt64Nanoseconds
  commentId: M:NodaTime.Duration.ToInt64Nanoseconds
  id: ToInt64Nanoseconds
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: ToInt64Nanoseconds()
  nameWithType: Duration.ToInt64Nanoseconds()
  fullName: NodaTime.Duration.ToInt64Nanoseconds()
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Conversion to an <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> number of nanoseconds. This will fail if the number of nanoseconds is

    out of the range of <code>Int64</code>, which is approximately 292 years (positive or negative).
  example: []
  syntax:
    content: public long ToInt64Nanoseconds()
    return:
      type: System.Int64
      description: This duration as a number of nanoseconds, represented as an <code>Int64</code>.
    content.vb: Public Function ToInt64Nanoseconds() As Long
  overload: NodaTime.Duration.ToInt64Nanoseconds*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The number of nanoseconds is outside the representable range.
- uid: NodaTime.Duration.ToBigIntegerNanoseconds
  commentId: M:NodaTime.Duration.ToBigIntegerNanoseconds
  id: ToBigIntegerNanoseconds
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: ToBigIntegerNanoseconds()
  nameWithType: Duration.ToBigIntegerNanoseconds()
  fullName: NodaTime.Duration.ToBigIntegerNanoseconds()
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Conversion to a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> number of nanoseconds, as a convenient built-in numeric

    type which can always represent values in the range we need.
  example: []
  syntax:
    content: public BigInteger ToBigIntegerNanoseconds()
    return:
      type: System.Numerics.BigInteger
      description: This duration as a number of nanoseconds, represented as a <code>BigInteger</code>.
    content.vb: Public Function ToBigIntegerNanoseconds() As BigInteger
  overload: NodaTime.Duration.ToBigIntegerNanoseconds*
- uid: NodaTime.Duration.ToInt128Nanoseconds
  commentId: M:NodaTime.Duration.ToInt128Nanoseconds
  id: ToInt128Nanoseconds
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: ToInt128Nanoseconds()
  nameWithType: Duration.ToInt128Nanoseconds()
  fullName: NodaTime.Duration.ToInt128Nanoseconds()
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: >-
    Conversion to a <xref href="System.Int128" data-throw-if-not-resolved="false"></xref> number of nanoseconds, as a convenient built-in numeric

    type which can always represent values in the range we need.
  example: []
  syntax:
    content: public Int128 ToInt128Nanoseconds()
    return:
      type: System.Int128
      description: This duration as a number of nanoseconds, represented as a <code>BigInteger</code>.
    content.vb: Public Function ToInt128Nanoseconds() As Int128
  overload: NodaTime.Duration.ToInt128Nanoseconds*
- uid: NodaTime.Duration.Max(NodaTime.Duration,NodaTime.Duration)
  commentId: M:NodaTime.Duration.Max(NodaTime.Duration,NodaTime.Duration)
  id: Max(NodaTime.Duration,NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Max(Duration, Duration)
  nameWithType: Duration.Max(Duration, Duration)
  fullName: NodaTime.Duration.Max(NodaTime.Duration, NodaTime.Duration)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns the larger duration of the given two.
  remarks: >-
    A "larger" duration is one that advances time by more than a "smaller" one. This means

    that a positive duration is always larger than a negative one, for example. (This is the same

    comparison used by the binary comparison operators.)
  example: []
  syntax:
    content: public static Duration Max(Duration x, Duration y)
    parameters:
    - id: x
      type: NodaTime.Duration
      description: The first duration to compare.
    - id: y
      type: NodaTime.Duration
      description: The second duration to compare.
    return:
      type: NodaTime.Duration
      description: The larger duration of <code class="paramref">x</code> or <code class="paramref">y</code>.
    content.vb: Public Shared Function Max(x As Duration, y As Duration) As Duration
  overload: NodaTime.Duration.Max*
- uid: NodaTime.Duration.Min(NodaTime.Duration,NodaTime.Duration)
  commentId: M:NodaTime.Duration.Min(NodaTime.Duration,NodaTime.Duration)
  id: Min(NodaTime.Duration,NodaTime.Duration)
  parent: NodaTime.Duration
  langs:
  - csharp
  - vb
  name: Min(Duration, Duration)
  nameWithType: Duration.Min(Duration, Duration)
  fullName: NodaTime.Duration.Min(NodaTime.Duration, NodaTime.Duration)
  type: Method
  assemblies:
  - NodaTime
  namespace: NodaTime
  summary: Returns the smaller duration of the given two.
  remarks: >-
    A "larger" duration is one that advances time by more than a "smaller" one. This means

    that a positive duration is always larger than a negative one, for example. (This is the same

    comparison used by the binary comparison operators.)
  example: []
  syntax:
    content: public static Duration Min(Duration x, Duration y)
    parameters:
    - id: x
      type: NodaTime.Duration
      description: The first duration to compare.
    - id: y
      type: NodaTime.Duration
      description: The second duration to compare.
    return:
      type: NodaTime.Duration
      description: The smaller duration of <code class="paramref">x</code> or <code class="paramref">y</code>.
    content.vb: Public Shared Function Min(x As Duration, y As Duration) As Duration
  overload: NodaTime.Duration.Min*
references:
- uid: NodaTime.Instant
  commentId: T:NodaTime.Instant
  parent: NodaTime
  href: NodaTime.Instant.html
  name: Instant
  nameWithType: Instant
  fullName: NodaTime.Instant
- uid: NodaTime.Period
  commentId: T:NodaTime.Period
  parent: NodaTime
  href: NodaTime.Period.html
  name: Period
  nameWithType: Period
  fullName: NodaTime.Period
- uid: NodaTime.Duration
  commentId: T:NodaTime.Duration
  parent: NodaTime
  href: NodaTime.Duration.html
  name: Duration
  nameWithType: Duration
  fullName: NodaTime.Duration
- uid: NodaTime.ZonedDateTime
  commentId: T:NodaTime.ZonedDateTime
  parent: NodaTime
  href: NodaTime.ZonedDateTime.html
  name: ZonedDateTime
  nameWithType: ZonedDateTime
  fullName: NodaTime.ZonedDateTime
- uid: NodaTime.LocalDateTime
  commentId: T:NodaTime.LocalDateTime
  parent: NodaTime
  href: NodaTime.LocalDateTime.html
  name: LocalDateTime
  nameWithType: LocalDateTime
  fullName: NodaTime.LocalDateTime
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Int64.MinValue
  commentId: F:System.Int64.MinValue
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int64.minvalue
  name: MinValue
  nameWithType: long.MinValue
  fullName: long.MinValue
  nameWithType.vb: Long.MinValue
  fullName.vb: Long.MinValue
- uid: System.Int64.MaxValue
  commentId: F:System.Int64.MaxValue
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int64.maxvalue
  name: MaxValue
  nameWithType: long.MaxValue
  fullName: long.MaxValue
  nameWithType.vb: Long.MaxValue
  fullName.vb: Long.MaxValue
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: NodaTime.Duration.Zero
  commentId: P:NodaTime.Duration.Zero
  href: NodaTime.Duration.html#NodaTime_Duration_Zero
  name: Zero
  nameWithType: Duration.Zero
  fullName: NodaTime.Duration.Zero
- uid: NodaTime
  commentId: N:NodaTime
  href: NodaTime.html
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System.IEquatable{NodaTime.Duration}
  commentId: T:System.IEquatable{NodaTime.Duration}
  parent: System
  definition: System.IEquatable`1
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<Duration>
  nameWithType: IEquatable<Duration>
  fullName: System.IEquatable<NodaTime.Duration>
  nameWithType.vb: IEquatable(Of Duration)
  fullName.vb: System.IEquatable(Of NodaTime.Duration)
  name.vb: IEquatable(Of Duration)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: )
- uid: System.IComparable{NodaTime.Duration}
  commentId: T:System.IComparable{NodaTime.Duration}
  parent: System
  definition: System.IComparable`1
  href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  name: IComparable<Duration>
  nameWithType: IComparable<Duration>
  fullName: System.IComparable<NodaTime.Duration>
  nameWithType.vb: IComparable(Of Duration)
  fullName.vb: System.IComparable(Of NodaTime.Duration)
  name.vb: IComparable(Of Duration)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: <
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: (
  - name: Of
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: )
- uid: System.IComparable
  commentId: T:System.IComparable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.Xml.Serialization.IXmlSerializable
  commentId: T:System.Xml.Serialization.IXmlSerializable
  parent: System.Xml.Serialization
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable
  name: IXmlSerializable
  nameWithType: IXmlSerializable
  fullName: System.Xml.Serialization.IXmlSerializable
- uid: System.IFormattable
  commentId: T:System.IFormattable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iformattable
  name: IFormattable
  nameWithType: IFormattable
  fullName: System.IFormattable
- uid: System.Numerics.IAdditionOperators{NodaTime.Duration,NodaTime.Duration,NodaTime.Duration}
  commentId: T:System.Numerics.IAdditionOperators{NodaTime.Duration,NodaTime.Duration,NodaTime.Duration}
  parent: System.Numerics
  definition: System.Numerics.IAdditionOperators`3
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3
  name: IAdditionOperators<Duration, Duration, Duration>
  nameWithType: IAdditionOperators<Duration, Duration, Duration>
  fullName: System.Numerics.IAdditionOperators<NodaTime.Duration, NodaTime.Duration, NodaTime.Duration>
  nameWithType.vb: IAdditionOperators(Of Duration, Duration, Duration)
  fullName.vb: System.Numerics.IAdditionOperators(Of NodaTime.Duration, NodaTime.Duration, NodaTime.Duration)
  name.vb: IAdditionOperators(Of Duration, Duration, Duration)
  spec.csharp:
  - uid: System.Numerics.IAdditionOperators`3
    name: IAdditionOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3
  - name: <
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IAdditionOperators`3
    name: IAdditionOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3
  - name: (
  - name: Of
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: )
- uid: System.Numerics.ISubtractionOperators{NodaTime.Duration,NodaTime.Duration,NodaTime.Duration}
  commentId: T:System.Numerics.ISubtractionOperators{NodaTime.Duration,NodaTime.Duration,NodaTime.Duration}
  parent: System.Numerics
  definition: System.Numerics.ISubtractionOperators`3
  href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3
  name: ISubtractionOperators<Duration, Duration, Duration>
  nameWithType: ISubtractionOperators<Duration, Duration, Duration>
  fullName: System.Numerics.ISubtractionOperators<NodaTime.Duration, NodaTime.Duration, NodaTime.Duration>
  nameWithType.vb: ISubtractionOperators(Of Duration, Duration, Duration)
  fullName.vb: System.Numerics.ISubtractionOperators(Of NodaTime.Duration, NodaTime.Duration, NodaTime.Duration)
  name.vb: ISubtractionOperators(Of Duration, Duration, Duration)
  spec.csharp:
  - uid: System.Numerics.ISubtractionOperators`3
    name: ISubtractionOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3
  - name: <
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: '>'
  spec.vb:
  - uid: System.Numerics.ISubtractionOperators`3
    name: ISubtractionOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3
  - name: (
  - name: Of
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: )
- uid: System.Numerics.IUnaryNegationOperators{NodaTime.Duration,NodaTime.Duration}
  commentId: T:System.Numerics.IUnaryNegationOperators{NodaTime.Duration,NodaTime.Duration}
  parent: System.Numerics
  definition: System.Numerics.IUnaryNegationOperators`2
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iunarynegationoperators-2
  name: IUnaryNegationOperators<Duration, Duration>
  nameWithType: IUnaryNegationOperators<Duration, Duration>
  fullName: System.Numerics.IUnaryNegationOperators<NodaTime.Duration, NodaTime.Duration>
  nameWithType.vb: IUnaryNegationOperators(Of Duration, Duration)
  fullName.vb: System.Numerics.IUnaryNegationOperators(Of NodaTime.Duration, NodaTime.Duration)
  name.vb: IUnaryNegationOperators(Of Duration, Duration)
  spec.csharp:
  - uid: System.Numerics.IUnaryNegationOperators`2
    name: IUnaryNegationOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iunarynegationoperators-2
  - name: <
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IUnaryNegationOperators`2
    name: IUnaryNegationOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iunarynegationoperators-2
  - name: (
  - name: Of
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: )
- uid: System.Numerics.IUnaryPlusOperators{NodaTime.Duration,NodaTime.Duration}
  commentId: T:System.Numerics.IUnaryPlusOperators{NodaTime.Duration,NodaTime.Duration}
  parent: System.Numerics
  definition: System.Numerics.IUnaryPlusOperators`2
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iunaryplusoperators-2
  name: IUnaryPlusOperators<Duration, Duration>
  nameWithType: IUnaryPlusOperators<Duration, Duration>
  fullName: System.Numerics.IUnaryPlusOperators<NodaTime.Duration, NodaTime.Duration>
  nameWithType.vb: IUnaryPlusOperators(Of Duration, Duration)
  fullName.vb: System.Numerics.IUnaryPlusOperators(Of NodaTime.Duration, NodaTime.Duration)
  name.vb: IUnaryPlusOperators(Of Duration, Duration)
  spec.csharp:
  - uid: System.Numerics.IUnaryPlusOperators`2
    name: IUnaryPlusOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iunaryplusoperators-2
  - name: <
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IUnaryPlusOperators`2
    name: IUnaryPlusOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iunaryplusoperators-2
  - name: (
  - name: Of
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: )
- uid: System.Numerics.IComparisonOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}
  commentId: T:System.Numerics.IComparisonOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}
  parent: System.Numerics
  definition: System.Numerics.IComparisonOperators`3
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3
  name: IComparisonOperators<Duration, Duration, bool>
  nameWithType: IComparisonOperators<Duration, Duration, bool>
  fullName: System.Numerics.IComparisonOperators<NodaTime.Duration, NodaTime.Duration, bool>
  nameWithType.vb: IComparisonOperators(Of Duration, Duration, Boolean)
  fullName.vb: System.Numerics.IComparisonOperators(Of NodaTime.Duration, NodaTime.Duration, Boolean)
  name.vb: IComparisonOperators(Of Duration, Duration, Boolean)
  spec.csharp:
  - uid: System.Numerics.IComparisonOperators`3
    name: IComparisonOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3
  - name: <
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IComparisonOperators`3
    name: IComparisonOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3
  - name: (
  - name: Of
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Numerics.IEqualityOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}
  commentId: T:System.Numerics.IEqualityOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}
  parent: System.Numerics
  definition: System.Numerics.IEqualityOperators`3
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3
  name: IEqualityOperators<Duration, Duration, bool>
  nameWithType: IEqualityOperators<Duration, Duration, bool>
  fullName: System.Numerics.IEqualityOperators<NodaTime.Duration, NodaTime.Duration, bool>
  nameWithType.vb: IEqualityOperators(Of Duration, Duration, Boolean)
  fullName.vb: System.Numerics.IEqualityOperators(Of NodaTime.Duration, NodaTime.Duration, Boolean)
  name.vb: IEqualityOperators(Of Duration, Duration, Boolean)
  spec.csharp:
  - uid: System.Numerics.IEqualityOperators`3
    name: IEqualityOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3
  - name: <
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IEqualityOperators`3
    name: IEqualityOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3
  - name: (
  - name: Of
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Numerics.IMinMaxValue{NodaTime.Duration}
  commentId: T:System.Numerics.IMinMaxValue{NodaTime.Duration}
  parent: System.Numerics
  definition: System.Numerics.IMinMaxValue`1
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iminmaxvalue-1
  name: IMinMaxValue<Duration>
  nameWithType: IMinMaxValue<Duration>
  fullName: System.Numerics.IMinMaxValue<NodaTime.Duration>
  nameWithType.vb: IMinMaxValue(Of Duration)
  fullName.vb: System.Numerics.IMinMaxValue(Of NodaTime.Duration)
  name.vb: IMinMaxValue(Of Duration)
  spec.csharp:
  - uid: System.Numerics.IMinMaxValue`1
    name: IMinMaxValue
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iminmaxvalue-1
  - name: <
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IMinMaxValue`1
    name: IMinMaxValue
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iminmaxvalue-1
  - name: (
  - name: Of
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: )
- uid: System.Numerics.IAdditiveIdentity{NodaTime.Duration,NodaTime.Duration}
  commentId: T:System.Numerics.IAdditiveIdentity{NodaTime.Duration,NodaTime.Duration}
  parent: System.Numerics
  definition: System.Numerics.IAdditiveIdentity`2
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditiveidentity-2
  name: IAdditiveIdentity<Duration, Duration>
  nameWithType: IAdditiveIdentity<Duration, Duration>
  fullName: System.Numerics.IAdditiveIdentity<NodaTime.Duration, NodaTime.Duration>
  nameWithType.vb: IAdditiveIdentity(Of Duration, Duration)
  fullName.vb: System.Numerics.IAdditiveIdentity(Of NodaTime.Duration, NodaTime.Duration)
  name.vb: IAdditiveIdentity(Of Duration, Duration)
  spec.csharp:
  - uid: System.Numerics.IAdditiveIdentity`2
    name: IAdditiveIdentity
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditiveidentity-2
  - name: <
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IAdditiveIdentity`2
    name: IAdditiveIdentity
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditiveidentity-2
  - name: (
  - name: Of
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Xml.Serialization
  commentId: N:System.Xml.Serialization
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Xml.Serialization
  nameWithType: System.Xml.Serialization
  fullName: System.Xml.Serialization
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Xml
    name: Xml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml
  - name: .
  - uid: System.Xml.Serialization
    name: Serialization
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.serialization
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Xml
    name: Xml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml
  - name: .
  - uid: System.Xml.Serialization
    name: Serialization
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.serialization
- uid: System.Numerics.IAdditionOperators`3
  commentId: T:System.Numerics.IAdditionOperators`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3
  name: IAdditionOperators<TSelf, TOther, TResult>
  nameWithType: IAdditionOperators<TSelf, TOther, TResult>
  fullName: System.Numerics.IAdditionOperators<TSelf, TOther, TResult>
  nameWithType.vb: IAdditionOperators(Of TSelf, TOther, TResult)
  fullName.vb: System.Numerics.IAdditionOperators(Of TSelf, TOther, TResult)
  name.vb: IAdditionOperators(Of TSelf, TOther, TResult)
  spec.csharp:
  - uid: System.Numerics.IAdditionOperators`3
    name: IAdditionOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3
  - name: <
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IAdditionOperators`3
    name: IAdditionOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3
  - name: (
  - name: Of
  - name: " "
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Numerics
  commentId: N:System.Numerics
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Numerics
  nameWithType: System.Numerics
  fullName: System.Numerics
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Numerics
    name: Numerics
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Numerics
    name: Numerics
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics
- uid: System.Numerics.ISubtractionOperators`3
  commentId: T:System.Numerics.ISubtractionOperators`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3
  name: ISubtractionOperators<TSelf, TOther, TResult>
  nameWithType: ISubtractionOperators<TSelf, TOther, TResult>
  fullName: System.Numerics.ISubtractionOperators<TSelf, TOther, TResult>
  nameWithType.vb: ISubtractionOperators(Of TSelf, TOther, TResult)
  fullName.vb: System.Numerics.ISubtractionOperators(Of TSelf, TOther, TResult)
  name.vb: ISubtractionOperators(Of TSelf, TOther, TResult)
  spec.csharp:
  - uid: System.Numerics.ISubtractionOperators`3
    name: ISubtractionOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3
  - name: <
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Numerics.ISubtractionOperators`3
    name: ISubtractionOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3
  - name: (
  - name: Of
  - name: " "
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Numerics.IUnaryNegationOperators`2
  commentId: T:System.Numerics.IUnaryNegationOperators`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iunarynegationoperators-2
  name: IUnaryNegationOperators<TSelf, TResult>
  nameWithType: IUnaryNegationOperators<TSelf, TResult>
  fullName: System.Numerics.IUnaryNegationOperators<TSelf, TResult>
  nameWithType.vb: IUnaryNegationOperators(Of TSelf, TResult)
  fullName.vb: System.Numerics.IUnaryNegationOperators(Of TSelf, TResult)
  name.vb: IUnaryNegationOperators(Of TSelf, TResult)
  spec.csharp:
  - uid: System.Numerics.IUnaryNegationOperators`2
    name: IUnaryNegationOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iunarynegationoperators-2
  - name: <
  - name: TSelf
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IUnaryNegationOperators`2
    name: IUnaryNegationOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iunarynegationoperators-2
  - name: (
  - name: Of
  - name: " "
  - name: TSelf
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Numerics.IUnaryPlusOperators`2
  commentId: T:System.Numerics.IUnaryPlusOperators`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iunaryplusoperators-2
  name: IUnaryPlusOperators<TSelf, TResult>
  nameWithType: IUnaryPlusOperators<TSelf, TResult>
  fullName: System.Numerics.IUnaryPlusOperators<TSelf, TResult>
  nameWithType.vb: IUnaryPlusOperators(Of TSelf, TResult)
  fullName.vb: System.Numerics.IUnaryPlusOperators(Of TSelf, TResult)
  name.vb: IUnaryPlusOperators(Of TSelf, TResult)
  spec.csharp:
  - uid: System.Numerics.IUnaryPlusOperators`2
    name: IUnaryPlusOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iunaryplusoperators-2
  - name: <
  - name: TSelf
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IUnaryPlusOperators`2
    name: IUnaryPlusOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iunaryplusoperators-2
  - name: (
  - name: Of
  - name: " "
  - name: TSelf
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Numerics.IComparisonOperators`3
  commentId: T:System.Numerics.IComparisonOperators`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3
  name: IComparisonOperators<TSelf, TOther, TResult>
  nameWithType: IComparisonOperators<TSelf, TOther, TResult>
  fullName: System.Numerics.IComparisonOperators<TSelf, TOther, TResult>
  nameWithType.vb: IComparisonOperators(Of TSelf, TOther, TResult)
  fullName.vb: System.Numerics.IComparisonOperators(Of TSelf, TOther, TResult)
  name.vb: IComparisonOperators(Of TSelf, TOther, TResult)
  spec.csharp:
  - uid: System.Numerics.IComparisonOperators`3
    name: IComparisonOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3
  - name: <
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IComparisonOperators`3
    name: IComparisonOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3
  - name: (
  - name: Of
  - name: " "
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Numerics.IEqualityOperators`3
  commentId: T:System.Numerics.IEqualityOperators`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3
  name: IEqualityOperators<TSelf, TOther, TResult>
  nameWithType: IEqualityOperators<TSelf, TOther, TResult>
  fullName: System.Numerics.IEqualityOperators<TSelf, TOther, TResult>
  nameWithType.vb: IEqualityOperators(Of TSelf, TOther, TResult)
  fullName.vb: System.Numerics.IEqualityOperators(Of TSelf, TOther, TResult)
  name.vb: IEqualityOperators(Of TSelf, TOther, TResult)
  spec.csharp:
  - uid: System.Numerics.IEqualityOperators`3
    name: IEqualityOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3
  - name: <
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IEqualityOperators`3
    name: IEqualityOperators
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3
  - name: (
  - name: Of
  - name: " "
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Numerics.IMinMaxValue`1
  commentId: T:System.Numerics.IMinMaxValue`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iminmaxvalue-1
  name: IMinMaxValue<TSelf>
  nameWithType: IMinMaxValue<TSelf>
  fullName: System.Numerics.IMinMaxValue<TSelf>
  nameWithType.vb: IMinMaxValue(Of TSelf)
  fullName.vb: System.Numerics.IMinMaxValue(Of TSelf)
  name.vb: IMinMaxValue(Of TSelf)
  spec.csharp:
  - uid: System.Numerics.IMinMaxValue`1
    name: IMinMaxValue
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iminmaxvalue-1
  - name: <
  - name: TSelf
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IMinMaxValue`1
    name: IMinMaxValue
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iminmaxvalue-1
  - name: (
  - name: Of
  - name: " "
  - name: TSelf
  - name: )
- uid: System.Numerics.IAdditiveIdentity`2
  commentId: T:System.Numerics.IAdditiveIdentity`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditiveidentity-2
  name: IAdditiveIdentity<TSelf, TResult>
  nameWithType: IAdditiveIdentity<TSelf, TResult>
  fullName: System.Numerics.IAdditiveIdentity<TSelf, TResult>
  nameWithType.vb: IAdditiveIdentity(Of TSelf, TResult)
  fullName.vb: System.Numerics.IAdditiveIdentity(Of TSelf, TResult)
  name.vb: IAdditiveIdentity(Of TSelf, TResult)
  spec.csharp:
  - uid: System.Numerics.IAdditiveIdentity`2
    name: IAdditiveIdentity
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditiveidentity-2
  - name: <
  - name: TSelf
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Numerics.IAdditiveIdentity`2
    name: IAdditiveIdentity
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditiveidentity-2
  - name: (
  - name: Of
  - name: " "
  - name: TSelf
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: NodaTime.Duration.Zero*
  commentId: Overload:NodaTime.Duration.Zero
  href: NodaTime.Duration.html#NodaTime_Duration_Zero
  name: Zero
  nameWithType: Duration.Zero
  fullName: NodaTime.Duration.Zero
- uid: NodaTime.Duration.AdditiveIdentity*
  commentId: Overload:NodaTime.Duration.AdditiveIdentity
  href: NodaTime.Duration.html#NodaTime_Duration_AdditiveIdentity
  name: AdditiveIdentity
  nameWithType: Duration.AdditiveIdentity
  fullName: NodaTime.Duration.AdditiveIdentity
- uid: System.Numerics.IAdditiveIdentity{NodaTime.Duration,NodaTime.Duration}.AdditiveIdentity
  commentId: P:System.Numerics.IAdditiveIdentity{NodaTime.Duration,NodaTime.Duration}.AdditiveIdentity
  parent: System.Numerics.IAdditiveIdentity{NodaTime.Duration,NodaTime.Duration}
  definition: System.Numerics.IAdditiveIdentity`2.AdditiveIdentity
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditiveidentity-2.additiveidentity
  name: AdditiveIdentity
  nameWithType: IAdditiveIdentity<Duration, Duration>.AdditiveIdentity
  fullName: System.Numerics.IAdditiveIdentity<NodaTime.Duration, NodaTime.Duration>.AdditiveIdentity
  nameWithType.vb: IAdditiveIdentity(Of Duration, Duration).AdditiveIdentity
  fullName.vb: System.Numerics.IAdditiveIdentity(Of NodaTime.Duration, NodaTime.Duration).AdditiveIdentity
- uid: System.Numerics.IAdditiveIdentity`2.AdditiveIdentity
  commentId: P:System.Numerics.IAdditiveIdentity`2.AdditiveIdentity
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditiveidentity-2.additiveidentity
  name: AdditiveIdentity
  nameWithType: IAdditiveIdentity<TSelf, TResult>.AdditiveIdentity
  fullName: System.Numerics.IAdditiveIdentity<TSelf, TResult>.AdditiveIdentity
  nameWithType.vb: IAdditiveIdentity(Of TSelf, TResult).AdditiveIdentity
  fullName.vb: System.Numerics.IAdditiveIdentity(Of TSelf, TResult).AdditiveIdentity
- uid: NodaTime.Duration.Epsilon*
  commentId: Overload:NodaTime.Duration.Epsilon
  href: NodaTime.Duration.html#NodaTime_Duration_Epsilon
  name: Epsilon
  nameWithType: Duration.Epsilon
  fullName: NodaTime.Duration.Epsilon
- uid: NodaTime.Duration.MaxValue*
  commentId: Overload:NodaTime.Duration.MaxValue
  href: NodaTime.Duration.html#NodaTime_Duration_MaxValue
  name: MaxValue
  nameWithType: Duration.MaxValue
  fullName: NodaTime.Duration.MaxValue
- uid: System.Numerics.IMinMaxValue{NodaTime.Duration}.MaxValue
  commentId: P:System.Numerics.IMinMaxValue{NodaTime.Duration}.MaxValue
  parent: System.Numerics.IMinMaxValue{NodaTime.Duration}
  definition: System.Numerics.IMinMaxValue`1.MaxValue
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iminmaxvalue-1.maxvalue
  name: MaxValue
  nameWithType: IMinMaxValue<Duration>.MaxValue
  fullName: System.Numerics.IMinMaxValue<NodaTime.Duration>.MaxValue
  nameWithType.vb: IMinMaxValue(Of Duration).MaxValue
  fullName.vb: System.Numerics.IMinMaxValue(Of NodaTime.Duration).MaxValue
- uid: System.Numerics.IMinMaxValue`1.MaxValue
  commentId: P:System.Numerics.IMinMaxValue`1.MaxValue
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iminmaxvalue-1.maxvalue
  name: MaxValue
  nameWithType: IMinMaxValue<TSelf>.MaxValue
  fullName: System.Numerics.IMinMaxValue<TSelf>.MaxValue
  nameWithType.vb: IMinMaxValue(Of TSelf).MaxValue
  fullName.vb: System.Numerics.IMinMaxValue(Of TSelf).MaxValue
- uid: NodaTime.Duration.MinValue*
  commentId: Overload:NodaTime.Duration.MinValue
  href: NodaTime.Duration.html#NodaTime_Duration_MinValue
  name: MinValue
  nameWithType: Duration.MinValue
  fullName: NodaTime.Duration.MinValue
- uid: System.Numerics.IMinMaxValue{NodaTime.Duration}.MinValue
  commentId: P:System.Numerics.IMinMaxValue{NodaTime.Duration}.MinValue
  parent: System.Numerics.IMinMaxValue{NodaTime.Duration}
  definition: System.Numerics.IMinMaxValue`1.MinValue
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iminmaxvalue-1.minvalue
  name: MinValue
  nameWithType: IMinMaxValue<Duration>.MinValue
  fullName: System.Numerics.IMinMaxValue<NodaTime.Duration>.MinValue
  nameWithType.vb: IMinMaxValue(Of Duration).MinValue
  fullName.vb: System.Numerics.IMinMaxValue(Of NodaTime.Duration).MinValue
- uid: System.Numerics.IMinMaxValue`1.MinValue
  commentId: P:System.Numerics.IMinMaxValue`1.MinValue
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iminmaxvalue-1.minvalue
  name: MinValue
  nameWithType: IMinMaxValue<TSelf>.MinValue
  fullName: System.Numerics.IMinMaxValue<TSelf>.MinValue
  nameWithType.vb: IMinMaxValue(Of TSelf).MinValue
  fullName.vb: System.Numerics.IMinMaxValue(Of TSelf).MinValue
- uid: NodaTime.Duration.Days*
  commentId: Overload:NodaTime.Duration.Days
  href: NodaTime.Duration.html#NodaTime_Duration_Days
  name: Days
  nameWithType: Duration.Days
  fullName: NodaTime.Duration.Days
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: NodaTime.Duration.NanosecondOfDay*
  commentId: Overload:NodaTime.Duration.NanosecondOfDay
  href: NodaTime.Duration.html#NodaTime_Duration_NanosecondOfDay
  name: NanosecondOfDay
  nameWithType: Duration.NanosecondOfDay
  fullName: NodaTime.Duration.NanosecondOfDay
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int64
  name: long
  nameWithType: long
  fullName: long
  nameWithType.vb: Long
  fullName.vb: Long
  name.vb: Long
- uid: NodaTime.Duration.Hours*
  commentId: Overload:NodaTime.Duration.Hours
  href: NodaTime.Duration.html#NodaTime_Duration_Hours
  name: Hours
  nameWithType: Duration.Hours
  fullName: NodaTime.Duration.Hours
- uid: NodaTime.Duration.Minutes*
  commentId: Overload:NodaTime.Duration.Minutes
  href: NodaTime.Duration.html#NodaTime_Duration_Minutes
  name: Minutes
  nameWithType: Duration.Minutes
  fullName: NodaTime.Duration.Minutes
- uid: NodaTime.Duration.Seconds*
  commentId: Overload:NodaTime.Duration.Seconds
  href: NodaTime.Duration.html#NodaTime_Duration_Seconds
  name: Seconds
  nameWithType: Duration.Seconds
  fullName: NodaTime.Duration.Seconds
- uid: NodaTime.Duration.Milliseconds*
  commentId: Overload:NodaTime.Duration.Milliseconds
  href: NodaTime.Duration.html#NodaTime_Duration_Milliseconds
  name: Milliseconds
  nameWithType: Duration.Milliseconds
  fullName: NodaTime.Duration.Milliseconds
- uid: NodaTime.Duration.SubsecondTicks*
  commentId: Overload:NodaTime.Duration.SubsecondTicks
  href: NodaTime.Duration.html#NodaTime_Duration_SubsecondTicks
  name: SubsecondTicks
  nameWithType: Duration.SubsecondTicks
  fullName: NodaTime.Duration.SubsecondTicks
- uid: NodaTime.Duration.SubsecondNanoseconds*
  commentId: Overload:NodaTime.Duration.SubsecondNanoseconds
  href: NodaTime.Duration.html#NodaTime_Duration_SubsecondNanoseconds
  name: SubsecondNanoseconds
  nameWithType: Duration.SubsecondNanoseconds
  fullName: NodaTime.Duration.SubsecondNanoseconds
- uid: NodaTime.Duration.TotalTicks
  commentId: P:NodaTime.Duration.TotalTicks
  href: NodaTime.Duration.html#NodaTime_Duration_TotalTicks
  name: TotalTicks
  nameWithType: Duration.TotalTicks
  fullName: NodaTime.Duration.TotalTicks
- uid: System.TimeSpan.Ticks
  commentId: P:System.TimeSpan.Ticks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan.ticks
  name: Ticks
  nameWithType: TimeSpan.Ticks
  fullName: System.TimeSpan.Ticks
- uid: System.OverflowException
  commentId: T:System.OverflowException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.overflowexception
  name: OverflowException
  nameWithType: OverflowException
  fullName: System.OverflowException
- uid: NodaTime.Duration.BclCompatibleTicks*
  commentId: Overload:NodaTime.Duration.BclCompatibleTicks
  href: NodaTime.Duration.html#NodaTime_Duration_BclCompatibleTicks
  name: BclCompatibleTicks
  nameWithType: Duration.BclCompatibleTicks
  fullName: NodaTime.Duration.BclCompatibleTicks
- uid: System.TimeSpan.TotalDays
  commentId: P:System.TimeSpan.TotalDays
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan.totaldays
  name: TotalDays
  nameWithType: TimeSpan.TotalDays
  fullName: System.TimeSpan.TotalDays
- uid: NodaTime.Duration.TotalDays*
  commentId: Overload:NodaTime.Duration.TotalDays
  href: NodaTime.Duration.html#NodaTime_Duration_TotalDays
  name: TotalDays
  nameWithType: Duration.TotalDays
  fullName: NodaTime.Duration.TotalDays
- uid: System.TimeSpan.TotalHours
  commentId: P:System.TimeSpan.TotalHours
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan.totalhours
  name: TotalHours
  nameWithType: TimeSpan.TotalHours
  fullName: System.TimeSpan.TotalHours
- uid: NodaTime.Duration.Hours
  commentId: P:NodaTime.Duration.Hours
  href: NodaTime.Duration.html#NodaTime_Duration_Hours
  name: Hours
  nameWithType: Duration.Hours
  fullName: NodaTime.Duration.Hours
- uid: NodaTime.Duration.TotalHours*
  commentId: Overload:NodaTime.Duration.TotalHours
  href: NodaTime.Duration.html#NodaTime_Duration_TotalHours
  name: TotalHours
  nameWithType: Duration.TotalHours
  fullName: NodaTime.Duration.TotalHours
- uid: System.TimeSpan.TotalMinutes
  commentId: P:System.TimeSpan.TotalMinutes
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan.totalminutes
  name: TotalMinutes
  nameWithType: TimeSpan.TotalMinutes
  fullName: System.TimeSpan.TotalMinutes
- uid: NodaTime.Duration.Minutes
  commentId: P:NodaTime.Duration.Minutes
  href: NodaTime.Duration.html#NodaTime_Duration_Minutes
  name: Minutes
  nameWithType: Duration.Minutes
  fullName: NodaTime.Duration.Minutes
- uid: NodaTime.Duration.TotalMinutes*
  commentId: Overload:NodaTime.Duration.TotalMinutes
  href: NodaTime.Duration.html#NodaTime_Duration_TotalMinutes
  name: TotalMinutes
  nameWithType: Duration.TotalMinutes
  fullName: NodaTime.Duration.TotalMinutes
- uid: System.TimeSpan.TotalSeconds
  commentId: P:System.TimeSpan.TotalSeconds
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan.totalseconds
  name: TotalSeconds
  nameWithType: TimeSpan.TotalSeconds
  fullName: System.TimeSpan.TotalSeconds
- uid: NodaTime.Duration.Seconds
  commentId: P:NodaTime.Duration.Seconds
  href: NodaTime.Duration.html#NodaTime_Duration_Seconds
  name: Seconds
  nameWithType: Duration.Seconds
  fullName: NodaTime.Duration.Seconds
- uid: NodaTime.Duration.TotalSeconds*
  commentId: Overload:NodaTime.Duration.TotalSeconds
  href: NodaTime.Duration.html#NodaTime_Duration_TotalSeconds
  name: TotalSeconds
  nameWithType: Duration.TotalSeconds
  fullName: NodaTime.Duration.TotalSeconds
- uid: System.TimeSpan.TotalMilliseconds
  commentId: P:System.TimeSpan.TotalMilliseconds
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.timespan.totalmilliseconds
  name: TotalMilliseconds
  nameWithType: TimeSpan.TotalMilliseconds
  fullName: System.TimeSpan.TotalMilliseconds
- uid: NodaTime.Duration.Milliseconds
  commentId: P:NodaTime.Duration.Milliseconds
  href: NodaTime.Duration.html#NodaTime_Duration_Milliseconds
  name: Milliseconds
  nameWithType: Duration.Milliseconds
  fullName: NodaTime.Duration.Milliseconds
- uid: NodaTime.Duration.TotalMilliseconds*
  commentId: Overload:NodaTime.Duration.TotalMilliseconds
  href: NodaTime.Duration.html#NodaTime_Duration_TotalMilliseconds
  name: TotalMilliseconds
  nameWithType: Duration.TotalMilliseconds
  fullName: NodaTime.Duration.TotalMilliseconds
- uid: NodaTime.Duration.BclCompatibleTicks
  commentId: P:NodaTime.Duration.BclCompatibleTicks
  href: NodaTime.Duration.html#NodaTime_Duration_BclCompatibleTicks
  name: BclCompatibleTicks
  nameWithType: Duration.BclCompatibleTicks
  fullName: NodaTime.Duration.BclCompatibleTicks
- uid: NodaTime.Duration.TotalTicks*
  commentId: Overload:NodaTime.Duration.TotalTicks
  href: NodaTime.Duration.html#NodaTime_Duration_TotalTicks
  name: TotalTicks
  nameWithType: Duration.TotalTicks
  fullName: NodaTime.Duration.TotalTicks
- uid: NodaTime.Duration.ToBigIntegerNanoseconds
  commentId: M:NodaTime.Duration.ToBigIntegerNanoseconds
  href: NodaTime.Duration.html#NodaTime_Duration_ToBigIntegerNanoseconds
  name: ToBigIntegerNanoseconds()
  nameWithType: Duration.ToBigIntegerNanoseconds()
  fullName: NodaTime.Duration.ToBigIntegerNanoseconds()
  spec.csharp:
  - uid: NodaTime.Duration.ToBigIntegerNanoseconds
    name: ToBigIntegerNanoseconds
    href: NodaTime.Duration.html#NodaTime_Duration_ToBigIntegerNanoseconds
  - name: (
  - name: )
  spec.vb:
  - uid: NodaTime.Duration.ToBigIntegerNanoseconds
    name: ToBigIntegerNanoseconds
    href: NodaTime.Duration.html#NodaTime_Duration_ToBigIntegerNanoseconds
  - name: (
  - name: )
- uid: NodaTime.Duration.FromNanoseconds(System.Numerics.BigInteger)
  commentId: M:NodaTime.Duration.FromNanoseconds(System.Numerics.BigInteger)
  isExternal: true
  href: NodaTime.Duration.html#NodaTime_Duration_FromNanoseconds_System_Numerics_BigInteger_
  name: FromNanoseconds(BigInteger)
  nameWithType: Duration.FromNanoseconds(BigInteger)
  fullName: NodaTime.Duration.FromNanoseconds(System.Numerics.BigInteger)
  spec.csharp:
  - uid: NodaTime.Duration.FromNanoseconds(System.Numerics.BigInteger)
    name: FromNanoseconds
    href: NodaTime.Duration.html#NodaTime_Duration_FromNanoseconds_System_Numerics_BigInteger_
  - name: (
  - uid: System.Numerics.BigInteger
    name: BigInteger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.biginteger
  - name: )
  spec.vb:
  - uid: NodaTime.Duration.FromNanoseconds(System.Numerics.BigInteger)
    name: FromNanoseconds
    href: NodaTime.Duration.html#NodaTime_Duration_FromNanoseconds_System_Numerics_BigInteger_
  - name: (
  - uid: System.Numerics.BigInteger
    name: BigInteger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.biginteger
  - name: )
- uid: NodaTime.Duration.TotalNanoseconds*
  commentId: Overload:NodaTime.Duration.TotalNanoseconds
  href: NodaTime.Duration.html#NodaTime_Duration_TotalNanoseconds
  name: TotalNanoseconds
  nameWithType: Duration.TotalNanoseconds
  fullName: NodaTime.Duration.TotalNanoseconds
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: NodaTime.Duration.Equals*
  commentId: Overload:NodaTime.Duration.Equals
  href: NodaTime.Duration.html#NodaTime_Duration_Equals_System_Object_
  name: Equals
  nameWithType: Duration.Equals
  fullName: NodaTime.Duration.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
- uid: NodaTime.Duration.GetHashCode*
  commentId: Overload:NodaTime.Duration.GetHashCode
  href: NodaTime.Duration.html#NodaTime_Duration_GetHashCode
  name: GetHashCode
  nameWithType: Duration.GetHashCode
  fullName: NodaTime.Duration.GetHashCode
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
- uid: NodaTime.Duration.ToString*
  commentId: Overload:NodaTime.Duration.ToString
  href: NodaTime.Duration.html#NodaTime_Duration_ToString
  name: ToString
  nameWithType: Duration.ToString
  fullName: NodaTime.Duration.ToString
- uid: System.IFormatProvider
  commentId: T:System.IFormatProvider
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iformatprovider
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)
  parent: System.IFormattable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iformattable.tostring
  name: ToString(string, IFormatProvider)
  nameWithType: IFormattable.ToString(string, IFormatProvider)
  fullName: System.IFormattable.ToString(string, System.IFormatProvider)
  nameWithType.vb: IFormattable.ToString(String, IFormatProvider)
  fullName.vb: System.IFormattable.ToString(String, System.IFormatProvider)
  name.vb: ToString(String, IFormatProvider)
  spec.csharp:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iformattable.tostring
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.IFormatProvider
    name: IFormatProvider
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iformatprovider
  - name: )
  spec.vb:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iformattable.tostring
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.IFormatProvider
    name: IFormatProvider
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iformatprovider
  - name: )
- uid: NodaTime.Duration.op_Addition*
  commentId: Overload:NodaTime.Duration.op_Addition
  href: NodaTime.Duration.html#NodaTime_Duration_op_Addition_NodaTime_Duration_NodaTime_Duration_
  name: operator +
  nameWithType: Duration.operator +
  fullName: NodaTime.Duration.operator +
  nameWithType.vb: Duration.+
  fullName.vb: NodaTime.Duration.+
  name.vb: +
  spec.csharp:
  - name: operator
  - name: " "
  - uid: NodaTime.Duration.op_Addition*
    name: +
    href: NodaTime.Duration.html#NodaTime_Duration_op_Addition_NodaTime_Duration_NodaTime_Duration_
- uid: System.Numerics.IAdditionOperators{NodaTime.Duration,NodaTime.Duration,NodaTime.Duration}.op_Addition(NodaTime.Duration,NodaTime.Duration)
  commentId: M:System.Numerics.IAdditionOperators{NodaTime.Duration,NodaTime.Duration,NodaTime.Duration}.op_Addition(NodaTime.Duration,NodaTime.Duration)
  parent: System.Numerics.IAdditionOperators{NodaTime.Duration,NodaTime.Duration,NodaTime.Duration}
  definition: System.Numerics.IAdditionOperators`3.op_Addition(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3.op_addition
  name: operator +(Duration, Duration)
  nameWithType: IAdditionOperators<Duration, Duration, Duration>.operator +(Duration, Duration)
  fullName: System.Numerics.IAdditionOperators<NodaTime.Duration, NodaTime.Duration, NodaTime.Duration>.operator +(NodaTime.Duration, NodaTime.Duration)
  nameWithType.vb: IAdditionOperators(Of Duration, Duration, Duration).+(Duration, Duration)
  fullName.vb: System.Numerics.IAdditionOperators(Of NodaTime.Duration, NodaTime.Duration, NodaTime.Duration).+(NodaTime.Duration, NodaTime.Duration)
  name.vb: +(Duration, Duration)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IAdditionOperators{NodaTime.Duration,NodaTime.Duration,NodaTime.Duration}.op_Addition(NodaTime.Duration,NodaTime.Duration)
    name: +
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3.op_addition
  - name: (
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: )
  spec.vb:
  - name: +
  - name: (
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: )
- uid: System.Numerics.IAdditionOperators`3.op_Addition(`0,`1)
  commentId: M:System.Numerics.IAdditionOperators`3.op_Addition(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3.op_addition
  name: operator +(TSelf, TOther)
  nameWithType: IAdditionOperators<TSelf, TOther, TResult>.operator +(TSelf, TOther)
  fullName: System.Numerics.IAdditionOperators<TSelf, TOther, TResult>.operator +(TSelf, TOther)
  nameWithType.vb: IAdditionOperators(Of TSelf, TOther, TResult).+(TSelf, TOther)
  fullName.vb: System.Numerics.IAdditionOperators(Of TSelf, TOther, TResult).+(TSelf, TOther)
  name.vb: +(TSelf, TOther)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IAdditionOperators`3.op_Addition(`0,`1)
    name: +
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iadditionoperators-3.op_addition
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: +
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: NodaTime.Duration.op_UnaryPlus*
  commentId: Overload:NodaTime.Duration.op_UnaryPlus
  href: NodaTime.Duration.html#NodaTime_Duration_op_UnaryPlus_NodaTime_Duration_
  name: operator +
  nameWithType: Duration.operator +
  fullName: NodaTime.Duration.operator +
  nameWithType.vb: Duration.+
  fullName.vb: NodaTime.Duration.+
  name.vb: +
  spec.csharp:
  - name: operator
  - name: " "
  - uid: NodaTime.Duration.op_UnaryPlus*
    name: +
    href: NodaTime.Duration.html#NodaTime_Duration_op_UnaryPlus_NodaTime_Duration_
- uid: System.Numerics.IUnaryPlusOperators{NodaTime.Duration,NodaTime.Duration}.op_UnaryPlus(NodaTime.Duration)
  commentId: M:System.Numerics.IUnaryPlusOperators{NodaTime.Duration,NodaTime.Duration}.op_UnaryPlus(NodaTime.Duration)
  parent: System.Numerics.IUnaryPlusOperators{NodaTime.Duration,NodaTime.Duration}
  definition: System.Numerics.IUnaryPlusOperators`2.op_UnaryPlus(`0)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iunaryplusoperators-2.op_unaryplus
  name: operator +(Duration)
  nameWithType: IUnaryPlusOperators<Duration, Duration>.operator +(Duration)
  fullName: System.Numerics.IUnaryPlusOperators<NodaTime.Duration, NodaTime.Duration>.operator +(NodaTime.Duration)
  nameWithType.vb: IUnaryPlusOperators(Of Duration, Duration).+(Duration)
  fullName.vb: System.Numerics.IUnaryPlusOperators(Of NodaTime.Duration, NodaTime.Duration).+(NodaTime.Duration)
  name.vb: +(Duration)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IUnaryPlusOperators{NodaTime.Duration,NodaTime.Duration}.op_UnaryPlus(NodaTime.Duration)
    name: +
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iunaryplusoperators-2.op_unaryplus
  - name: (
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: )
  spec.vb:
  - name: +
  - name: (
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: )
- uid: System.Numerics.IUnaryPlusOperators`2.op_UnaryPlus(`0)
  commentId: M:System.Numerics.IUnaryPlusOperators`2.op_UnaryPlus(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iunaryplusoperators-2.op_unaryplus
  name: operator +(TSelf)
  nameWithType: IUnaryPlusOperators<TSelf, TResult>.operator +(TSelf)
  fullName: System.Numerics.IUnaryPlusOperators<TSelf, TResult>.operator +(TSelf)
  nameWithType.vb: IUnaryPlusOperators(Of TSelf, TResult).+(TSelf)
  fullName.vb: System.Numerics.IUnaryPlusOperators(Of TSelf, TResult).+(TSelf)
  name.vb: +(TSelf)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IUnaryPlusOperators`2.op_UnaryPlus(`0)
    name: +
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iunaryplusoperators-2.op_unaryplus
  - name: (
  - name: TSelf
  - name: )
  spec.vb:
  - name: +
  - name: (
  - name: TSelf
  - name: )
- uid: NodaTime.Duration.Add*
  commentId: Overload:NodaTime.Duration.Add
  href: NodaTime.Duration.html#NodaTime_Duration_Add_NodaTime_Duration_NodaTime_Duration_
  name: Add
  nameWithType: Duration.Add
  fullName: NodaTime.Duration.Add
- uid: NodaTime.Duration.Plus*
  commentId: Overload:NodaTime.Duration.Plus
  href: NodaTime.Duration.html#NodaTime_Duration_Plus_NodaTime_Duration_
  name: Plus
  nameWithType: Duration.Plus
  fullName: NodaTime.Duration.Plus
- uid: NodaTime.Duration.op_Subtraction*
  commentId: Overload:NodaTime.Duration.op_Subtraction
  href: NodaTime.Duration.html#NodaTime_Duration_op_Subtraction_NodaTime_Duration_NodaTime_Duration_
  name: operator -
  nameWithType: Duration.operator -
  fullName: NodaTime.Duration.operator -
  nameWithType.vb: Duration.-
  fullName.vb: NodaTime.Duration.-
  name.vb: '-'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: NodaTime.Duration.op_Subtraction*
    name: '-'
    href: NodaTime.Duration.html#NodaTime_Duration_op_Subtraction_NodaTime_Duration_NodaTime_Duration_
- uid: System.Numerics.ISubtractionOperators{NodaTime.Duration,NodaTime.Duration,NodaTime.Duration}.op_Subtraction(NodaTime.Duration,NodaTime.Duration)
  commentId: M:System.Numerics.ISubtractionOperators{NodaTime.Duration,NodaTime.Duration,NodaTime.Duration}.op_Subtraction(NodaTime.Duration,NodaTime.Duration)
  parent: System.Numerics.ISubtractionOperators{NodaTime.Duration,NodaTime.Duration,NodaTime.Duration}
  definition: System.Numerics.ISubtractionOperators`3.op_Subtraction(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3.op_subtraction
  name: operator -(Duration, Duration)
  nameWithType: ISubtractionOperators<Duration, Duration, Duration>.operator -(Duration, Duration)
  fullName: System.Numerics.ISubtractionOperators<NodaTime.Duration, NodaTime.Duration, NodaTime.Duration>.operator -(NodaTime.Duration, NodaTime.Duration)
  nameWithType.vb: ISubtractionOperators(Of Duration, Duration, Duration).-(Duration, Duration)
  fullName.vb: System.Numerics.ISubtractionOperators(Of NodaTime.Duration, NodaTime.Duration, NodaTime.Duration).-(NodaTime.Duration, NodaTime.Duration)
  name.vb: -(Duration, Duration)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.ISubtractionOperators{NodaTime.Duration,NodaTime.Duration,NodaTime.Duration}.op_Subtraction(NodaTime.Duration,NodaTime.Duration)
    name: '-'
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3.op_subtraction
  - name: (
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: )
  spec.vb:
  - name: '-'
  - name: (
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: )
- uid: System.Numerics.ISubtractionOperators`3.op_Subtraction(`0,`1)
  commentId: M:System.Numerics.ISubtractionOperators`3.op_Subtraction(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3.op_subtraction
  name: operator -(TSelf, TOther)
  nameWithType: ISubtractionOperators<TSelf, TOther, TResult>.operator -(TSelf, TOther)
  fullName: System.Numerics.ISubtractionOperators<TSelf, TOther, TResult>.operator -(TSelf, TOther)
  nameWithType.vb: ISubtractionOperators(Of TSelf, TOther, TResult).-(TSelf, TOther)
  fullName.vb: System.Numerics.ISubtractionOperators(Of TSelf, TOther, TResult).-(TSelf, TOther)
  name.vb: -(TSelf, TOther)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.ISubtractionOperators`3.op_Subtraction(`0,`1)
    name: '-'
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.isubtractionoperators-3.op_subtraction
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: '-'
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: NodaTime.Duration.Subtract*
  commentId: Overload:NodaTime.Duration.Subtract
  href: NodaTime.Duration.html#NodaTime_Duration_Subtract_NodaTime_Duration_NodaTime_Duration_
  name: Subtract
  nameWithType: Duration.Subtract
  fullName: NodaTime.Duration.Subtract
- uid: NodaTime.Duration.Minus*
  commentId: Overload:NodaTime.Duration.Minus
  href: NodaTime.Duration.html#NodaTime_Duration_Minus_NodaTime_Duration_
  name: Minus
  nameWithType: Duration.Minus
  fullName: NodaTime.Duration.Minus
- uid: NodaTime.Duration.op_Division*
  commentId: Overload:NodaTime.Duration.op_Division
  href: NodaTime.Duration.html#NodaTime_Duration_op_Division_NodaTime_Duration_System_Int64_
  name: operator /
  nameWithType: Duration.operator /
  fullName: NodaTime.Duration.operator /
  nameWithType.vb: Duration./
  fullName.vb: NodaTime.Duration./
  name.vb: /
  spec.csharp:
  - name: operator
  - name: " "
  - uid: NodaTime.Duration.op_Division*
    name: /
    href: NodaTime.Duration.html#NodaTime_Duration_op_Division_NodaTime_Duration_System_Int64_
- uid: NodaTime.Duration.Divide*
  commentId: Overload:NodaTime.Duration.Divide
  href: NodaTime.Duration.html#NodaTime_Duration_Divide_NodaTime_Duration_System_Int64_
  name: Divide
  nameWithType: Duration.Divide
  fullName: NodaTime.Duration.Divide
- uid: NodaTime.Duration.op_Multiply*
  commentId: Overload:NodaTime.Duration.op_Multiply
  href: NodaTime.Duration.html#NodaTime_Duration_op_Multiply_NodaTime_Duration_System_Double_
  name: operator *
  nameWithType: Duration.operator *
  fullName: NodaTime.Duration.operator *
  nameWithType.vb: Duration.*
  fullName.vb: NodaTime.Duration.*
  name.vb: '*'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: NodaTime.Duration.op_Multiply*
    name: '*'
    href: NodaTime.Duration.html#NodaTime_Duration_op_Multiply_NodaTime_Duration_System_Double_
- uid: NodaTime.Duration.Multiply*
  commentId: Overload:NodaTime.Duration.Multiply
  href: NodaTime.Duration.html#NodaTime_Duration_Multiply_NodaTime_Duration_System_Int64_
  name: Multiply
  nameWithType: Duration.Multiply
  fullName: NodaTime.Duration.Multiply
- uid: NodaTime.Duration.op_Equality*
  commentId: Overload:NodaTime.Duration.op_Equality
  href: NodaTime.Duration.html#NodaTime_Duration_op_Equality_NodaTime_Duration_NodaTime_Duration_
  name: operator ==
  nameWithType: Duration.operator ==
  fullName: NodaTime.Duration.operator ==
  nameWithType.vb: Duration.=
  fullName.vb: NodaTime.Duration.=
  name.vb: =
  spec.csharp:
  - name: operator
  - name: " "
  - uid: NodaTime.Duration.op_Equality*
    name: ==
    href: NodaTime.Duration.html#NodaTime_Duration_op_Equality_NodaTime_Duration_NodaTime_Duration_
- uid: System.Numerics.IEqualityOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}.op_Equality(NodaTime.Duration,NodaTime.Duration)
  commentId: M:System.Numerics.IEqualityOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}.op_Equality(NodaTime.Duration,NodaTime.Duration)
  parent: System.Numerics.IEqualityOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}
  definition: System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_equality
  name: operator ==(Duration, Duration)
  nameWithType: IEqualityOperators<Duration, Duration, bool>.operator ==(Duration, Duration)
  fullName: System.Numerics.IEqualityOperators<NodaTime.Duration, NodaTime.Duration, bool>.operator ==(NodaTime.Duration, NodaTime.Duration)
  nameWithType.vb: IEqualityOperators(Of Duration, Duration, Boolean).=(Duration, Duration)
  fullName.vb: System.Numerics.IEqualityOperators(Of NodaTime.Duration, NodaTime.Duration, Boolean).=(NodaTime.Duration, NodaTime.Duration)
  name.vb: =(Duration, Duration)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IEqualityOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}.op_Equality(NodaTime.Duration,NodaTime.Duration)
    name: ==
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_equality
  - name: (
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: )
  spec.vb:
  - name: =
  - name: (
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: )
- uid: System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)
  commentId: M:System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_equality
  name: operator ==(TSelf, TOther)
  nameWithType: IEqualityOperators<TSelf, TOther, TResult>.operator ==(TSelf, TOther)
  fullName: System.Numerics.IEqualityOperators<TSelf, TOther, TResult>.operator ==(TSelf, TOther)
  nameWithType.vb: IEqualityOperators(Of TSelf, TOther, TResult).=(TSelf, TOther)
  fullName.vb: System.Numerics.IEqualityOperators(Of TSelf, TOther, TResult).=(TSelf, TOther)
  name.vb: =(TSelf, TOther)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)
    name: ==
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_equality
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: =
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: NodaTime.Duration.op_Inequality*
  commentId: Overload:NodaTime.Duration.op_Inequality
  href: NodaTime.Duration.html#NodaTime_Duration_op_Inequality_NodaTime_Duration_NodaTime_Duration_
  name: operator !=
  nameWithType: Duration.operator !=
  fullName: NodaTime.Duration.operator !=
  nameWithType.vb: Duration.<>
  fullName.vb: NodaTime.Duration.<>
  name.vb: <>
  spec.csharp:
  - name: operator
  - name: " "
  - uid: NodaTime.Duration.op_Inequality*
    name: '!='
    href: NodaTime.Duration.html#NodaTime_Duration_op_Inequality_NodaTime_Duration_NodaTime_Duration_
- uid: System.Numerics.IEqualityOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}.op_Inequality(NodaTime.Duration,NodaTime.Duration)
  commentId: M:System.Numerics.IEqualityOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}.op_Inequality(NodaTime.Duration,NodaTime.Duration)
  parent: System.Numerics.IEqualityOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}
  definition: System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_inequality
  name: operator !=(Duration, Duration)
  nameWithType: IEqualityOperators<Duration, Duration, bool>.operator !=(Duration, Duration)
  fullName: System.Numerics.IEqualityOperators<NodaTime.Duration, NodaTime.Duration, bool>.operator !=(NodaTime.Duration, NodaTime.Duration)
  nameWithType.vb: IEqualityOperators(Of Duration, Duration, Boolean).<>(Duration, Duration)
  fullName.vb: System.Numerics.IEqualityOperators(Of NodaTime.Duration, NodaTime.Duration, Boolean).<>(NodaTime.Duration, NodaTime.Duration)
  name.vb: <>(Duration, Duration)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IEqualityOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}.op_Inequality(NodaTime.Duration,NodaTime.Duration)
    name: '!='
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_inequality
  - name: (
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: )
  spec.vb:
  - name: <>
  - name: (
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: )
- uid: System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)
  commentId: M:System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_inequality
  name: operator !=(TSelf, TOther)
  nameWithType: IEqualityOperators<TSelf, TOther, TResult>.operator !=(TSelf, TOther)
  fullName: System.Numerics.IEqualityOperators<TSelf, TOther, TResult>.operator !=(TSelf, TOther)
  nameWithType.vb: IEqualityOperators(Of TSelf, TOther, TResult).<>(TSelf, TOther)
  fullName.vb: System.Numerics.IEqualityOperators(Of TSelf, TOther, TResult).<>(TSelf, TOther)
  name.vb: <>(TSelf, TOther)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)
    name: '!='
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iequalityoperators-3.op_inequality
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: <>
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: NodaTime.Duration.op_LessThan*
  commentId: Overload:NodaTime.Duration.op_LessThan
  href: NodaTime.Duration.html#NodaTime_Duration_op_LessThan_NodaTime_Duration_NodaTime_Duration_
  name: operator <
  nameWithType: Duration.operator <
  fullName: NodaTime.Duration.operator <
  nameWithType.vb: Duration.<
  fullName.vb: NodaTime.Duration.<
  name.vb: <
  spec.csharp:
  - name: operator
  - name: " "
  - uid: NodaTime.Duration.op_LessThan*
    name: <
    href: NodaTime.Duration.html#NodaTime_Duration_op_LessThan_NodaTime_Duration_NodaTime_Duration_
- uid: System.Numerics.IComparisonOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}.op_LessThan(NodaTime.Duration,NodaTime.Duration)
  commentId: M:System.Numerics.IComparisonOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}.op_LessThan(NodaTime.Duration,NodaTime.Duration)
  parent: System.Numerics.IComparisonOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}
  definition: System.Numerics.IComparisonOperators`3.op_LessThan(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_lessthan
  name: operator <(Duration, Duration)
  nameWithType: IComparisonOperators<Duration, Duration, bool>.operator <(Duration, Duration)
  fullName: System.Numerics.IComparisonOperators<NodaTime.Duration, NodaTime.Duration, bool>.operator <(NodaTime.Duration, NodaTime.Duration)
  nameWithType.vb: IComparisonOperators(Of Duration, Duration, Boolean).<(Duration, Duration)
  fullName.vb: System.Numerics.IComparisonOperators(Of NodaTime.Duration, NodaTime.Duration, Boolean).<(NodaTime.Duration, NodaTime.Duration)
  name.vb: <(Duration, Duration)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IComparisonOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}.op_LessThan(NodaTime.Duration,NodaTime.Duration)
    name: <
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_lessthan
  - name: (
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: )
  spec.vb:
  - name: <
  - name: (
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: )
- uid: System.Numerics.IComparisonOperators`3.op_LessThan(`0,`1)
  commentId: M:System.Numerics.IComparisonOperators`3.op_LessThan(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_lessthan
  name: operator <(TSelf, TOther)
  nameWithType: IComparisonOperators<TSelf, TOther, TResult>.operator <(TSelf, TOther)
  fullName: System.Numerics.IComparisonOperators<TSelf, TOther, TResult>.operator <(TSelf, TOther)
  nameWithType.vb: IComparisonOperators(Of TSelf, TOther, TResult).<(TSelf, TOther)
  fullName.vb: System.Numerics.IComparisonOperators(Of TSelf, TOther, TResult).<(TSelf, TOther)
  name.vb: <(TSelf, TOther)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IComparisonOperators`3.op_LessThan(`0,`1)
    name: <
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_lessthan
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: <
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: NodaTime.Duration.op_LessThanOrEqual*
  commentId: Overload:NodaTime.Duration.op_LessThanOrEqual
  href: NodaTime.Duration.html#NodaTime_Duration_op_LessThanOrEqual_NodaTime_Duration_NodaTime_Duration_
  name: operator <=
  nameWithType: Duration.operator <=
  fullName: NodaTime.Duration.operator <=
  nameWithType.vb: Duration.<=
  fullName.vb: NodaTime.Duration.<=
  name.vb: <=
  spec.csharp:
  - name: operator
  - name: " "
  - uid: NodaTime.Duration.op_LessThanOrEqual*
    name: <=
    href: NodaTime.Duration.html#NodaTime_Duration_op_LessThanOrEqual_NodaTime_Duration_NodaTime_Duration_
- uid: System.Numerics.IComparisonOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}.op_LessThanOrEqual(NodaTime.Duration,NodaTime.Duration)
  commentId: M:System.Numerics.IComparisonOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}.op_LessThanOrEqual(NodaTime.Duration,NodaTime.Duration)
  parent: System.Numerics.IComparisonOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}
  definition: System.Numerics.IComparisonOperators`3.op_LessThanOrEqual(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_lessthanorequal
  name: operator <=(Duration, Duration)
  nameWithType: IComparisonOperators<Duration, Duration, bool>.operator <=(Duration, Duration)
  fullName: System.Numerics.IComparisonOperators<NodaTime.Duration, NodaTime.Duration, bool>.operator <=(NodaTime.Duration, NodaTime.Duration)
  nameWithType.vb: IComparisonOperators(Of Duration, Duration, Boolean).<=(Duration, Duration)
  fullName.vb: System.Numerics.IComparisonOperators(Of NodaTime.Duration, NodaTime.Duration, Boolean).<=(NodaTime.Duration, NodaTime.Duration)
  name.vb: <=(Duration, Duration)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IComparisonOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}.op_LessThanOrEqual(NodaTime.Duration,NodaTime.Duration)
    name: <=
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_lessthanorequal
  - name: (
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: )
  spec.vb:
  - name: <=
  - name: (
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: )
- uid: System.Numerics.IComparisonOperators`3.op_LessThanOrEqual(`0,`1)
  commentId: M:System.Numerics.IComparisonOperators`3.op_LessThanOrEqual(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_lessthanorequal
  name: operator <=(TSelf, TOther)
  nameWithType: IComparisonOperators<TSelf, TOther, TResult>.operator <=(TSelf, TOther)
  fullName: System.Numerics.IComparisonOperators<TSelf, TOther, TResult>.operator <=(TSelf, TOther)
  nameWithType.vb: IComparisonOperators(Of TSelf, TOther, TResult).<=(TSelf, TOther)
  fullName.vb: System.Numerics.IComparisonOperators(Of TSelf, TOther, TResult).<=(TSelf, TOther)
  name.vb: <=(TSelf, TOther)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IComparisonOperators`3.op_LessThanOrEqual(`0,`1)
    name: <=
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_lessthanorequal
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: <=
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: NodaTime.Duration.op_GreaterThan*
  commentId: Overload:NodaTime.Duration.op_GreaterThan
  href: NodaTime.Duration.html#NodaTime_Duration_op_GreaterThan_NodaTime_Duration_NodaTime_Duration_
  name: operator >
  nameWithType: Duration.operator >
  fullName: NodaTime.Duration.operator >
  nameWithType.vb: Duration.>
  fullName.vb: NodaTime.Duration.>
  name.vb: '>'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: NodaTime.Duration.op_GreaterThan*
    name: '>'
    href: NodaTime.Duration.html#NodaTime_Duration_op_GreaterThan_NodaTime_Duration_NodaTime_Duration_
- uid: System.Numerics.IComparisonOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}.op_GreaterThan(NodaTime.Duration,NodaTime.Duration)
  commentId: M:System.Numerics.IComparisonOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}.op_GreaterThan(NodaTime.Duration,NodaTime.Duration)
  parent: System.Numerics.IComparisonOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}
  definition: System.Numerics.IComparisonOperators`3.op_GreaterThan(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_greaterthan
  name: operator >(Duration, Duration)
  nameWithType: IComparisonOperators<Duration, Duration, bool>.operator >(Duration, Duration)
  fullName: System.Numerics.IComparisonOperators<NodaTime.Duration, NodaTime.Duration, bool>.operator >(NodaTime.Duration, NodaTime.Duration)
  nameWithType.vb: IComparisonOperators(Of Duration, Duration, Boolean).>(Duration, Duration)
  fullName.vb: System.Numerics.IComparisonOperators(Of NodaTime.Duration, NodaTime.Duration, Boolean).>(NodaTime.Duration, NodaTime.Duration)
  name.vb: '>(Duration, Duration)'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IComparisonOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}.op_GreaterThan(NodaTime.Duration,NodaTime.Duration)
    name: '>'
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_greaterthan
  - name: (
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: )
  spec.vb:
  - name: '>'
  - name: (
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: )
- uid: System.Numerics.IComparisonOperators`3.op_GreaterThan(`0,`1)
  commentId: M:System.Numerics.IComparisonOperators`3.op_GreaterThan(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_greaterthan
  name: operator >(TSelf, TOther)
  nameWithType: IComparisonOperators<TSelf, TOther, TResult>.operator >(TSelf, TOther)
  fullName: System.Numerics.IComparisonOperators<TSelf, TOther, TResult>.operator >(TSelf, TOther)
  nameWithType.vb: IComparisonOperators(Of TSelf, TOther, TResult).>(TSelf, TOther)
  fullName.vb: System.Numerics.IComparisonOperators(Of TSelf, TOther, TResult).>(TSelf, TOther)
  name.vb: '>(TSelf, TOther)'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IComparisonOperators`3.op_GreaterThan(`0,`1)
    name: '>'
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_greaterthan
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: '>'
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: NodaTime.Duration.op_GreaterThanOrEqual*
  commentId: Overload:NodaTime.Duration.op_GreaterThanOrEqual
  href: NodaTime.Duration.html#NodaTime_Duration_op_GreaterThanOrEqual_NodaTime_Duration_NodaTime_Duration_
  name: operator >=
  nameWithType: Duration.operator >=
  fullName: NodaTime.Duration.operator >=
  nameWithType.vb: Duration.>=
  fullName.vb: NodaTime.Duration.>=
  name.vb: '>='
  spec.csharp:
  - name: operator
  - name: " "
  - uid: NodaTime.Duration.op_GreaterThanOrEqual*
    name: '>='
    href: NodaTime.Duration.html#NodaTime_Duration_op_GreaterThanOrEqual_NodaTime_Duration_NodaTime_Duration_
- uid: System.Numerics.IComparisonOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}.op_GreaterThanOrEqual(NodaTime.Duration,NodaTime.Duration)
  commentId: M:System.Numerics.IComparisonOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}.op_GreaterThanOrEqual(NodaTime.Duration,NodaTime.Duration)
  parent: System.Numerics.IComparisonOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}
  definition: System.Numerics.IComparisonOperators`3.op_GreaterThanOrEqual(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_greaterthanorequal
  name: operator >=(Duration, Duration)
  nameWithType: IComparisonOperators<Duration, Duration, bool>.operator >=(Duration, Duration)
  fullName: System.Numerics.IComparisonOperators<NodaTime.Duration, NodaTime.Duration, bool>.operator >=(NodaTime.Duration, NodaTime.Duration)
  nameWithType.vb: IComparisonOperators(Of Duration, Duration, Boolean).>=(Duration, Duration)
  fullName.vb: System.Numerics.IComparisonOperators(Of NodaTime.Duration, NodaTime.Duration, Boolean).>=(NodaTime.Duration, NodaTime.Duration)
  name.vb: '>=(Duration, Duration)'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IComparisonOperators{NodaTime.Duration,NodaTime.Duration,System.Boolean}.op_GreaterThanOrEqual(NodaTime.Duration,NodaTime.Duration)
    name: '>='
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_greaterthanorequal
  - name: (
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: )
  spec.vb:
  - name: '>='
  - name: (
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: ','
  - name: " "
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: )
- uid: System.Numerics.IComparisonOperators`3.op_GreaterThanOrEqual(`0,`1)
  commentId: M:System.Numerics.IComparisonOperators`3.op_GreaterThanOrEqual(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_greaterthanorequal
  name: operator >=(TSelf, TOther)
  nameWithType: IComparisonOperators<TSelf, TOther, TResult>.operator >=(TSelf, TOther)
  fullName: System.Numerics.IComparisonOperators<TSelf, TOther, TResult>.operator >=(TSelf, TOther)
  nameWithType.vb: IComparisonOperators(Of TSelf, TOther, TResult).>=(TSelf, TOther)
  fullName.vb: System.Numerics.IComparisonOperators(Of TSelf, TOther, TResult).>=(TSelf, TOther)
  name.vb: '>=(TSelf, TOther)'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IComparisonOperators`3.op_GreaterThanOrEqual(`0,`1)
    name: '>='
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.icomparisonoperators-3.op_greaterthanorequal
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
  spec.vb:
  - name: '>='
  - name: (
  - name: TSelf
  - name: ','
  - name: " "
  - name: TOther
  - name: )
- uid: NodaTime.Duration.op_UnaryNegation*
  commentId: Overload:NodaTime.Duration.op_UnaryNegation
  href: NodaTime.Duration.html#NodaTime_Duration_op_UnaryNegation_NodaTime_Duration_
  name: operator -
  nameWithType: Duration.operator -
  fullName: NodaTime.Duration.operator -
  nameWithType.vb: Duration.-
  fullName.vb: NodaTime.Duration.-
  name.vb: '-'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: NodaTime.Duration.op_UnaryNegation*
    name: '-'
    href: NodaTime.Duration.html#NodaTime_Duration_op_UnaryNegation_NodaTime_Duration_
- uid: System.Numerics.IUnaryNegationOperators{NodaTime.Duration,NodaTime.Duration}.op_UnaryNegation(NodaTime.Duration)
  commentId: M:System.Numerics.IUnaryNegationOperators{NodaTime.Duration,NodaTime.Duration}.op_UnaryNegation(NodaTime.Duration)
  parent: System.Numerics.IUnaryNegationOperators{NodaTime.Duration,NodaTime.Duration}
  definition: System.Numerics.IUnaryNegationOperators`2.op_UnaryNegation(`0)
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iunarynegationoperators-2.op_unarynegation
  name: operator -(Duration)
  nameWithType: IUnaryNegationOperators<Duration, Duration>.operator -(Duration)
  fullName: System.Numerics.IUnaryNegationOperators<NodaTime.Duration, NodaTime.Duration>.operator -(NodaTime.Duration)
  nameWithType.vb: IUnaryNegationOperators(Of Duration, Duration).-(Duration)
  fullName.vb: System.Numerics.IUnaryNegationOperators(Of NodaTime.Duration, NodaTime.Duration).-(NodaTime.Duration)
  name.vb: -(Duration)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IUnaryNegationOperators{NodaTime.Duration,NodaTime.Duration}.op_UnaryNegation(NodaTime.Duration)
    name: '-'
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iunarynegationoperators-2.op_unarynegation
  - name: (
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: )
  spec.vb:
  - name: '-'
  - name: (
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: )
- uid: System.Numerics.IUnaryNegationOperators`2.op_UnaryNegation(`0)
  commentId: M:System.Numerics.IUnaryNegationOperators`2.op_UnaryNegation(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.iunarynegationoperators-2.op_unarynegation
  name: operator -(TSelf)
  nameWithType: IUnaryNegationOperators<TSelf, TResult>.operator -(TSelf)
  fullName: System.Numerics.IUnaryNegationOperators<TSelf, TResult>.operator -(TSelf)
  nameWithType.vb: IUnaryNegationOperators(Of TSelf, TResult).-(TSelf)
  fullName.vb: System.Numerics.IUnaryNegationOperators(Of TSelf, TResult).-(TSelf)
  name.vb: -(TSelf)
  spec.csharp:
  - name: operator
  - name: " "
  - uid: System.Numerics.IUnaryNegationOperators`2.op_UnaryNegation(`0)
    name: '-'
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.iunarynegationoperators-2.op_unarynegation
  - name: (
  - name: TSelf
  - name: )
  spec.vb:
  - name: '-'
  - name: (
  - name: TSelf
  - name: )
- uid: NodaTime.Duration.Negate*
  commentId: Overload:NodaTime.Duration.Negate
  href: NodaTime.Duration.html#NodaTime_Duration_Negate_NodaTime_Duration_
  name: Negate
  nameWithType: Duration.Negate
  fullName: NodaTime.Duration.Negate
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  - name: (
  - name: T
  - name: )
- uid: NodaTime.Duration.CompareTo*
  commentId: Overload:NodaTime.Duration.CompareTo
  href: NodaTime.Duration.html#NodaTime_Duration_CompareTo_NodaTime_Duration_
  name: CompareTo
  nameWithType: Duration.CompareTo
  fullName: NodaTime.Duration.CompareTo
- uid: System.IComparable{NodaTime.Duration}.CompareTo(NodaTime.Duration)
  commentId: M:System.IComparable{NodaTime.Duration}.CompareTo(NodaTime.Duration)
  parent: System.IComparable{NodaTime.Duration}
  definition: System.IComparable`1.CompareTo(`0)
  href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  name: CompareTo(Duration)
  nameWithType: IComparable<Duration>.CompareTo(Duration)
  fullName: System.IComparable<NodaTime.Duration>.CompareTo(NodaTime.Duration)
  nameWithType.vb: IComparable(Of Duration).CompareTo(Duration)
  fullName.vb: System.IComparable(Of NodaTime.Duration).CompareTo(NodaTime.Duration)
  spec.csharp:
  - uid: System.IComparable{NodaTime.Duration}.CompareTo(NodaTime.Duration)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  - name: (
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: )
  spec.vb:
  - uid: System.IComparable{NodaTime.Duration}.CompareTo(NodaTime.Duration)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  - name: (
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: )
- uid: System.IComparable.CompareTo(System.Object)
  commentId: M:System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable.compareto
  name: CompareTo(object)
  nameWithType: IComparable.CompareTo(object)
  fullName: System.IComparable.CompareTo(object)
  nameWithType.vb: IComparable.CompareTo(Object)
  fullName.vb: System.IComparable.CompareTo(Object)
  name.vb: CompareTo(Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable.compareto
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable.compareto
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: NodaTime.Duration.CompareTo(NodaTime.Duration)
  commentId: M:NodaTime.Duration.CompareTo(NodaTime.Duration)
  href: NodaTime.Duration.html#NodaTime_Duration_CompareTo_NodaTime_Duration_
  name: CompareTo(Duration)
  nameWithType: Duration.CompareTo(Duration)
  fullName: NodaTime.Duration.CompareTo(NodaTime.Duration)
  spec.csharp:
  - uid: NodaTime.Duration.CompareTo(NodaTime.Duration)
    name: CompareTo
    href: NodaTime.Duration.html#NodaTime_Duration_CompareTo_NodaTime_Duration_
  - name: (
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: )
  spec.vb:
  - uid: NodaTime.Duration.CompareTo(NodaTime.Duration)
    name: CompareTo
    href: NodaTime.Duration.html#NodaTime_Duration_CompareTo_NodaTime_Duration_
  - name: (
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: )
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: NodaTime.Duration.System#IComparable#CompareTo*
  commentId: Overload:NodaTime.Duration.System#IComparable#CompareTo
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable
  name: IComparable.CompareTo
  nameWithType: Duration.IComparable.CompareTo
  fullName: NodaTime.Duration.System.IComparable.CompareTo
  spec.csharp:
  - uid: System.IComparable*
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable
  - name: .
  - uid: NodaTime.Duration.System#IComparable#CompareTo*
    name: CompareTo
    href: NodaTime.Duration.html#NodaTime_Duration_System_IComparable_CompareTo_System_Object_
- uid: System.IEquatable{NodaTime.Duration}.Equals(NodaTime.Duration)
  commentId: M:System.IEquatable{NodaTime.Duration}.Equals(NodaTime.Duration)
  parent: System.IEquatable{NodaTime.Duration}
  definition: System.IEquatable`1.Equals(`0)
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(Duration)
  nameWithType: IEquatable<Duration>.Equals(Duration)
  fullName: System.IEquatable<NodaTime.Duration>.Equals(NodaTime.Duration)
  nameWithType.vb: IEquatable(Of Duration).Equals(Duration)
  fullName.vb: System.IEquatable(Of NodaTime.Duration).Equals(NodaTime.Duration)
  spec.csharp:
  - uid: System.IEquatable{NodaTime.Duration}.Equals(NodaTime.Duration)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: )
  spec.vb:
  - uid: System.IEquatable{NodaTime.Duration}.Equals(NodaTime.Duration)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: NodaTime.Duration
    name: Duration
    href: NodaTime.Duration.html
  - name: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
- uid: NodaTime.Duration.FromDays*
  commentId: Overload:NodaTime.Duration.FromDays
  href: NodaTime.Duration.html#NodaTime_Duration_FromDays_System_Int32_
  name: FromDays
  nameWithType: Duration.FromDays
  fullName: NodaTime.Duration.FromDays
- uid: NodaTime.Duration.FromHours*
  commentId: Overload:NodaTime.Duration.FromHours
  href: NodaTime.Duration.html#NodaTime_Duration_FromHours_System_Int32_
  name: FromHours
  nameWithType: Duration.FromHours
  fullName: NodaTime.Duration.FromHours
- uid: NodaTime.Duration.FromMinutes*
  commentId: Overload:NodaTime.Duration.FromMinutes
  href: NodaTime.Duration.html#NodaTime_Duration_FromMinutes_System_Int64_
  name: FromMinutes
  nameWithType: Duration.FromMinutes
  fullName: NodaTime.Duration.FromMinutes
- uid: NodaTime.Duration.FromSeconds*
  commentId: Overload:NodaTime.Duration.FromSeconds
  href: NodaTime.Duration.html#NodaTime_Duration_FromSeconds_System_Int64_
  name: FromSeconds
  nameWithType: Duration.FromSeconds
  fullName: NodaTime.Duration.FromSeconds
- uid: NodaTime.Duration.FromMilliseconds*
  commentId: Overload:NodaTime.Duration.FromMilliseconds
  href: NodaTime.Duration.html#NodaTime_Duration_FromMilliseconds_System_Int64_
  name: FromMilliseconds
  nameWithType: Duration.FromMilliseconds
  fullName: NodaTime.Duration.FromMilliseconds
- uid: NodaTime.Duration.FromTicks*
  commentId: Overload:NodaTime.Duration.FromTicks
  href: NodaTime.Duration.html#NodaTime_Duration_FromTicks_System_Int64_
  name: FromTicks
  nameWithType: Duration.FromTicks
  fullName: NodaTime.Duration.FromTicks
- uid: NodaTime.Duration.FromNanoseconds*
  commentId: Overload:NodaTime.Duration.FromNanoseconds
  href: NodaTime.Duration.html#NodaTime_Duration_FromNanoseconds_System_Int64_
  name: FromNanoseconds
  nameWithType: Duration.FromNanoseconds
  fullName: NodaTime.Duration.FromNanoseconds
- uid: System.Numerics.BigInteger
  commentId: T:System.Numerics.BigInteger
  parent: System.Numerics
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.biginteger
  name: BigInteger
  nameWithType: BigInteger
  fullName: System.Numerics.BigInteger
- uid: System.Int128
  commentId: T:System.Int128
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int128
  name: Int128
  nameWithType: Int128
  fullName: System.Int128
- uid: NodaTime.Duration.FromTimeSpan*
  commentId: Overload:NodaTime.Duration.FromTimeSpan
  href: NodaTime.Duration.html#NodaTime_Duration_FromTimeSpan_System_TimeSpan_
  name: FromTimeSpan
  nameWithType: Duration.FromTimeSpan
  fullName: NodaTime.Duration.FromTimeSpan
- uid: NodaTime.Duration.ToTimeSpan*
  commentId: Overload:NodaTime.Duration.ToTimeSpan
  href: NodaTime.Duration.html#NodaTime_Duration_ToTimeSpan
  name: ToTimeSpan
  nameWithType: Duration.ToTimeSpan
  fullName: NodaTime.Duration.ToTimeSpan
- uid: System.Xml.Serialization.XmlSchemaExporter
  commentId: T:System.Xml.Serialization.XmlSchemaExporter
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.xmlschemaexporter
  name: XmlSchemaExporter
  nameWithType: XmlSchemaExporter
  fullName: System.Xml.Serialization.XmlSchemaExporter
- uid: NodaTime.Duration.AddSchema*
  commentId: Overload:NodaTime.Duration.AddSchema
  href: NodaTime.Duration.html#NodaTime_Duration_AddSchema_System_Xml_Schema_XmlSchemaSet_
  name: AddSchema
  nameWithType: Duration.AddSchema
  fullName: NodaTime.Duration.AddSchema
- uid: System.Xml.Schema.XmlSchemaSet
  commentId: T:System.Xml.Schema.XmlSchemaSet
  parent: System.Xml.Schema
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.schema.xmlschemaset
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
- uid: System.Xml.XmlQualifiedName
  commentId: T:System.Xml.XmlQualifiedName
  parent: System.Xml
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.xmlqualifiedname
  name: XmlQualifiedName
  nameWithType: XmlQualifiedName
  fullName: System.Xml.XmlQualifiedName
- uid: System.Xml.Schema
  commentId: N:System.Xml.Schema
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Xml.Schema
  nameWithType: System.Xml.Schema
  fullName: System.Xml.Schema
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Xml
    name: Xml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml
  - name: .
  - uid: System.Xml.Schema
    name: Schema
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.schema
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Xml
    name: Xml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml
  - name: .
  - uid: System.Xml.Schema
    name: Schema
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.schema
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Xml
    name: Xml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Xml
    name: Xml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml
- uid: System.Xml.Serialization.XmlSchemaProviderAttribute
  commentId: T:System.Xml.Serialization.XmlSchemaProviderAttribute
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.xmlschemaproviderattribute
  name: XmlSchemaProviderAttribute
  nameWithType: XmlSchemaProviderAttribute
  fullName: System.Xml.Serialization.XmlSchemaProviderAttribute
- uid: System.Xml.Schema.XmlSchema
  commentId: T:System.Xml.Schema.XmlSchema
  parent: System.Xml.Schema
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.schema.xmlschema
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema
- uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  commentId: M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable.writexml
  name: WriteXml(XmlWriter)
  nameWithType: IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable.writexml
  - name: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.xmlwriter
  - name: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable.writexml
  - name: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.xmlwriter
  - name: )
- uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  commentId: M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable.readxml
  name: ReadXml(XmlReader)
  nameWithType: IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable.readxml
  - name: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.xmlreader
  - name: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable.readxml
  - name: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.xmlreader
  - name: )
- uid: NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#GetSchema*
  commentId: Overload:NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#GetSchema
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable
  name: IXmlSerializable.GetSchema
  nameWithType: Duration.IXmlSerializable.GetSchema
  fullName: NodaTime.Duration.System.Xml.Serialization.IXmlSerializable.GetSchema
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable*
    name: IXmlSerializable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable
  - name: .
  - uid: NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#GetSchema*
    name: GetSchema
    href: NodaTime.Duration.html#NodaTime_Duration_System_Xml_Serialization_IXmlSerializable_GetSchema
- uid: System.Xml.XmlReader
  commentId: T:System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.xmlreader
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#ReadXml*
  commentId: Overload:NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#ReadXml
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable
  name: IXmlSerializable.ReadXml
  nameWithType: Duration.IXmlSerializable.ReadXml
  fullName: NodaTime.Duration.System.Xml.Serialization.IXmlSerializable.ReadXml
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable*
    name: IXmlSerializable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable
  - name: .
  - uid: NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#ReadXml*
    name: ReadXml
    href: NodaTime.Duration.html#NodaTime_Duration_System_Xml_Serialization_IXmlSerializable_ReadXml_System_Xml_XmlReader_
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.xmlwriter
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#WriteXml*
  commentId: Overload:NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#WriteXml
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable
  name: IXmlSerializable.WriteXml
  nameWithType: Duration.IXmlSerializable.WriteXml
  fullName: NodaTime.Duration.System.Xml.Serialization.IXmlSerializable.WriteXml
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable*
    name: IXmlSerializable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.xml.serialization.ixmlserializable
  - name: .
  - uid: NodaTime.Duration.System#Xml#Serialization#IXmlSerializable#WriteXml*
    name: WriteXml
    href: NodaTime.Duration.html#NodaTime_Duration_System_Xml_Serialization_IXmlSerializable_WriteXml_System_Xml_XmlWriter_
- uid: NodaTime.Duration.ToInt64Nanoseconds*
  commentId: Overload:NodaTime.Duration.ToInt64Nanoseconds
  href: NodaTime.Duration.html#NodaTime_Duration_ToInt64Nanoseconds
  name: ToInt64Nanoseconds
  nameWithType: Duration.ToInt64Nanoseconds
  fullName: NodaTime.Duration.ToInt64Nanoseconds
- uid: NodaTime.Duration.ToBigIntegerNanoseconds*
  commentId: Overload:NodaTime.Duration.ToBigIntegerNanoseconds
  href: NodaTime.Duration.html#NodaTime_Duration_ToBigIntegerNanoseconds
  name: ToBigIntegerNanoseconds
  nameWithType: Duration.ToBigIntegerNanoseconds
  fullName: NodaTime.Duration.ToBigIntegerNanoseconds
- uid: NodaTime.Duration.ToInt128Nanoseconds*
  commentId: Overload:NodaTime.Duration.ToInt128Nanoseconds
  href: NodaTime.Duration.html#NodaTime_Duration_ToInt128Nanoseconds
  name: ToInt128Nanoseconds
  nameWithType: Duration.ToInt128Nanoseconds
  fullName: NodaTime.Duration.ToInt128Nanoseconds
- uid: NodaTime.Duration.Max*
  commentId: Overload:NodaTime.Duration.Max
  href: NodaTime.Duration.html#NodaTime_Duration_Max_NodaTime_Duration_NodaTime_Duration_
  name: Max
  nameWithType: Duration.Max
  fullName: NodaTime.Duration.Max
- uid: NodaTime.Duration.Min*
  commentId: Overload:NodaTime.Duration.Min
  href: NodaTime.Duration.html#NodaTime_Duration_Min_NodaTime_Duration_NodaTime_Duration_
  name: Min
  nameWithType: Duration.Min
  fullName: NodaTime.Duration.Min
shouldSkipMarkup: true
