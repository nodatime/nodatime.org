### YamlMime:ManagedReference
items:
- uid: NodaTime.Text.OffsetPattern
  commentId: T:NodaTime.Text.OffsetPattern
  id: OffsetPattern
  parent: NodaTime.Text
  children:
  - NodaTime.Text.OffsetPattern.AppendFormat(NodaTime.Offset,System.Text.StringBuilder)
  - NodaTime.Text.OffsetPattern.Create(System.String,System.Globalization.CultureInfo)
  - NodaTime.Text.OffsetPattern.CreateWithCurrentCulture(System.String)
  - NodaTime.Text.OffsetPattern.CreateWithInvariantCulture(System.String)
  - NodaTime.Text.OffsetPattern.Format(NodaTime.Offset)
  - NodaTime.Text.OffsetPattern.GeneralInvariant
  - NodaTime.Text.OffsetPattern.GeneralInvariantWithZ
  - NodaTime.Text.OffsetPattern.Parse(System.String)
  - NodaTime.Text.OffsetPattern.PatternText
  - NodaTime.Text.OffsetPattern.WithCulture(System.Globalization.CultureInfo)
  langs:
  - csharp
  - vb
  name: OffsetPattern
  nameWithType: OffsetPattern
  fullName: NodaTime.Text.OffsetPattern
  type: Class
  source:
    id: OffsetPattern
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\Text\OffsetPattern.cs
    startLine: 21
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nRepresents a pattern for parsing and formatting <xref href=\"NodaTime.Offset\" data-throw-if-not-resolved=\"false\"></xref> values.\n"
  example: []
  syntax:
    content: 'public sealed class OffsetPattern : IPattern<Offset>'
    content.vb: >-
      Public NotInheritable Class OffsetPattern
          Implements IPattern(Of Offset)
  inheritance:
  - System.Object
  implements:
  - NodaTime.Text.IPattern{NodaTime.Offset}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: NodaTime.Text.OffsetPattern.GeneralInvariant
  commentId: P:NodaTime.Text.OffsetPattern.GeneralInvariant
  id: GeneralInvariant
  parent: NodaTime.Text.OffsetPattern
  langs:
  - csharp
  - vb
  name: GeneralInvariant
  nameWithType: OffsetPattern.GeneralInvariant
  fullName: NodaTime.Text.OffsetPattern.GeneralInvariant
  type: Property
  source:
    id: GeneralInvariant
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\Text\OffsetPattern.cs
    startLine: 28
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nThe &quot;general&quot; offset pattern (e.g. +HH, +HH:mm, +HH:mm:ss, +HH:mm:ss.fff) for the invariant culture.\n"
  example: []
  syntax:
    content: public static OffsetPattern GeneralInvariant { get; }
    parameters: []
    return:
      type: NodaTime.Text.OffsetPattern
      description: The &quot;general&quot; offset pattern for the invariant culture.
    content.vb: Public Shared ReadOnly Property GeneralInvariant As OffsetPattern
  overload: NodaTime.Text.OffsetPattern.GeneralInvariant*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.Text.OffsetPattern.GeneralInvariantWithZ
  commentId: P:NodaTime.Text.OffsetPattern.GeneralInvariantWithZ
  id: GeneralInvariantWithZ
  parent: NodaTime.Text.OffsetPattern
  langs:
  - csharp
  - vb
  name: GeneralInvariantWithZ
  nameWithType: OffsetPattern.GeneralInvariantWithZ
  fullName: NodaTime.Text.OffsetPattern.GeneralInvariantWithZ
  type: Property
  source:
    id: GeneralInvariantWithZ
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\Text\OffsetPattern.cs
    startLine: 35
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nThe &quot;general&quot; offset pattern (e.g. +HH, +HH:mm, +HH:mm:ss, +HH:mm:ss.fff) for the invariant culture,\nbut producing (and allowing) Z as a value for a zero offset.\n"
  example: []
  syntax:
    content: public static OffsetPattern GeneralInvariantWithZ { get; }
    parameters: []
    return:
      type: NodaTime.Text.OffsetPattern
      description: The &quot;general&quot; offset pattern for the invariant culture but producing (and allowing) Z as a value for a zero offset.
    content.vb: Public Shared ReadOnly Property GeneralInvariantWithZ As OffsetPattern
  overload: NodaTime.Text.OffsetPattern.GeneralInvariantWithZ*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.Text.OffsetPattern.PatternText
  commentId: P:NodaTime.Text.OffsetPattern.PatternText
  id: PatternText
  parent: NodaTime.Text.OffsetPattern
  langs:
  - csharp
  - vb
  name: PatternText
  nameWithType: OffsetPattern.PatternText
  fullName: NodaTime.Text.OffsetPattern.PatternText
  type: Property
  source:
    id: PatternText
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\Text\OffsetPattern.cs
    startLine: 45
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nGets the pattern text for this pattern, as supplied on creation.\n"
  example: []
  syntax:
    content: public string PatternText { get; }
    parameters: []
    return:
      type: System.String
      description: The pattern text for this pattern, as supplied on creation.
    content.vb: Public ReadOnly Property PatternText As String
  overload: NodaTime.Text.OffsetPattern.PatternText*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Text.OffsetPattern.Parse(System.String)
  commentId: M:NodaTime.Text.OffsetPattern.Parse(System.String)
  id: Parse(System.String)
  parent: NodaTime.Text.OffsetPattern
  langs:
  - csharp
  - vb
  name: Parse(String)
  nameWithType: OffsetPattern.Parse(String)
  fullName: NodaTime.Text.OffsetPattern.Parse(System.String)
  type: Method
  source:
    id: Parse
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\Text\OffsetPattern.cs
    startLine: 68
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nParses the given text value according to the rules of this pattern.\n"
  remarks: "\nThis method never throws an exception (barring a bug in Noda Time itself). Even errors such as\nthe argument being null are wrapped in a parse result.\n"
  example: []
  syntax:
    content: public ParseResult<Offset> Parse(string text)
    parameters:
    - id: text
      type: System.String
      description: The text value to parse.
    return:
      type: NodaTime.Text.ParseResult{NodaTime.Offset}
      description: The result of parsing, which may be successful or unsuccessful.
    content.vb: Public Function Parse(text As String) As ParseResult(Of Offset)
  overload: NodaTime.Text.OffsetPattern.Parse*
  implements:
  - NodaTime.Text.IPattern{NodaTime.Offset}.Parse(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Text.OffsetPattern.Format(NodaTime.Offset)
  commentId: M:NodaTime.Text.OffsetPattern.Format(NodaTime.Offset)
  id: Format(NodaTime.Offset)
  parent: NodaTime.Text.OffsetPattern
  langs:
  - csharp
  - vb
  name: Format(Offset)
  nameWithType: OffsetPattern.Format(Offset)
  fullName: NodaTime.Text.OffsetPattern.Format(NodaTime.Offset)
  type: Method
  source:
    id: Format
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\Text\OffsetPattern.cs
    startLine: 75
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nFormats the given offset as text according to the rules of this pattern.\n"
  example: []
  syntax:
    content: public string Format(Offset value)
    parameters:
    - id: value
      type: NodaTime.Offset
      description: The offset to format.
    return:
      type: System.String
      description: The offset formatted according to this pattern.
    content.vb: Public Function Format(value As Offset) As String
  overload: NodaTime.Text.OffsetPattern.Format*
  implements:
  - NodaTime.Text.IPattern{NodaTime.Offset}.Format(NodaTime.Offset)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Text.OffsetPattern.AppendFormat(NodaTime.Offset,System.Text.StringBuilder)
  commentId: M:NodaTime.Text.OffsetPattern.AppendFormat(NodaTime.Offset,System.Text.StringBuilder)
  id: AppendFormat(NodaTime.Offset,System.Text.StringBuilder)
  parent: NodaTime.Text.OffsetPattern
  langs:
  - csharp
  - vb
  name: AppendFormat(Offset, StringBuilder)
  nameWithType: OffsetPattern.AppendFormat(Offset, StringBuilder)
  fullName: NodaTime.Text.OffsetPattern.AppendFormat(NodaTime.Offset, System.Text.StringBuilder)
  type: Method
  source:
    id: AppendFormat
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\Text\OffsetPattern.cs
    startLine: 84
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nFormats the given value as text according to the rules of this pattern,\nappending to the given <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public StringBuilder AppendFormat(Offset value, StringBuilder builder)
    parameters:
    - id: value
      type: NodaTime.Offset
      description: The value to format.
    - id: builder
      type: System.Text.StringBuilder
      description: The <code>StringBuilder</code> to append to.
    return:
      type: System.Text.StringBuilder
      description: The builder passed in as <code data-dev-comment-type="paramref" class="paramref">builder</code>.
    content.vb: Public Function AppendFormat(value As Offset, builder As StringBuilder) As StringBuilder
  overload: NodaTime.Text.OffsetPattern.AppendFormat*
  implements:
  - NodaTime.Text.IPattern{NodaTime.Offset}.AppendFormat(NodaTime.Offset,System.Text.StringBuilder)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Text.OffsetPattern.Create(System.String,System.Globalization.CultureInfo)
  commentId: M:NodaTime.Text.OffsetPattern.Create(System.String,System.Globalization.CultureInfo)
  id: Create(System.String,System.Globalization.CultureInfo)
  parent: NodaTime.Text.OffsetPattern
  langs:
  - csharp
  - vb
  name: Create(String, CultureInfo)
  nameWithType: OffsetPattern.Create(String, CultureInfo)
  fullName: NodaTime.Text.OffsetPattern.Create(System.String, System.Globalization.CultureInfo)
  type: Method
  source:
    id: Create
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\Text\OffsetPattern.cs
    startLine: 111
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nCreates a pattern for the given pattern text and culture.\n"
  remarks: "\nSee the user guide for the available pattern text options.\n"
  example: []
  syntax:
    content: public static OffsetPattern Create(string patternText, CultureInfo cultureInfo)
    parameters:
    - id: patternText
      type: System.String
      description: Pattern text to create the pattern for
    - id: cultureInfo
      type: System.Globalization.CultureInfo
      description: The culture to use in the pattern
    return:
      type: NodaTime.Text.OffsetPattern
      description: A pattern for parsing and formatting offsets.
    content.vb: Public Shared Function Create(patternText As String, cultureInfo As CultureInfo) As OffsetPattern
  overload: NodaTime.Text.OffsetPattern.Create*
  exceptions:
  - type: NodaTime.Text.InvalidPatternException
    commentId: T:NodaTime.Text.InvalidPatternException
    description: The pattern text was invalid.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Text.OffsetPattern.CreateWithCurrentCulture(System.String)
  commentId: M:NodaTime.Text.OffsetPattern.CreateWithCurrentCulture(System.String)
  id: CreateWithCurrentCulture(System.String)
  parent: NodaTime.Text.OffsetPattern
  langs:
  - csharp
  - vb
  name: CreateWithCurrentCulture(String)
  nameWithType: OffsetPattern.CreateWithCurrentCulture(String)
  fullName: NodaTime.Text.OffsetPattern.CreateWithCurrentCulture(System.String)
  type: Method
  source:
    id: CreateWithCurrentCulture
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\Text\OffsetPattern.cs
    startLine: 125
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nCreates a pattern for the given pattern text in the current thread&apos;s current culture.\n"
  remarks: "\nSee the user guide for the available pattern text options. Note that the current culture\nis captured at the time this method is called - it is not captured at the point of parsing\nor formatting values.\n"
  example: []
  syntax:
    content: public static OffsetPattern CreateWithCurrentCulture(string patternText)
    parameters:
    - id: patternText
      type: System.String
      description: Pattern text to create the pattern for
    return:
      type: NodaTime.Text.OffsetPattern
      description: A pattern for parsing and formatting offsets.
    content.vb: Public Shared Function CreateWithCurrentCulture(patternText As String) As OffsetPattern
  overload: NodaTime.Text.OffsetPattern.CreateWithCurrentCulture*
  exceptions:
  - type: NodaTime.Text.InvalidPatternException
    commentId: T:NodaTime.Text.InvalidPatternException
    description: The pattern text was invalid.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Text.OffsetPattern.CreateWithInvariantCulture(System.String)
  commentId: M:NodaTime.Text.OffsetPattern.CreateWithInvariantCulture(System.String)
  id: CreateWithInvariantCulture(System.String)
  parent: NodaTime.Text.OffsetPattern
  langs:
  - csharp
  - vb
  name: CreateWithInvariantCulture(String)
  nameWithType: OffsetPattern.CreateWithInvariantCulture(String)
  fullName: NodaTime.Text.OffsetPattern.CreateWithInvariantCulture(System.String)
  type: Method
  source:
    id: CreateWithInvariantCulture
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\Text\OffsetPattern.cs
    startLine: 139
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nCreates a pattern for the given pattern text in the invariant culture.\n"
  remarks: "\nSee the user guide for the available pattern text options.\n"
  example: []
  syntax:
    content: public static OffsetPattern CreateWithInvariantCulture(string patternText)
    parameters:
    - id: patternText
      type: System.String
      description: Pattern text to create the pattern for
    return:
      type: NodaTime.Text.OffsetPattern
      description: A pattern for parsing and formatting offsets.
    content.vb: Public Shared Function CreateWithInvariantCulture(patternText As String) As OffsetPattern
  overload: NodaTime.Text.OffsetPattern.CreateWithInvariantCulture*
  exceptions:
  - type: NodaTime.Text.InvalidPatternException
    commentId: T:NodaTime.Text.InvalidPatternException
    description: The pattern text was invalid.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Text.OffsetPattern.WithCulture(System.Globalization.CultureInfo)
  commentId: M:NodaTime.Text.OffsetPattern.WithCulture(System.Globalization.CultureInfo)
  id: WithCulture(System.Globalization.CultureInfo)
  parent: NodaTime.Text.OffsetPattern
  langs:
  - csharp
  - vb
  name: WithCulture(CultureInfo)
  nameWithType: OffsetPattern.WithCulture(CultureInfo)
  fullName: NodaTime.Text.OffsetPattern.WithCulture(System.Globalization.CultureInfo)
  type: Method
  source:
    id: WithCulture
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\Text\OffsetPattern.cs
    startLine: 148
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nCreates a pattern for the same original pattern text as this pattern, but with the specified\nculture.\n"
  example: []
  syntax:
    content: public OffsetPattern WithCulture(CultureInfo cultureInfo)
    parameters:
    - id: cultureInfo
      type: System.Globalization.CultureInfo
      description: The culture to use in the new pattern.
    return:
      type: NodaTime.Text.OffsetPattern
      description: A new pattern with the given culture.
    content.vb: Public Function WithCulture(cultureInfo As CultureInfo) As OffsetPattern
  overload: NodaTime.Text.OffsetPattern.WithCulture*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: NodaTime.Offset
  commentId: T:NodaTime.Offset
  parent: NodaTime
  name: Offset
  nameWithType: Offset
  fullName: NodaTime.Offset
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: NodaTime.Text
  commentId: N:NodaTime.Text
  name: NodaTime.Text
  nameWithType: NodaTime.Text
  fullName: NodaTime.Text
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NodaTime.Text.IPattern{NodaTime.Offset}
  commentId: T:NodaTime.Text.IPattern{NodaTime.Offset}
  parent: NodaTime.Text
  definition: NodaTime.Text.IPattern`1
  name: IPattern<Offset>
  nameWithType: IPattern<Offset>
  fullName: NodaTime.Text.IPattern<NodaTime.Offset>
  nameWithType.vb: IPattern(Of Offset)
  fullName.vb: NodaTime.Text.IPattern(Of NodaTime.Offset)
  name.vb: IPattern(Of Offset)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.Offset
    name: Offset
    nameWithType: Offset
    fullName: NodaTime.Offset
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.Offset
    name: Offset
    nameWithType: Offset
    fullName: NodaTime.Offset
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NodaTime.Text.IPattern`1
  commentId: T:NodaTime.Text.IPattern`1
  name: IPattern<T>
  nameWithType: IPattern<T>
  fullName: NodaTime.Text.IPattern<T>
  nameWithType.vb: IPattern(Of T)
  fullName.vb: NodaTime.Text.IPattern(Of T)
  name.vb: IPattern(Of T)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.OffsetPattern.GeneralInvariant*
  commentId: Overload:NodaTime.Text.OffsetPattern.GeneralInvariant
  name: GeneralInvariant
  nameWithType: OffsetPattern.GeneralInvariant
  fullName: NodaTime.Text.OffsetPattern.GeneralInvariant
- uid: NodaTime.Text.OffsetPattern
  commentId: T:NodaTime.Text.OffsetPattern
  parent: NodaTime.Text
  name: OffsetPattern
  nameWithType: OffsetPattern
  fullName: NodaTime.Text.OffsetPattern
- uid: NodaTime.Text.OffsetPattern.GeneralInvariantWithZ*
  commentId: Overload:NodaTime.Text.OffsetPattern.GeneralInvariantWithZ
  name: GeneralInvariantWithZ
  nameWithType: OffsetPattern.GeneralInvariantWithZ
  fullName: NodaTime.Text.OffsetPattern.GeneralInvariantWithZ
- uid: NodaTime.Text.OffsetPattern.PatternText*
  commentId: Overload:NodaTime.Text.OffsetPattern.PatternText
  name: PatternText
  nameWithType: OffsetPattern.PatternText
  fullName: NodaTime.Text.OffsetPattern.PatternText
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NodaTime.Text.OffsetPattern.Parse*
  commentId: Overload:NodaTime.Text.OffsetPattern.Parse
  name: Parse
  nameWithType: OffsetPattern.Parse
  fullName: NodaTime.Text.OffsetPattern.Parse
- uid: NodaTime.Text.IPattern{NodaTime.Offset}.Parse(System.String)
  commentId: M:NodaTime.Text.IPattern{NodaTime.Offset}.Parse(System.String)
  parent: NodaTime.Text.IPattern{NodaTime.Offset}
  definition: NodaTime.Text.IPattern`1.Parse(System.String)
  name: Parse(String)
  nameWithType: IPattern<Offset>.Parse(String)
  fullName: NodaTime.Text.IPattern<NodaTime.Offset>.Parse(System.String)
  nameWithType.vb: IPattern(Of Offset).Parse(String)
  fullName.vb: NodaTime.Text.IPattern(Of NodaTime.Offset).Parse(System.String)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1.Parse(System.String)
    name: Parse
    nameWithType: IPattern<Offset>.Parse
    fullName: NodaTime.Text.IPattern<NodaTime.Offset>.Parse
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Text.IPattern`1.Parse(System.String)
    name: Parse
    nameWithType: IPattern(Of Offset).Parse
    fullName: NodaTime.Text.IPattern(Of NodaTime.Offset).Parse
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.ParseResult{NodaTime.Offset}
  commentId: T:NodaTime.Text.ParseResult{NodaTime.Offset}
  parent: NodaTime.Text
  definition: NodaTime.Text.ParseResult`1
  name: ParseResult<Offset>
  nameWithType: ParseResult<Offset>
  fullName: NodaTime.Text.ParseResult<NodaTime.Offset>
  nameWithType.vb: ParseResult(Of Offset)
  fullName.vb: NodaTime.Text.ParseResult(Of NodaTime.Offset)
  name.vb: ParseResult(Of Offset)
  spec.csharp:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    nameWithType: ParseResult
    fullName: NodaTime.Text.ParseResult
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.Offset
    name: Offset
    nameWithType: Offset
    fullName: NodaTime.Offset
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    nameWithType: ParseResult
    fullName: NodaTime.Text.ParseResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.Offset
    name: Offset
    nameWithType: Offset
    fullName: NodaTime.Offset
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.IPattern`1.Parse(System.String)
  commentId: M:NodaTime.Text.IPattern`1.Parse(System.String)
  isExternal: true
  name: Parse(String)
  nameWithType: IPattern<T>.Parse(String)
  fullName: NodaTime.Text.IPattern<T>.Parse(System.String)
  nameWithType.vb: IPattern(Of T).Parse(String)
  fullName.vb: NodaTime.Text.IPattern(Of T).Parse(System.String)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1.Parse(System.String)
    name: Parse
    nameWithType: IPattern<T>.Parse
    fullName: NodaTime.Text.IPattern<T>.Parse
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Text.IPattern`1.Parse(System.String)
    name: Parse
    nameWithType: IPattern(Of T).Parse
    fullName: NodaTime.Text.IPattern(Of T).Parse
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.ParseResult`1
  commentId: T:NodaTime.Text.ParseResult`1
  name: ParseResult<T>
  nameWithType: ParseResult<T>
  fullName: NodaTime.Text.ParseResult<T>
  nameWithType.vb: ParseResult(Of T)
  fullName.vb: NodaTime.Text.ParseResult(Of T)
  name.vb: ParseResult(Of T)
  spec.csharp:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    nameWithType: ParseResult
    fullName: NodaTime.Text.ParseResult
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    nameWithType: ParseResult
    fullName: NodaTime.Text.ParseResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.OffsetPattern.Format*
  commentId: Overload:NodaTime.Text.OffsetPattern.Format
  name: Format
  nameWithType: OffsetPattern.Format
  fullName: NodaTime.Text.OffsetPattern.Format
- uid: NodaTime.Text.IPattern{NodaTime.Offset}.Format(NodaTime.Offset)
  commentId: M:NodaTime.Text.IPattern{NodaTime.Offset}.Format(NodaTime.Offset)
  parent: NodaTime.Text.IPattern{NodaTime.Offset}
  definition: NodaTime.Text.IPattern`1.Format(`0)
  name: Format(Offset)
  nameWithType: IPattern<Offset>.Format(Offset)
  fullName: NodaTime.Text.IPattern<NodaTime.Offset>.Format(NodaTime.Offset)
  nameWithType.vb: IPattern(Of Offset).Format(Offset)
  fullName.vb: NodaTime.Text.IPattern(Of NodaTime.Offset).Format(NodaTime.Offset)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1.Format(`0)
    name: Format
    nameWithType: IPattern<Offset>.Format
    fullName: NodaTime.Text.IPattern<NodaTime.Offset>.Format
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Offset
    name: Offset
    nameWithType: Offset
    fullName: NodaTime.Offset
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Text.IPattern`1.Format(`0)
    name: Format
    nameWithType: IPattern(Of Offset).Format
    fullName: NodaTime.Text.IPattern(Of NodaTime.Offset).Format
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Offset
    name: Offset
    nameWithType: Offset
    fullName: NodaTime.Offset
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.IPattern`1.Format(`0)
  commentId: M:NodaTime.Text.IPattern`1.Format(`0)
  name: Format(T)
  nameWithType: IPattern<T>.Format(T)
  fullName: NodaTime.Text.IPattern<T>.Format(T)
  nameWithType.vb: IPattern(Of T).Format(T)
  fullName.vb: NodaTime.Text.IPattern(Of T).Format(T)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1.Format(`0)
    name: Format
    nameWithType: IPattern<T>.Format
    fullName: NodaTime.Text.IPattern<T>.Format
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Text.IPattern`1.Format(`0)
    name: Format
    nameWithType: IPattern(Of T).Format
    fullName: NodaTime.Text.IPattern(Of T).Format
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Text.StringBuilder
  commentId: T:System.Text.StringBuilder
  parent: System.Text
  isExternal: true
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: NodaTime.Text.OffsetPattern.AppendFormat*
  commentId: Overload:NodaTime.Text.OffsetPattern.AppendFormat
  name: AppendFormat
  nameWithType: OffsetPattern.AppendFormat
  fullName: NodaTime.Text.OffsetPattern.AppendFormat
- uid: NodaTime.Text.IPattern{NodaTime.Offset}.AppendFormat(NodaTime.Offset,System.Text.StringBuilder)
  commentId: M:NodaTime.Text.IPattern{NodaTime.Offset}.AppendFormat(NodaTime.Offset,System.Text.StringBuilder)
  parent: NodaTime.Text.IPattern{NodaTime.Offset}
  definition: NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
  name: AppendFormat(Offset, StringBuilder)
  nameWithType: IPattern<Offset>.AppendFormat(Offset, StringBuilder)
  fullName: NodaTime.Text.IPattern<NodaTime.Offset>.AppendFormat(NodaTime.Offset, System.Text.StringBuilder)
  nameWithType.vb: IPattern(Of Offset).AppendFormat(Offset, StringBuilder)
  fullName.vb: NodaTime.Text.IPattern(Of NodaTime.Offset).AppendFormat(NodaTime.Offset, System.Text.StringBuilder)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
    name: AppendFormat
    nameWithType: IPattern<Offset>.AppendFormat
    fullName: NodaTime.Text.IPattern<NodaTime.Offset>.AppendFormat
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Offset
    name: Offset
    nameWithType: Offset
    fullName: NodaTime.Offset
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.StringBuilder
    name: StringBuilder
    nameWithType: StringBuilder
    fullName: System.Text.StringBuilder
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
    name: AppendFormat
    nameWithType: IPattern(Of Offset).AppendFormat
    fullName: NodaTime.Text.IPattern(Of NodaTime.Offset).AppendFormat
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Offset
    name: Offset
    nameWithType: Offset
    fullName: NodaTime.Offset
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.StringBuilder
    name: StringBuilder
    nameWithType: StringBuilder
    fullName: System.Text.StringBuilder
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Text
  commentId: N:System.Text
  isExternal: true
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
- uid: NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
  commentId: M:NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
  isExternal: true
  name: AppendFormat(T, StringBuilder)
  nameWithType: IPattern<T>.AppendFormat(T, StringBuilder)
  fullName: NodaTime.Text.IPattern<T>.AppendFormat(T, System.Text.StringBuilder)
  nameWithType.vb: IPattern(Of T).AppendFormat(T, StringBuilder)
  fullName.vb: NodaTime.Text.IPattern(Of T).AppendFormat(T, System.Text.StringBuilder)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
    name: AppendFormat
    nameWithType: IPattern<T>.AppendFormat
    fullName: NodaTime.Text.IPattern<T>.AppendFormat
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.StringBuilder
    name: StringBuilder
    nameWithType: StringBuilder
    fullName: System.Text.StringBuilder
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
    name: AppendFormat
    nameWithType: IPattern(Of T).AppendFormat
    fullName: NodaTime.Text.IPattern(Of T).AppendFormat
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.StringBuilder
    name: StringBuilder
    nameWithType: StringBuilder
    fullName: System.Text.StringBuilder
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.InvalidPatternException
  commentId: T:NodaTime.Text.InvalidPatternException
  name: InvalidPatternException
  nameWithType: InvalidPatternException
  fullName: NodaTime.Text.InvalidPatternException
- uid: NodaTime.Text.OffsetPattern.Create*
  commentId: Overload:NodaTime.Text.OffsetPattern.Create
  name: Create
  nameWithType: OffsetPattern.Create
  fullName: NodaTime.Text.OffsetPattern.Create
- uid: NodaTime.Text.OffsetPattern.CreateWithCurrentCulture*
  commentId: Overload:NodaTime.Text.OffsetPattern.CreateWithCurrentCulture
  name: CreateWithCurrentCulture
  nameWithType: OffsetPattern.CreateWithCurrentCulture
  fullName: NodaTime.Text.OffsetPattern.CreateWithCurrentCulture
- uid: NodaTime.Text.OffsetPattern.CreateWithInvariantCulture*
  commentId: Overload:NodaTime.Text.OffsetPattern.CreateWithInvariantCulture
  name: CreateWithInvariantCulture
  nameWithType: OffsetPattern.CreateWithInvariantCulture
  fullName: NodaTime.Text.OffsetPattern.CreateWithInvariantCulture
- uid: NodaTime.Text.OffsetPattern.WithCulture*
  commentId: Overload:NodaTime.Text.OffsetPattern.WithCulture
  name: WithCulture
  nameWithType: OffsetPattern.WithCulture
  fullName: NodaTime.Text.OffsetPattern.WithCulture
shouldSkipMarkup: true
