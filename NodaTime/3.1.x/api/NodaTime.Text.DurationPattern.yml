### YamlMime:ManagedReference
items:
- uid: NodaTime.Text.DurationPattern
  commentId: T:NodaTime.Text.DurationPattern
  id: DurationPattern
  parent: NodaTime.Text
  children:
  - NodaTime.Text.DurationPattern.AppendFormat(NodaTime.Duration,System.Text.StringBuilder)
  - NodaTime.Text.DurationPattern.Create(System.String,System.Globalization.CultureInfo)
  - NodaTime.Text.DurationPattern.CreateWithCurrentCulture(System.String)
  - NodaTime.Text.DurationPattern.CreateWithInvariantCulture(System.String)
  - NodaTime.Text.DurationPattern.Format(NodaTime.Duration)
  - NodaTime.Text.DurationPattern.JsonRoundtrip
  - NodaTime.Text.DurationPattern.Parse(System.String)
  - NodaTime.Text.DurationPattern.PatternText
  - NodaTime.Text.DurationPattern.Roundtrip
  - NodaTime.Text.DurationPattern.WithCulture(System.Globalization.CultureInfo)
  langs:
  - csharp
  - vb
  name: DurationPattern
  nameWithType: DurationPattern
  fullName: NodaTime.Text.DurationPattern
  type: Class
  source:
    id: DurationPattern
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\Text\DurationPattern.cs
    startLine: 21
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nRepresents a pattern for parsing and formatting <xref href=\"NodaTime.Duration\" data-throw-if-not-resolved=\"false\"></xref> values.\n"
  example: []
  syntax:
    content: 'public sealed class DurationPattern : IPattern<Duration>'
    content.vb: >-
      Public NotInheritable Class DurationPattern
          Implements IPattern(Of Duration)
  inheritance:
  - System.Object
  implements:
  - NodaTime.Text.IPattern{NodaTime.Duration}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: NodaTime.Text.DurationPattern.Roundtrip
  commentId: P:NodaTime.Text.DurationPattern.Roundtrip
  id: Roundtrip
  parent: NodaTime.Text.DurationPattern
  langs:
  - csharp
  - vb
  name: Roundtrip
  nameWithType: DurationPattern.Roundtrip
  fullName: NodaTime.Text.DurationPattern.Roundtrip
  type: Property
  source:
    id: Roundtrip
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\Text\DurationPattern.cs
    startLine: 29
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nGets the general pattern for durations using the invariant culture, with a format string of &quot;-D:hh:mm:ss.FFFFFFFFF&quot;.\nThis pattern round-trips. This corresponds to the &quot;o&quot; standard pattern.\n"
  example: []
  syntax:
    content: public static DurationPattern Roundtrip { get; }
    parameters: []
    return:
      type: NodaTime.Text.DurationPattern
      description: The general pattern for durations using the invariant culture.
    content.vb: Public Shared ReadOnly Property Roundtrip As DurationPattern
  overload: NodaTime.Text.DurationPattern.Roundtrip*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.Text.DurationPattern.JsonRoundtrip
  commentId: P:NodaTime.Text.DurationPattern.JsonRoundtrip
  id: JsonRoundtrip
  parent: NodaTime.Text.DurationPattern
  langs:
  - csharp
  - vb
  name: JsonRoundtrip
  nameWithType: DurationPattern.JsonRoundtrip
  fullName: NodaTime.Text.DurationPattern.JsonRoundtrip
  type: Property
  source:
    id: JsonRoundtrip
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\Text\DurationPattern.cs
    startLine: 37
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nGets a pattern for durations using the invariant culture, with a format string of &quot;-H:mm:ss.FFFFFFFFF&quot;.\nThis pattern round-trips, and is the pattern that NodaTime.Serialization.JsonNet uses by default.\nThis corresponds to the &quot;j&quot; standard pattern.\n"
  example: []
  syntax:
    content: public static DurationPattern JsonRoundtrip { get; }
    parameters: []
    return:
      type: NodaTime.Text.DurationPattern
      description: The pattern for durations using the invariant culture. This is the pattern that NodaTime.Serialization.JsonNet uses by default.
    content.vb: Public Shared ReadOnly Property JsonRoundtrip As DurationPattern
  overload: NodaTime.Text.DurationPattern.JsonRoundtrip*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NodaTime.Text.DurationPattern.PatternText
  commentId: P:NodaTime.Text.DurationPattern.PatternText
  id: PatternText
  parent: NodaTime.Text.DurationPattern
  langs:
  - csharp
  - vb
  name: PatternText
  nameWithType: DurationPattern.PatternText
  fullName: NodaTime.Text.DurationPattern.PatternText
  type: Property
  source:
    id: PatternText
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\Text\DurationPattern.cs
    startLine: 54
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nGets the pattern text for this pattern, as supplied on creation.\n"
  example: []
  syntax:
    content: public string PatternText { get; }
    parameters: []
    return:
      type: System.String
      description: The pattern text for this pattern, as supplied on creation.
    content.vb: Public ReadOnly Property PatternText As String
  overload: NodaTime.Text.DurationPattern.PatternText*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NodaTime.Text.DurationPattern.Parse(System.String)
  commentId: M:NodaTime.Text.DurationPattern.Parse(System.String)
  id: Parse(System.String)
  parent: NodaTime.Text.DurationPattern
  langs:
  - csharp
  - vb
  name: Parse(String)
  nameWithType: DurationPattern.Parse(String)
  fullName: NodaTime.Text.DurationPattern.Parse(System.String)
  type: Method
  source:
    id: Parse
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\Text\DurationPattern.cs
    startLine: 71
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nParses the given text value according to the rules of this pattern.\n"
  remarks: "\nThis method never throws an exception (barring a bug in Noda Time itself). Even errors such as\nthe argument being null are wrapped in a parse result.\n"
  example: []
  syntax:
    content: public ParseResult<Duration> Parse(string text)
    parameters:
    - id: text
      type: System.String
      description: The text value to parse.
    return:
      type: NodaTime.Text.ParseResult{NodaTime.Duration}
      description: The result of parsing, which may be successful or unsuccessful.
    content.vb: Public Function Parse(text As String) As ParseResult(Of Duration)
  overload: NodaTime.Text.DurationPattern.Parse*
  implements:
  - NodaTime.Text.IPattern{NodaTime.Duration}.Parse(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Text.DurationPattern.Format(NodaTime.Duration)
  commentId: M:NodaTime.Text.DurationPattern.Format(NodaTime.Duration)
  id: Format(NodaTime.Duration)
  parent: NodaTime.Text.DurationPattern
  langs:
  - csharp
  - vb
  name: Format(Duration)
  nameWithType: DurationPattern.Format(Duration)
  fullName: NodaTime.Text.DurationPattern.Format(NodaTime.Duration)
  type: Method
  source:
    id: Format
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\Text\DurationPattern.cs
    startLine: 78
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nFormats the given duration as text according to the rules of this pattern.\n"
  example: []
  syntax:
    content: public string Format(Duration value)
    parameters:
    - id: value
      type: NodaTime.Duration
      description: The duration to format.
    return:
      type: System.String
      description: The duration formatted according to this pattern.
    content.vb: Public Function Format(value As Duration) As String
  overload: NodaTime.Text.DurationPattern.Format*
  implements:
  - NodaTime.Text.IPattern{NodaTime.Duration}.Format(NodaTime.Duration)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Text.DurationPattern.AppendFormat(NodaTime.Duration,System.Text.StringBuilder)
  commentId: M:NodaTime.Text.DurationPattern.AppendFormat(NodaTime.Duration,System.Text.StringBuilder)
  id: AppendFormat(NodaTime.Duration,System.Text.StringBuilder)
  parent: NodaTime.Text.DurationPattern
  langs:
  - csharp
  - vb
  name: AppendFormat(Duration, StringBuilder)
  nameWithType: DurationPattern.AppendFormat(Duration, StringBuilder)
  fullName: NodaTime.Text.DurationPattern.AppendFormat(NodaTime.Duration, System.Text.StringBuilder)
  type: Method
  source:
    id: AppendFormat
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\Text\DurationPattern.cs
    startLine: 87
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nFormats the given value as text according to the rules of this pattern,\nappending to the given <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public StringBuilder AppendFormat(Duration value, StringBuilder builder)
    parameters:
    - id: value
      type: NodaTime.Duration
      description: The value to format.
    - id: builder
      type: System.Text.StringBuilder
      description: The <code>StringBuilder</code> to append to.
    return:
      type: System.Text.StringBuilder
      description: The builder passed in as <code data-dev-comment-type="paramref" class="paramref">builder</code>.
    content.vb: Public Function AppendFormat(value As Duration, builder As StringBuilder) As StringBuilder
  overload: NodaTime.Text.DurationPattern.AppendFormat*
  implements:
  - NodaTime.Text.IPattern{NodaTime.Duration}.AppendFormat(NodaTime.Duration,System.Text.StringBuilder)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NodaTime.Text.DurationPattern.Create(System.String,System.Globalization.CultureInfo)
  commentId: M:NodaTime.Text.DurationPattern.Create(System.String,System.Globalization.CultureInfo)
  id: Create(System.String,System.Globalization.CultureInfo)
  parent: NodaTime.Text.DurationPattern
  langs:
  - csharp
  - vb
  name: Create(String, CultureInfo)
  nameWithType: DurationPattern.Create(String, CultureInfo)
  fullName: NodaTime.Text.DurationPattern.Create(System.String, System.Globalization.CultureInfo)
  type: Method
  source:
    id: Create
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\Text\DurationPattern.cs
    startLine: 114
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nCreates a pattern for the given pattern text and culture.\n"
  remarks: "\nSee the user guide for the available pattern text options.\n"
  example: []
  syntax:
    content: public static DurationPattern Create(string patternText, CultureInfo cultureInfo)
    parameters:
    - id: patternText
      type: System.String
      description: Pattern text to create the pattern for
    - id: cultureInfo
      type: System.Globalization.CultureInfo
      description: The culture to use in the pattern
    return:
      type: NodaTime.Text.DurationPattern
      description: A pattern for parsing and formatting offsets.
    content.vb: Public Shared Function Create(patternText As String, cultureInfo As CultureInfo) As DurationPattern
  overload: NodaTime.Text.DurationPattern.Create*
  exceptions:
  - type: NodaTime.Text.InvalidPatternException
    commentId: T:NodaTime.Text.InvalidPatternException
    description: The pattern text was invalid.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Text.DurationPattern.CreateWithCurrentCulture(System.String)
  commentId: M:NodaTime.Text.DurationPattern.CreateWithCurrentCulture(System.String)
  id: CreateWithCurrentCulture(System.String)
  parent: NodaTime.Text.DurationPattern
  langs:
  - csharp
  - vb
  name: CreateWithCurrentCulture(String)
  nameWithType: DurationPattern.CreateWithCurrentCulture(String)
  fullName: NodaTime.Text.DurationPattern.CreateWithCurrentCulture(System.String)
  type: Method
  source:
    id: CreateWithCurrentCulture
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\Text\DurationPattern.cs
    startLine: 128
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nCreates a pattern for the given pattern text in the current thread&apos;s current culture.\n"
  remarks: "\nSee the user guide for the available pattern text options. Note that the current culture\nis captured at the time this method is called - it is not captured at the point of parsing\nor formatting values.\n"
  example: []
  syntax:
    content: public static DurationPattern CreateWithCurrentCulture(string patternText)
    parameters:
    - id: patternText
      type: System.String
      description: Pattern text to create the pattern for
    return:
      type: NodaTime.Text.DurationPattern
      description: A pattern for parsing and formatting offsets.
    content.vb: Public Shared Function CreateWithCurrentCulture(patternText As String) As DurationPattern
  overload: NodaTime.Text.DurationPattern.CreateWithCurrentCulture*
  exceptions:
  - type: NodaTime.Text.InvalidPatternException
    commentId: T:NodaTime.Text.InvalidPatternException
    description: The pattern text was invalid.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Text.DurationPattern.CreateWithInvariantCulture(System.String)
  commentId: M:NodaTime.Text.DurationPattern.CreateWithInvariantCulture(System.String)
  id: CreateWithInvariantCulture(System.String)
  parent: NodaTime.Text.DurationPattern
  langs:
  - csharp
  - vb
  name: CreateWithInvariantCulture(String)
  nameWithType: DurationPattern.CreateWithInvariantCulture(String)
  fullName: NodaTime.Text.DurationPattern.CreateWithInvariantCulture(System.String)
  type: Method
  source:
    id: CreateWithInvariantCulture
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\Text\DurationPattern.cs
    startLine: 142
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nCreates a pattern for the given pattern text in the invariant culture.\n"
  remarks: "\nSee the user guide for the available pattern text options.\n"
  example: []
  syntax:
    content: public static DurationPattern CreateWithInvariantCulture(string patternText)
    parameters:
    - id: patternText
      type: System.String
      description: Pattern text to create the pattern for
    return:
      type: NodaTime.Text.DurationPattern
      description: A pattern for parsing and formatting offsets.
    content.vb: Public Shared Function CreateWithInvariantCulture(patternText As String) As DurationPattern
  overload: NodaTime.Text.DurationPattern.CreateWithInvariantCulture*
  exceptions:
  - type: NodaTime.Text.InvalidPatternException
    commentId: T:NodaTime.Text.InvalidPatternException
    description: The pattern text was invalid.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NodaTime.Text.DurationPattern.WithCulture(System.Globalization.CultureInfo)
  commentId: M:NodaTime.Text.DurationPattern.WithCulture(System.Globalization.CultureInfo)
  id: WithCulture(System.Globalization.CultureInfo)
  parent: NodaTime.Text.DurationPattern
  langs:
  - csharp
  - vb
  name: WithCulture(CultureInfo)
  nameWithType: DurationPattern.WithCulture(CultureInfo)
  fullName: NodaTime.Text.DurationPattern.WithCulture(System.Globalization.CultureInfo)
  type: Method
  source:
    id: WithCulture
    path: C:\users\skeet\GitHub\nodatime\nodatime\src\NodaTime\Text\DurationPattern.cs
    startLine: 151
  assemblies:
  - NodaTime
  namespace: NodaTime.Text
  summary: "\nCreates a pattern for the same original pattern text as this pattern, but with the specified\nculture.\n"
  example: []
  syntax:
    content: public DurationPattern WithCulture(CultureInfo cultureInfo)
    parameters:
    - id: cultureInfo
      type: System.Globalization.CultureInfo
      description: The culture to use in the new pattern.
    return:
      type: NodaTime.Text.DurationPattern
      description: A new pattern with the given culture.
    content.vb: Public Function WithCulture(cultureInfo As CultureInfo) As DurationPattern
  overload: NodaTime.Text.DurationPattern.WithCulture*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: NodaTime.Duration
  commentId: T:NodaTime.Duration
  parent: NodaTime
  name: Duration
  nameWithType: Duration
  fullName: NodaTime.Duration
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: NodaTime.Text
  commentId: N:NodaTime.Text
  name: NodaTime.Text
  nameWithType: NodaTime.Text
  fullName: NodaTime.Text
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NodaTime.Text.IPattern{NodaTime.Duration}
  commentId: T:NodaTime.Text.IPattern{NodaTime.Duration}
  parent: NodaTime.Text
  definition: NodaTime.Text.IPattern`1
  name: IPattern<Duration>
  nameWithType: IPattern<Duration>
  fullName: NodaTime.Text.IPattern<NodaTime.Duration>
  nameWithType.vb: IPattern(Of Duration)
  fullName.vb: NodaTime.Text.IPattern(Of NodaTime.Duration)
  name.vb: IPattern(Of Duration)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.Duration
    name: Duration
    nameWithType: Duration
    fullName: NodaTime.Duration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.Duration
    name: Duration
    nameWithType: Duration
    fullName: NodaTime.Duration
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime
  commentId: N:NodaTime
  name: NodaTime
  nameWithType: NodaTime
  fullName: NodaTime
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NodaTime.Text.IPattern`1
  commentId: T:NodaTime.Text.IPattern`1
  name: IPattern<T>
  nameWithType: IPattern<T>
  fullName: NodaTime.Text.IPattern<T>
  nameWithType.vb: IPattern(Of T)
  fullName.vb: NodaTime.Text.IPattern(Of T)
  name.vb: IPattern(Of T)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NodaTime.Text.IPattern`1
    name: IPattern
    nameWithType: IPattern
    fullName: NodaTime.Text.IPattern
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.DurationPattern.Roundtrip*
  commentId: Overload:NodaTime.Text.DurationPattern.Roundtrip
  name: Roundtrip
  nameWithType: DurationPattern.Roundtrip
  fullName: NodaTime.Text.DurationPattern.Roundtrip
- uid: NodaTime.Text.DurationPattern
  commentId: T:NodaTime.Text.DurationPattern
  parent: NodaTime.Text
  name: DurationPattern
  nameWithType: DurationPattern
  fullName: NodaTime.Text.DurationPattern
- uid: NodaTime.Text.DurationPattern.JsonRoundtrip*
  commentId: Overload:NodaTime.Text.DurationPattern.JsonRoundtrip
  name: JsonRoundtrip
  nameWithType: DurationPattern.JsonRoundtrip
  fullName: NodaTime.Text.DurationPattern.JsonRoundtrip
- uid: NodaTime.Text.DurationPattern.PatternText*
  commentId: Overload:NodaTime.Text.DurationPattern.PatternText
  name: PatternText
  nameWithType: DurationPattern.PatternText
  fullName: NodaTime.Text.DurationPattern.PatternText
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NodaTime.Text.DurationPattern.Parse*
  commentId: Overload:NodaTime.Text.DurationPattern.Parse
  name: Parse
  nameWithType: DurationPattern.Parse
  fullName: NodaTime.Text.DurationPattern.Parse
- uid: NodaTime.Text.IPattern{NodaTime.Duration}.Parse(System.String)
  commentId: M:NodaTime.Text.IPattern{NodaTime.Duration}.Parse(System.String)
  parent: NodaTime.Text.IPattern{NodaTime.Duration}
  definition: NodaTime.Text.IPattern`1.Parse(System.String)
  name: Parse(String)
  nameWithType: IPattern<Duration>.Parse(String)
  fullName: NodaTime.Text.IPattern<NodaTime.Duration>.Parse(System.String)
  nameWithType.vb: IPattern(Of Duration).Parse(String)
  fullName.vb: NodaTime.Text.IPattern(Of NodaTime.Duration).Parse(System.String)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1.Parse(System.String)
    name: Parse
    nameWithType: IPattern<Duration>.Parse
    fullName: NodaTime.Text.IPattern<NodaTime.Duration>.Parse
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Text.IPattern`1.Parse(System.String)
    name: Parse
    nameWithType: IPattern(Of Duration).Parse
    fullName: NodaTime.Text.IPattern(Of NodaTime.Duration).Parse
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.ParseResult{NodaTime.Duration}
  commentId: T:NodaTime.Text.ParseResult{NodaTime.Duration}
  parent: NodaTime.Text
  definition: NodaTime.Text.ParseResult`1
  name: ParseResult<Duration>
  nameWithType: ParseResult<Duration>
  fullName: NodaTime.Text.ParseResult<NodaTime.Duration>
  nameWithType.vb: ParseResult(Of Duration)
  fullName.vb: NodaTime.Text.ParseResult(Of NodaTime.Duration)
  name.vb: ParseResult(Of Duration)
  spec.csharp:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    nameWithType: ParseResult
    fullName: NodaTime.Text.ParseResult
  - name: <
    nameWithType: <
    fullName: <
  - uid: NodaTime.Duration
    name: Duration
    nameWithType: Duration
    fullName: NodaTime.Duration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    nameWithType: ParseResult
    fullName: NodaTime.Text.ParseResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NodaTime.Duration
    name: Duration
    nameWithType: Duration
    fullName: NodaTime.Duration
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.IPattern`1.Parse(System.String)
  commentId: M:NodaTime.Text.IPattern`1.Parse(System.String)
  isExternal: true
  name: Parse(String)
  nameWithType: IPattern<T>.Parse(String)
  fullName: NodaTime.Text.IPattern<T>.Parse(System.String)
  nameWithType.vb: IPattern(Of T).Parse(String)
  fullName.vb: NodaTime.Text.IPattern(Of T).Parse(System.String)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1.Parse(System.String)
    name: Parse
    nameWithType: IPattern<T>.Parse
    fullName: NodaTime.Text.IPattern<T>.Parse
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Text.IPattern`1.Parse(System.String)
    name: Parse
    nameWithType: IPattern(Of T).Parse
    fullName: NodaTime.Text.IPattern(Of T).Parse
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.ParseResult`1
  commentId: T:NodaTime.Text.ParseResult`1
  name: ParseResult<T>
  nameWithType: ParseResult<T>
  fullName: NodaTime.Text.ParseResult<T>
  nameWithType.vb: ParseResult(Of T)
  fullName.vb: NodaTime.Text.ParseResult(Of T)
  name.vb: ParseResult(Of T)
  spec.csharp:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    nameWithType: ParseResult
    fullName: NodaTime.Text.ParseResult
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NodaTime.Text.ParseResult`1
    name: ParseResult
    nameWithType: ParseResult
    fullName: NodaTime.Text.ParseResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.DurationPattern.Format*
  commentId: Overload:NodaTime.Text.DurationPattern.Format
  name: Format
  nameWithType: DurationPattern.Format
  fullName: NodaTime.Text.DurationPattern.Format
- uid: NodaTime.Text.IPattern{NodaTime.Duration}.Format(NodaTime.Duration)
  commentId: M:NodaTime.Text.IPattern{NodaTime.Duration}.Format(NodaTime.Duration)
  parent: NodaTime.Text.IPattern{NodaTime.Duration}
  definition: NodaTime.Text.IPattern`1.Format(`0)
  name: Format(Duration)
  nameWithType: IPattern<Duration>.Format(Duration)
  fullName: NodaTime.Text.IPattern<NodaTime.Duration>.Format(NodaTime.Duration)
  nameWithType.vb: IPattern(Of Duration).Format(Duration)
  fullName.vb: NodaTime.Text.IPattern(Of NodaTime.Duration).Format(NodaTime.Duration)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1.Format(`0)
    name: Format
    nameWithType: IPattern<Duration>.Format
    fullName: NodaTime.Text.IPattern<NodaTime.Duration>.Format
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Duration
    name: Duration
    nameWithType: Duration
    fullName: NodaTime.Duration
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Text.IPattern`1.Format(`0)
    name: Format
    nameWithType: IPattern(Of Duration).Format
    fullName: NodaTime.Text.IPattern(Of NodaTime.Duration).Format
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Duration
    name: Duration
    nameWithType: Duration
    fullName: NodaTime.Duration
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.IPattern`1.Format(`0)
  commentId: M:NodaTime.Text.IPattern`1.Format(`0)
  name: Format(T)
  nameWithType: IPattern<T>.Format(T)
  fullName: NodaTime.Text.IPattern<T>.Format(T)
  nameWithType.vb: IPattern(Of T).Format(T)
  fullName.vb: NodaTime.Text.IPattern(Of T).Format(T)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1.Format(`0)
    name: Format
    nameWithType: IPattern<T>.Format
    fullName: NodaTime.Text.IPattern<T>.Format
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Text.IPattern`1.Format(`0)
    name: Format
    nameWithType: IPattern(Of T).Format
    fullName: NodaTime.Text.IPattern(Of T).Format
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Text.StringBuilder
  commentId: T:System.Text.StringBuilder
  parent: System.Text
  isExternal: true
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: NodaTime.Text.DurationPattern.AppendFormat*
  commentId: Overload:NodaTime.Text.DurationPattern.AppendFormat
  name: AppendFormat
  nameWithType: DurationPattern.AppendFormat
  fullName: NodaTime.Text.DurationPattern.AppendFormat
- uid: NodaTime.Text.IPattern{NodaTime.Duration}.AppendFormat(NodaTime.Duration,System.Text.StringBuilder)
  commentId: M:NodaTime.Text.IPattern{NodaTime.Duration}.AppendFormat(NodaTime.Duration,System.Text.StringBuilder)
  parent: NodaTime.Text.IPattern{NodaTime.Duration}
  definition: NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
  name: AppendFormat(Duration, StringBuilder)
  nameWithType: IPattern<Duration>.AppendFormat(Duration, StringBuilder)
  fullName: NodaTime.Text.IPattern<NodaTime.Duration>.AppendFormat(NodaTime.Duration, System.Text.StringBuilder)
  nameWithType.vb: IPattern(Of Duration).AppendFormat(Duration, StringBuilder)
  fullName.vb: NodaTime.Text.IPattern(Of NodaTime.Duration).AppendFormat(NodaTime.Duration, System.Text.StringBuilder)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
    name: AppendFormat
    nameWithType: IPattern<Duration>.AppendFormat
    fullName: NodaTime.Text.IPattern<NodaTime.Duration>.AppendFormat
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Duration
    name: Duration
    nameWithType: Duration
    fullName: NodaTime.Duration
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.StringBuilder
    name: StringBuilder
    nameWithType: StringBuilder
    fullName: System.Text.StringBuilder
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
    name: AppendFormat
    nameWithType: IPattern(Of Duration).AppendFormat
    fullName: NodaTime.Text.IPattern(Of NodaTime.Duration).AppendFormat
  - name: (
    nameWithType: (
    fullName: (
  - uid: NodaTime.Duration
    name: Duration
    nameWithType: Duration
    fullName: NodaTime.Duration
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.StringBuilder
    name: StringBuilder
    nameWithType: StringBuilder
    fullName: System.Text.StringBuilder
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Text
  commentId: N:System.Text
  isExternal: true
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
- uid: NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
  commentId: M:NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
  isExternal: true
  name: AppendFormat(T, StringBuilder)
  nameWithType: IPattern<T>.AppendFormat(T, StringBuilder)
  fullName: NodaTime.Text.IPattern<T>.AppendFormat(T, System.Text.StringBuilder)
  nameWithType.vb: IPattern(Of T).AppendFormat(T, StringBuilder)
  fullName.vb: NodaTime.Text.IPattern(Of T).AppendFormat(T, System.Text.StringBuilder)
  spec.csharp:
  - uid: NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
    name: AppendFormat
    nameWithType: IPattern<T>.AppendFormat
    fullName: NodaTime.Text.IPattern<T>.AppendFormat
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.StringBuilder
    name: StringBuilder
    nameWithType: StringBuilder
    fullName: System.Text.StringBuilder
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NodaTime.Text.IPattern`1.AppendFormat(`0,System.Text.StringBuilder)
    name: AppendFormat
    nameWithType: IPattern(Of T).AppendFormat
    fullName: NodaTime.Text.IPattern(Of T).AppendFormat
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Text.StringBuilder
    name: StringBuilder
    nameWithType: StringBuilder
    fullName: System.Text.StringBuilder
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NodaTime.Text.InvalidPatternException
  commentId: T:NodaTime.Text.InvalidPatternException
  name: InvalidPatternException
  nameWithType: InvalidPatternException
  fullName: NodaTime.Text.InvalidPatternException
- uid: NodaTime.Text.DurationPattern.Create*
  commentId: Overload:NodaTime.Text.DurationPattern.Create
  name: Create
  nameWithType: DurationPattern.Create
  fullName: NodaTime.Text.DurationPattern.Create
- uid: NodaTime.Text.DurationPattern.CreateWithCurrentCulture*
  commentId: Overload:NodaTime.Text.DurationPattern.CreateWithCurrentCulture
  name: CreateWithCurrentCulture
  nameWithType: DurationPattern.CreateWithCurrentCulture
  fullName: NodaTime.Text.DurationPattern.CreateWithCurrentCulture
- uid: NodaTime.Text.DurationPattern.CreateWithInvariantCulture*
  commentId: Overload:NodaTime.Text.DurationPattern.CreateWithInvariantCulture
  name: CreateWithInvariantCulture
  nameWithType: DurationPattern.CreateWithInvariantCulture
  fullName: NodaTime.Text.DurationPattern.CreateWithInvariantCulture
- uid: NodaTime.Text.DurationPattern.WithCulture*
  commentId: Overload:NodaTime.Text.DurationPattern.WithCulture
  name: WithCulture
  nameWithType: DurationPattern.WithCulture
  fullName: NodaTime.Text.DurationPattern.WithCulture
shouldSkipMarkup: true
