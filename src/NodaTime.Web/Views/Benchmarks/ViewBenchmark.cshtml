@using NodaTime.Benchmarks;
@model Benchmark

@{
    ViewBag.Title = "Benchmark";
    var benchmark = Model;
    var env = benchmark.Environment;
    var run = benchmark.Run;
    var type = benchmark.Type;
}

<div class="row">
	<ul class="breadcrumbs">
		<li><a href="/">Home</a></li>
		<li><a href="/benchmarks">Benchmarks</a></li>
		<li><a href="/benchmarks/environments/@env.BenchmarkEnvironmentId">Environment ( @env.Machine, @env.TargetFramework )</a></li>
		<li><a href="/benchmarks/runs/@run.BenchmarkRunId">Run Detail</a></li>
		<li class="current"><a href="#">@type.FullTypeName</a></li>
	</ul>

    <div class="large-12 columns">
        <h1>Benchmark</h1>
        <p>
            Type: <a href="/benchmarks/types/@type.BenchmarkTypeId">@type.FullTypeName</a><br />
            Method: @benchmark.Method<br />
            Environment: <a href="/benchmarks/environments/@env.BenchmarkEnvironmentId">@env.Machine, @env.TargetFramework</a><br />
            Run: <a href="/benchmarks/runs/@run.BenchmarkRunId">@run.BenchmarkRunId.TruncateGuid()</a> <br />
            <a href="/benchmarks/benchmarks/@benchmark.BenchmarkId/history">View history (from here back)</a>
        </p>

        @if (benchmark.Statistics != null)
    {
        var stats = benchmark.Statistics;
        <p>
            N: @stats.TestCount <br />
            @* TODO: Check these are all actually times! Variance is the square of a time...*@
            Mean: @Html.RenderTime(@stats.Mean)<br />
            Standard error: @Html.RenderTime(@stats.StandardError) <br />
            Standard deviation: @Html.RenderTime(@stats.StandardDeviation) <br />
            Variance: @stats.Variance<br />
            Median: @Html.RenderTime(@stats.Median) <br />
            Min: @Html.RenderTime(@stats.Min)<br />
            Min: @Html.RenderTime(@stats.Max)<br />
            Q1: @Html.RenderTime(@stats.Q1)<br />
            Q3: @Html.RenderTime(@stats.Q3)<br />
            Interquartile range: @Html.RenderTime(@stats.InterquartileRange)<br />
            Lower fence: @Html.RenderTime(@stats.LowerFence)<br />
            Upper fence: @Html.RenderTime(@stats.UpperFence)<br />
            Skewness: @stats.Skewness<br />
            Kurtosis: @stats.Kurtosis<br />
        </p>
        <p>
            P0: @Html.RenderTime(@stats.P0)<br />
            P25: @Html.RenderTime(@stats.P25)<br />
            P50: @Html.RenderTime(@stats.P50)<br />
            P67: @Html.RenderTime(@stats.P67)<br />
            P80: @Html.RenderTime(@stats.P80)<br />
            P85: @Html.RenderTime(@stats.P85)<br />
            P90: @Html.RenderTime(@stats.P90)<br />
            P95: @Html.RenderTime(@stats.P95)<br />
            P100: @Html.RenderTime(@stats.P100)<br />
        </p>
}
    </div>
    @* Work out how to style the above to leave some padding instead... *@
    <p />
</div>
