// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: benchmark_protos.proto

#nullable disable

#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NodaTime.Benchmarks {

  /// <summary>Holder for reflection information generated from benchmark_protos.proto</summary>
  public static partial class BenchmarkProtosReflection {

    #region Descriptor
    /// <summary>File descriptor for benchmark_protos.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BenchmarkProtosReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZiZW5jaG1hcmtfcHJvdG9zLnByb3RvEhRub2RhX3RpbWUuYmVuY2htYXJr",
            "cxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byK0AgoUQmVuY2ht",
            "YXJrRW52aXJvbm1lbnQSIAoYYmVuY2htYXJrX2Vudmlyb25tZW50X2lkGAEg",
            "ASgJEg8KB21hY2hpbmUYAiABKAkSGAoQb3BlcmF0aW5nX3N5c3RlbRgDIAEo",
            "CRIRCglwcm9jZXNzb3IYBCABKAkSFwoPcHJvY2Vzc29yX2NvdW50GAUgASgF",
            "EhQKDGFyY2hpdGVjdHVyZRgGIAEoCRIYChB0YXJnZXRfZnJhbWV3b3JrGAcg",
            "ASgJEhMKC2ppdF9tb2R1bGVzGAggASgJEhMKC2hhc19yeXVfaml0GAkgASgI",
            "EhcKD3J1bnRpbWVfdmVyc2lvbhgKIAEoCRIwCgRydW5zGGQgAygLMiIubm9k",
            "YV90aW1lLmJlbmNobWFya3MuQmVuY2htYXJrUnVuIoUCCgxCZW5jaG1hcmtS",
            "dW4SGAoQYmVuY2htYXJrX3J1bl9pZBgBIAEoCRIgChhiZW5jaG1hcmtfZW52",
            "aXJvbm1lbnRfaWQYAiABKAkSDgoGY29tbWl0GAMgASgJEikKBXN0YXJ0GAQg",
            "ASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBInCgNlbmQYBSABKAsy",
            "Gi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEiEKGWJlbmNobWFya19kb3Rf",
            "bmV0X3ZlcnNpb24YCiABKAkSMgoFdHlwZXMYZCADKAsyIy5ub2RhX3RpbWUu",
            "YmVuY2htYXJrcy5CZW5jaG1hcmtUeXBlIrIBCg1CZW5jaG1hcmtUeXBlEhkK",
            "EWJlbmNobWFya190eXBlX2lkGAEgASgJEhgKEGJlbmNobWFya19ydW5faWQY",
            "AiABKAkSFgoOZnVsbF90eXBlX25hbWUYAyABKAkSEQoJbmFtZXNwYWNlGAQg",
            "ASgJEgwKBHR5cGUYBSABKAkSMwoKYmVuY2htYXJrcxhkIAMoCzIfLm5vZGFf",
            "dGltZS5iZW5jaG1hcmtzLkJlbmNobWFyayKwAQoJQmVuY2htYXJrEhQKDGJl",
            "bmNobWFya19pZBgBIAEoCRIZChFiZW5jaG1hcmtfdHlwZV9pZBgCIAEoCRIO",
            "CgZtZXRob2QYAyABKAkSGAoQZnVsbF9tZXRob2RfbmFtZRgEIAEoCRISCgpw",
            "YXJhbWV0ZXJzGAUgASgJEjQKCnN0YXRpc3RpY3MYBiABKAsyIC5ub2RhX3Rp",
            "bWUuYmVuY2htYXJrcy5TdGF0aXN0aWNzIpYDCgpTdGF0aXN0aWNzEhIKCnRl",
            "c3RfY291bnQYASABKAUSDAoEbWVhbhgCIAEoARILCgNtaW4YAyABKAESCwoD",
            "bWF4GAQgASgBEg4KBm1lZGlhbhgFIAEoARITCgtsb3dlcl9mZW5jZRgGIAEo",
            "ARITCgt1cHBlcl9mZW5jZRgHIAEoARIKCgJxMRgIIAEoARIKCgJxMxgJIAEo",
            "ARIbChNpbnRlcnF1YXJ0aWxlX3JhbmdlGAogASgBEhYKDnN0YW5kYXJkX2Vy",
            "cm9yGAsgASgBEhAKCHZhcmlhbmNlGAwgASgBEhoKEnN0YW5kYXJkX2Rldmlh",
            "dGlvbhgNIAEoARIQCghza2V3bmVzcxgOIAEoARIQCghrdXJ0b3NpcxgPIAEo",
            "ARIKCgJwMBgyIAEoARILCgNwMjUYMyABKAESCwoDcDUwGDQgASgBEgsKA3A2",
            "Nxg1IAEoARILCgNwODAYNiABKAESCwoDcDg1GDcgASgBEgsKA3A5MBg4IAEo",
            "ARILCgNwOTUYOSABKAESDAoEcDEwMBg6IAEoAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NodaTime.Benchmarks.BenchmarkEnvironment), global::NodaTime.Benchmarks.BenchmarkEnvironment.Parser, new[]{ "BenchmarkEnvironmentId", "Machine", "OperatingSystem", "Processor", "ProcessorCount", "Architecture", "TargetFramework", "JitModules", "HasRyuJit", "RuntimeVersion", "Runs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NodaTime.Benchmarks.BenchmarkRun), global::NodaTime.Benchmarks.BenchmarkRun.Parser, new[]{ "BenchmarkRunId", "BenchmarkEnvironmentId", "Commit", "Start", "End", "BenchmarkDotNetVersion", "Types_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NodaTime.Benchmarks.BenchmarkType), global::NodaTime.Benchmarks.BenchmarkType.Parser, new[]{ "BenchmarkTypeId", "BenchmarkRunId", "FullTypeName", "Namespace", "Type", "Benchmarks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NodaTime.Benchmarks.Benchmark), global::NodaTime.Benchmarks.Benchmark.Parser, new[]{ "BenchmarkId", "BenchmarkTypeId", "Method", "FullMethodName", "Parameters", "Statistics" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NodaTime.Benchmarks.Statistics), global::NodaTime.Benchmarks.Statistics.Parser, new[]{ "TestCount", "Mean", "Min", "Max", "Median", "LowerFence", "UpperFence", "Q1", "Q3", "InterquartileRange", "StandardError", "Variance", "StandardDeviation", "Skewness", "Kurtosis", "P0", "P25", "P50", "P67", "P80", "P85", "P90", "P95", "P100" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BenchmarkEnvironment : pb::IMessage<BenchmarkEnvironment> {
    private static readonly pb::MessageParser<BenchmarkEnvironment> _parser = new pb::MessageParser<BenchmarkEnvironment>(() => new BenchmarkEnvironment());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BenchmarkEnvironment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NodaTime.Benchmarks.BenchmarkProtosReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BenchmarkEnvironment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BenchmarkEnvironment(BenchmarkEnvironment other) : this() {
      benchmarkEnvironmentId_ = other.benchmarkEnvironmentId_;
      machine_ = other.machine_;
      operatingSystem_ = other.operatingSystem_;
      processor_ = other.processor_;
      processorCount_ = other.processorCount_;
      architecture_ = other.architecture_;
      targetFramework_ = other.targetFramework_;
      jitModules_ = other.jitModules_;
      hasRyuJit_ = other.hasRyuJit_;
      runtimeVersion_ = other.runtimeVersion_;
      runs_ = other.runs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BenchmarkEnvironment Clone() {
      return new BenchmarkEnvironment(this);
    }

    /// <summary>Field number for the "benchmark_environment_id" field.</summary>
    public const int BenchmarkEnvironmentIdFieldNumber = 1;
    private string benchmarkEnvironmentId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BenchmarkEnvironmentId {
      get { return benchmarkEnvironmentId_; }
      set {
        benchmarkEnvironmentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "machine" field.</summary>
    public const int MachineFieldNumber = 2;
    private string machine_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Machine {
      get { return machine_; }
      set {
        machine_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "operating_system" field.</summary>
    public const int OperatingSystemFieldNumber = 3;
    private string operatingSystem_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OperatingSystem {
      get { return operatingSystem_; }
      set {
        operatingSystem_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "processor" field.</summary>
    public const int ProcessorFieldNumber = 4;
    private string processor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Processor {
      get { return processor_; }
      set {
        processor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "processor_count" field.</summary>
    public const int ProcessorCountFieldNumber = 5;
    private int processorCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProcessorCount {
      get { return processorCount_; }
      set {
        processorCount_ = value;
      }
    }

    /// <summary>Field number for the "architecture" field.</summary>
    public const int ArchitectureFieldNumber = 6;
    private string architecture_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Architecture {
      get { return architecture_; }
      set {
        architecture_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "target_framework" field.</summary>
    public const int TargetFrameworkFieldNumber = 7;
    private string targetFramework_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetFramework {
      get { return targetFramework_; }
      set {
        targetFramework_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "jit_modules" field.</summary>
    public const int JitModulesFieldNumber = 8;
    private string jitModules_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JitModules {
      get { return jitModules_; }
      set {
        jitModules_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "has_ryu_jit" field.</summary>
    public const int HasRyuJitFieldNumber = 9;
    private bool hasRyuJit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRyuJit {
      get { return hasRyuJit_; }
      set {
        hasRyuJit_ = value;
      }
    }

    /// <summary>Field number for the "runtime_version" field.</summary>
    public const int RuntimeVersionFieldNumber = 10;
    private string runtimeVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RuntimeVersion {
      get { return runtimeVersion_; }
      set {
        runtimeVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "runs" field.</summary>
    public const int RunsFieldNumber = 100;
    private static readonly pb::FieldCodec<global::NodaTime.Benchmarks.BenchmarkRun> _repeated_runs_codec
        = pb::FieldCodec.ForMessage(802, global::NodaTime.Benchmarks.BenchmarkRun.Parser);
    private readonly pbc::RepeatedField<global::NodaTime.Benchmarks.BenchmarkRun> runs_ = new pbc::RepeatedField<global::NodaTime.Benchmarks.BenchmarkRun>();
    /// <summary>
    /// May or may not be populated, depending on context.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NodaTime.Benchmarks.BenchmarkRun> Runs {
      get { return runs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BenchmarkEnvironment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BenchmarkEnvironment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BenchmarkEnvironmentId != other.BenchmarkEnvironmentId) return false;
      if (Machine != other.Machine) return false;
      if (OperatingSystem != other.OperatingSystem) return false;
      if (Processor != other.Processor) return false;
      if (ProcessorCount != other.ProcessorCount) return false;
      if (Architecture != other.Architecture) return false;
      if (TargetFramework != other.TargetFramework) return false;
      if (JitModules != other.JitModules) return false;
      if (HasRyuJit != other.HasRyuJit) return false;
      if (RuntimeVersion != other.RuntimeVersion) return false;
      if(!runs_.Equals(other.runs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BenchmarkEnvironmentId.Length != 0) hash ^= BenchmarkEnvironmentId.GetHashCode();
      if (Machine.Length != 0) hash ^= Machine.GetHashCode();
      if (OperatingSystem.Length != 0) hash ^= OperatingSystem.GetHashCode();
      if (Processor.Length != 0) hash ^= Processor.GetHashCode();
      if (ProcessorCount != 0) hash ^= ProcessorCount.GetHashCode();
      if (Architecture.Length != 0) hash ^= Architecture.GetHashCode();
      if (TargetFramework.Length != 0) hash ^= TargetFramework.GetHashCode();
      if (JitModules.Length != 0) hash ^= JitModules.GetHashCode();
      if (HasRyuJit != false) hash ^= HasRyuJit.GetHashCode();
      if (RuntimeVersion.Length != 0) hash ^= RuntimeVersion.GetHashCode();
      hash ^= runs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BenchmarkEnvironmentId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BenchmarkEnvironmentId);
      }
      if (Machine.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Machine);
      }
      if (OperatingSystem.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OperatingSystem);
      }
      if (Processor.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Processor);
      }
      if (ProcessorCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ProcessorCount);
      }
      if (Architecture.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Architecture);
      }
      if (TargetFramework.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(TargetFramework);
      }
      if (JitModules.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(JitModules);
      }
      if (HasRyuJit != false) {
        output.WriteRawTag(72);
        output.WriteBool(HasRyuJit);
      }
      if (RuntimeVersion.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(RuntimeVersion);
      }
      runs_.WriteTo(output, _repeated_runs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BenchmarkEnvironmentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BenchmarkEnvironmentId);
      }
      if (Machine.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Machine);
      }
      if (OperatingSystem.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OperatingSystem);
      }
      if (Processor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Processor);
      }
      if (ProcessorCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProcessorCount);
      }
      if (Architecture.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Architecture);
      }
      if (TargetFramework.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetFramework);
      }
      if (JitModules.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JitModules);
      }
      if (HasRyuJit != false) {
        size += 1 + 1;
      }
      if (RuntimeVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RuntimeVersion);
      }
      size += runs_.CalculateSize(_repeated_runs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BenchmarkEnvironment other) {
      if (other == null) {
        return;
      }
      if (other.BenchmarkEnvironmentId.Length != 0) {
        BenchmarkEnvironmentId = other.BenchmarkEnvironmentId;
      }
      if (other.Machine.Length != 0) {
        Machine = other.Machine;
      }
      if (other.OperatingSystem.Length != 0) {
        OperatingSystem = other.OperatingSystem;
      }
      if (other.Processor.Length != 0) {
        Processor = other.Processor;
      }
      if (other.ProcessorCount != 0) {
        ProcessorCount = other.ProcessorCount;
      }
      if (other.Architecture.Length != 0) {
        Architecture = other.Architecture;
      }
      if (other.TargetFramework.Length != 0) {
        TargetFramework = other.TargetFramework;
      }
      if (other.JitModules.Length != 0) {
        JitModules = other.JitModules;
      }
      if (other.HasRyuJit != false) {
        HasRyuJit = other.HasRyuJit;
      }
      if (other.RuntimeVersion.Length != 0) {
        RuntimeVersion = other.RuntimeVersion;
      }
      runs_.Add(other.runs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BenchmarkEnvironmentId = input.ReadString();
            break;
          }
          case 18: {
            Machine = input.ReadString();
            break;
          }
          case 26: {
            OperatingSystem = input.ReadString();
            break;
          }
          case 34: {
            Processor = input.ReadString();
            break;
          }
          case 40: {
            ProcessorCount = input.ReadInt32();
            break;
          }
          case 50: {
            Architecture = input.ReadString();
            break;
          }
          case 58: {
            TargetFramework = input.ReadString();
            break;
          }
          case 66: {
            JitModules = input.ReadString();
            break;
          }
          case 72: {
            HasRyuJit = input.ReadBool();
            break;
          }
          case 82: {
            RuntimeVersion = input.ReadString();
            break;
          }
          case 802: {
            runs_.AddEntriesFrom(input, _repeated_runs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BenchmarkRun : pb::IMessage<BenchmarkRun> {
    private static readonly pb::MessageParser<BenchmarkRun> _parser = new pb::MessageParser<BenchmarkRun>(() => new BenchmarkRun());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BenchmarkRun> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NodaTime.Benchmarks.BenchmarkProtosReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BenchmarkRun() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BenchmarkRun(BenchmarkRun other) : this() {
      benchmarkRunId_ = other.benchmarkRunId_;
      benchmarkEnvironmentId_ = other.benchmarkEnvironmentId_;
      commit_ = other.commit_;
      Start = other.start_ != null ? other.Start.Clone() : null;
      End = other.end_ != null ? other.End.Clone() : null;
      benchmarkDotNetVersion_ = other.benchmarkDotNetVersion_;
      types_ = other.types_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BenchmarkRun Clone() {
      return new BenchmarkRun(this);
    }

    /// <summary>Field number for the "benchmark_run_id" field.</summary>
    public const int BenchmarkRunIdFieldNumber = 1;
    private string benchmarkRunId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BenchmarkRunId {
      get { return benchmarkRunId_; }
      set {
        benchmarkRunId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "benchmark_environment_id" field.</summary>
    public const int BenchmarkEnvironmentIdFieldNumber = 2;
    private string benchmarkEnvironmentId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BenchmarkEnvironmentId {
      get { return benchmarkEnvironmentId_; }
      set {
        benchmarkEnvironmentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "commit" field.</summary>
    public const int CommitFieldNumber = 3;
    private string commit_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Commit {
      get { return commit_; }
      set {
        commit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp end_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    /// <summary>Field number for the "benchmark_dot_net_version" field.</summary>
    public const int BenchmarkDotNetVersionFieldNumber = 10;
    private string benchmarkDotNetVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BenchmarkDotNetVersion {
      get { return benchmarkDotNetVersion_; }
      set {
        benchmarkDotNetVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "types" field.</summary>
    public const int Types_FieldNumber = 100;
    private static readonly pb::FieldCodec<global::NodaTime.Benchmarks.BenchmarkType> _repeated_types_codec
        = pb::FieldCodec.ForMessage(802, global::NodaTime.Benchmarks.BenchmarkType.Parser);
    private readonly pbc::RepeatedField<global::NodaTime.Benchmarks.BenchmarkType> types_ = new pbc::RepeatedField<global::NodaTime.Benchmarks.BenchmarkType>();
    /// <summary>
    /// May or may not be populated, depending on context.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NodaTime.Benchmarks.BenchmarkType> Types_ {
      get { return types_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BenchmarkRun);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BenchmarkRun other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BenchmarkRunId != other.BenchmarkRunId) return false;
      if (BenchmarkEnvironmentId != other.BenchmarkEnvironmentId) return false;
      if (Commit != other.Commit) return false;
      if (!object.Equals(Start, other.Start)) return false;
      if (!object.Equals(End, other.End)) return false;
      if (BenchmarkDotNetVersion != other.BenchmarkDotNetVersion) return false;
      if(!types_.Equals(other.types_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BenchmarkRunId.Length != 0) hash ^= BenchmarkRunId.GetHashCode();
      if (BenchmarkEnvironmentId.Length != 0) hash ^= BenchmarkEnvironmentId.GetHashCode();
      if (Commit.Length != 0) hash ^= Commit.GetHashCode();
      if (start_ != null) hash ^= Start.GetHashCode();
      if (end_ != null) hash ^= End.GetHashCode();
      if (BenchmarkDotNetVersion.Length != 0) hash ^= BenchmarkDotNetVersion.GetHashCode();
      hash ^= types_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BenchmarkRunId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BenchmarkRunId);
      }
      if (BenchmarkEnvironmentId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BenchmarkEnvironmentId);
      }
      if (Commit.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Commit);
      }
      if (start_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Start);
      }
      if (end_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(End);
      }
      if (BenchmarkDotNetVersion.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(BenchmarkDotNetVersion);
      }
      types_.WriteTo(output, _repeated_types_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BenchmarkRunId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BenchmarkRunId);
      }
      if (BenchmarkEnvironmentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BenchmarkEnvironmentId);
      }
      if (Commit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Commit);
      }
      if (start_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Start);
      }
      if (end_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(End);
      }
      if (BenchmarkDotNetVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BenchmarkDotNetVersion);
      }
      size += types_.CalculateSize(_repeated_types_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BenchmarkRun other) {
      if (other == null) {
        return;
      }
      if (other.BenchmarkRunId.Length != 0) {
        BenchmarkRunId = other.BenchmarkRunId;
      }
      if (other.BenchmarkEnvironmentId.Length != 0) {
        BenchmarkEnvironmentId = other.BenchmarkEnvironmentId;
      }
      if (other.Commit.Length != 0) {
        Commit = other.Commit;
      }
      if (other.start_ != null) {
        if (start_ == null) {
          start_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Start.MergeFrom(other.Start);
      }
      if (other.end_ != null) {
        if (end_ == null) {
          end_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        End.MergeFrom(other.End);
      }
      if (other.BenchmarkDotNetVersion.Length != 0) {
        BenchmarkDotNetVersion = other.BenchmarkDotNetVersion;
      }
      types_.Add(other.types_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BenchmarkRunId = input.ReadString();
            break;
          }
          case 18: {
            BenchmarkEnvironmentId = input.ReadString();
            break;
          }
          case 26: {
            Commit = input.ReadString();
            break;
          }
          case 34: {
            if (start_ == null) {
              start_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(start_);
            break;
          }
          case 42: {
            if (end_ == null) {
              end_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(end_);
            break;
          }
          case 82: {
            BenchmarkDotNetVersion = input.ReadString();
            break;
          }
          case 802: {
            types_.AddEntriesFrom(input, _repeated_types_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BenchmarkType : pb::IMessage<BenchmarkType> {
    private static readonly pb::MessageParser<BenchmarkType> _parser = new pb::MessageParser<BenchmarkType>(() => new BenchmarkType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BenchmarkType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NodaTime.Benchmarks.BenchmarkProtosReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BenchmarkType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BenchmarkType(BenchmarkType other) : this() {
      benchmarkTypeId_ = other.benchmarkTypeId_;
      benchmarkRunId_ = other.benchmarkRunId_;
      fullTypeName_ = other.fullTypeName_;
      namespace_ = other.namespace_;
      type_ = other.type_;
      benchmarks_ = other.benchmarks_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BenchmarkType Clone() {
      return new BenchmarkType(this);
    }

    /// <summary>Field number for the "benchmark_type_id" field.</summary>
    public const int BenchmarkTypeIdFieldNumber = 1;
    private string benchmarkTypeId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BenchmarkTypeId {
      get { return benchmarkTypeId_; }
      set {
        benchmarkTypeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "benchmark_run_id" field.</summary>
    public const int BenchmarkRunIdFieldNumber = 2;
    private string benchmarkRunId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BenchmarkRunId {
      get { return benchmarkRunId_; }
      set {
        benchmarkRunId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "full_type_name" field.</summary>
    public const int FullTypeNameFieldNumber = 3;
    private string fullTypeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FullTypeName {
      get { return fullTypeName_; }
      set {
        fullTypeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "namespace" field.</summary>
    public const int NamespaceFieldNumber = 4;
    private string namespace_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Namespace {
      get { return namespace_; }
      set {
        namespace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "benchmarks" field.</summary>
    public const int BenchmarksFieldNumber = 100;
    private static readonly pb::FieldCodec<global::NodaTime.Benchmarks.Benchmark> _repeated_benchmarks_codec
        = pb::FieldCodec.ForMessage(802, global::NodaTime.Benchmarks.Benchmark.Parser);
    private readonly pbc::RepeatedField<global::NodaTime.Benchmarks.Benchmark> benchmarks_ = new pbc::RepeatedField<global::NodaTime.Benchmarks.Benchmark>();
    /// <summary>
    /// May or may not be populated, depending on context.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NodaTime.Benchmarks.Benchmark> Benchmarks {
      get { return benchmarks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BenchmarkType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BenchmarkType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BenchmarkTypeId != other.BenchmarkTypeId) return false;
      if (BenchmarkRunId != other.BenchmarkRunId) return false;
      if (FullTypeName != other.FullTypeName) return false;
      if (Namespace != other.Namespace) return false;
      if (Type != other.Type) return false;
      if(!benchmarks_.Equals(other.benchmarks_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BenchmarkTypeId.Length != 0) hash ^= BenchmarkTypeId.GetHashCode();
      if (BenchmarkRunId.Length != 0) hash ^= BenchmarkRunId.GetHashCode();
      if (FullTypeName.Length != 0) hash ^= FullTypeName.GetHashCode();
      if (Namespace.Length != 0) hash ^= Namespace.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      hash ^= benchmarks_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BenchmarkTypeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BenchmarkTypeId);
      }
      if (BenchmarkRunId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BenchmarkRunId);
      }
      if (FullTypeName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FullTypeName);
      }
      if (Namespace.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Namespace);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Type);
      }
      benchmarks_.WriteTo(output, _repeated_benchmarks_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BenchmarkTypeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BenchmarkTypeId);
      }
      if (BenchmarkRunId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BenchmarkRunId);
      }
      if (FullTypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FullTypeName);
      }
      if (Namespace.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Namespace);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      size += benchmarks_.CalculateSize(_repeated_benchmarks_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BenchmarkType other) {
      if (other == null) {
        return;
      }
      if (other.BenchmarkTypeId.Length != 0) {
        BenchmarkTypeId = other.BenchmarkTypeId;
      }
      if (other.BenchmarkRunId.Length != 0) {
        BenchmarkRunId = other.BenchmarkRunId;
      }
      if (other.FullTypeName.Length != 0) {
        FullTypeName = other.FullTypeName;
      }
      if (other.Namespace.Length != 0) {
        Namespace = other.Namespace;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      benchmarks_.Add(other.benchmarks_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BenchmarkTypeId = input.ReadString();
            break;
          }
          case 18: {
            BenchmarkRunId = input.ReadString();
            break;
          }
          case 26: {
            FullTypeName = input.ReadString();
            break;
          }
          case 34: {
            Namespace = input.ReadString();
            break;
          }
          case 42: {
            Type = input.ReadString();
            break;
          }
          case 802: {
            benchmarks_.AddEntriesFrom(input, _repeated_benchmarks_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Could denormalize this... unclear for now.
  /// </summary>
  public sealed partial class Benchmark : pb::IMessage<Benchmark> {
    private static readonly pb::MessageParser<Benchmark> _parser = new pb::MessageParser<Benchmark>(() => new Benchmark());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Benchmark> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NodaTime.Benchmarks.BenchmarkProtosReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Benchmark() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Benchmark(Benchmark other) : this() {
      benchmarkId_ = other.benchmarkId_;
      benchmarkTypeId_ = other.benchmarkTypeId_;
      method_ = other.method_;
      fullMethodName_ = other.fullMethodName_;
      parameters_ = other.parameters_;
      Statistics = other.statistics_ != null ? other.Statistics.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Benchmark Clone() {
      return new Benchmark(this);
    }

    /// <summary>Field number for the "benchmark_id" field.</summary>
    public const int BenchmarkIdFieldNumber = 1;
    private string benchmarkId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BenchmarkId {
      get { return benchmarkId_; }
      set {
        benchmarkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "benchmark_type_id" field.</summary>
    public const int BenchmarkTypeIdFieldNumber = 2;
    private string benchmarkTypeId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BenchmarkTypeId {
      get { return benchmarkTypeId_; }
      set {
        benchmarkTypeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "method" field.</summary>
    public const int MethodFieldNumber = 3;
    private string method_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Method {
      get { return method_; }
      set {
        method_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "full_method_name" field.</summary>
    public const int FullMethodNameFieldNumber = 4;
    private string fullMethodName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FullMethodName {
      get { return fullMethodName_; }
      set {
        fullMethodName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parameters" field.</summary>
    public const int ParametersFieldNumber = 5;
    private string parameters_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parameters {
      get { return parameters_; }
      set {
        parameters_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "statistics" field.</summary>
    public const int StatisticsFieldNumber = 6;
    private global::NodaTime.Benchmarks.Statistics statistics_;
    /// <summary>
    /// Only present if there are no errors
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NodaTime.Benchmarks.Statistics Statistics {
      get { return statistics_; }
      set {
        statistics_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Benchmark);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Benchmark other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BenchmarkId != other.BenchmarkId) return false;
      if (BenchmarkTypeId != other.BenchmarkTypeId) return false;
      if (Method != other.Method) return false;
      if (FullMethodName != other.FullMethodName) return false;
      if (Parameters != other.Parameters) return false;
      if (!object.Equals(Statistics, other.Statistics)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BenchmarkId.Length != 0) hash ^= BenchmarkId.GetHashCode();
      if (BenchmarkTypeId.Length != 0) hash ^= BenchmarkTypeId.GetHashCode();
      if (Method.Length != 0) hash ^= Method.GetHashCode();
      if (FullMethodName.Length != 0) hash ^= FullMethodName.GetHashCode();
      if (Parameters.Length != 0) hash ^= Parameters.GetHashCode();
      if (statistics_ != null) hash ^= Statistics.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BenchmarkId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BenchmarkId);
      }
      if (BenchmarkTypeId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BenchmarkTypeId);
      }
      if (Method.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Method);
      }
      if (FullMethodName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FullMethodName);
      }
      if (Parameters.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Parameters);
      }
      if (statistics_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Statistics);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BenchmarkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BenchmarkId);
      }
      if (BenchmarkTypeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BenchmarkTypeId);
      }
      if (Method.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Method);
      }
      if (FullMethodName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FullMethodName);
      }
      if (Parameters.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parameters);
      }
      if (statistics_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Statistics);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Benchmark other) {
      if (other == null) {
        return;
      }
      if (other.BenchmarkId.Length != 0) {
        BenchmarkId = other.BenchmarkId;
      }
      if (other.BenchmarkTypeId.Length != 0) {
        BenchmarkTypeId = other.BenchmarkTypeId;
      }
      if (other.Method.Length != 0) {
        Method = other.Method;
      }
      if (other.FullMethodName.Length != 0) {
        FullMethodName = other.FullMethodName;
      }
      if (other.Parameters.Length != 0) {
        Parameters = other.Parameters;
      }
      if (other.statistics_ != null) {
        if (statistics_ == null) {
          statistics_ = new global::NodaTime.Benchmarks.Statistics();
        }
        Statistics.MergeFrom(other.Statistics);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BenchmarkId = input.ReadString();
            break;
          }
          case 18: {
            BenchmarkTypeId = input.ReadString();
            break;
          }
          case 26: {
            Method = input.ReadString();
            break;
          }
          case 34: {
            FullMethodName = input.ReadString();
            break;
          }
          case 42: {
            Parameters = input.ReadString();
            break;
          }
          case 50: {
            if (statistics_ == null) {
              statistics_ = new global::NodaTime.Benchmarks.Statistics();
            }
            input.ReadMessage(statistics_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Statistics : pb::IMessage<Statistics> {
    private static readonly pb::MessageParser<Statistics> _parser = new pb::MessageParser<Statistics>(() => new Statistics());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Statistics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NodaTime.Benchmarks.BenchmarkProtosReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Statistics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Statistics(Statistics other) : this() {
      testCount_ = other.testCount_;
      mean_ = other.mean_;
      min_ = other.min_;
      max_ = other.max_;
      median_ = other.median_;
      lowerFence_ = other.lowerFence_;
      upperFence_ = other.upperFence_;
      q1_ = other.q1_;
      q3_ = other.q3_;
      interquartileRange_ = other.interquartileRange_;
      standardError_ = other.standardError_;
      variance_ = other.variance_;
      standardDeviation_ = other.standardDeviation_;
      skewness_ = other.skewness_;
      kurtosis_ = other.kurtosis_;
      p0_ = other.p0_;
      p25_ = other.p25_;
      p50_ = other.p50_;
      p67_ = other.p67_;
      p80_ = other.p80_;
      p85_ = other.p85_;
      p90_ = other.p90_;
      p95_ = other.p95_;
      p100_ = other.p100_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Statistics Clone() {
      return new Statistics(this);
    }

    /// <summary>Field number for the "test_count" field.</summary>
    public const int TestCountFieldNumber = 1;
    private int testCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TestCount {
      get { return testCount_; }
      set {
        testCount_ = value;
      }
    }

    /// <summary>Field number for the "mean" field.</summary>
    public const int MeanFieldNumber = 2;
    private double mean_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Mean {
      get { return mean_; }
      set {
        mean_ = value;
      }
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 3;
    private double min_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Min {
      get { return min_; }
      set {
        min_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 4;
    private double max_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    /// <summary>Field number for the "median" field.</summary>
    public const int MedianFieldNumber = 5;
    private double median_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Median {
      get { return median_; }
      set {
        median_ = value;
      }
    }

    /// <summary>Field number for the "lower_fence" field.</summary>
    public const int LowerFenceFieldNumber = 6;
    private double lowerFence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LowerFence {
      get { return lowerFence_; }
      set {
        lowerFence_ = value;
      }
    }

    /// <summary>Field number for the "upper_fence" field.</summary>
    public const int UpperFenceFieldNumber = 7;
    private double upperFence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double UpperFence {
      get { return upperFence_; }
      set {
        upperFence_ = value;
      }
    }

    /// <summary>Field number for the "q1" field.</summary>
    public const int Q1FieldNumber = 8;
    private double q1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Q1 {
      get { return q1_; }
      set {
        q1_ = value;
      }
    }

    /// <summary>Field number for the "q3" field.</summary>
    public const int Q3FieldNumber = 9;
    private double q3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Q3 {
      get { return q3_; }
      set {
        q3_ = value;
      }
    }

    /// <summary>Field number for the "interquartile_range" field.</summary>
    public const int InterquartileRangeFieldNumber = 10;
    private double interquartileRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double InterquartileRange {
      get { return interquartileRange_; }
      set {
        interquartileRange_ = value;
      }
    }

    /// <summary>Field number for the "standard_error" field.</summary>
    public const int StandardErrorFieldNumber = 11;
    private double standardError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StandardError {
      get { return standardError_; }
      set {
        standardError_ = value;
      }
    }

    /// <summary>Field number for the "variance" field.</summary>
    public const int VarianceFieldNumber = 12;
    private double variance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Variance {
      get { return variance_; }
      set {
        variance_ = value;
      }
    }

    /// <summary>Field number for the "standard_deviation" field.</summary>
    public const int StandardDeviationFieldNumber = 13;
    private double standardDeviation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StandardDeviation {
      get { return standardDeviation_; }
      set {
        standardDeviation_ = value;
      }
    }

    /// <summary>Field number for the "skewness" field.</summary>
    public const int SkewnessFieldNumber = 14;
    private double skewness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Skewness {
      get { return skewness_; }
      set {
        skewness_ = value;
      }
    }

    /// <summary>Field number for the "kurtosis" field.</summary>
    public const int KurtosisFieldNumber = 15;
    private double kurtosis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Kurtosis {
      get { return kurtosis_; }
      set {
        kurtosis_ = value;
      }
    }

    /// <summary>Field number for the "p0" field.</summary>
    public const int P0FieldNumber = 50;
    private double p0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double P0 {
      get { return p0_; }
      set {
        p0_ = value;
      }
    }

    /// <summary>Field number for the "p25" field.</summary>
    public const int P25FieldNumber = 51;
    private double p25_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double P25 {
      get { return p25_; }
      set {
        p25_ = value;
      }
    }

    /// <summary>Field number for the "p50" field.</summary>
    public const int P50FieldNumber = 52;
    private double p50_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double P50 {
      get { return p50_; }
      set {
        p50_ = value;
      }
    }

    /// <summary>Field number for the "p67" field.</summary>
    public const int P67FieldNumber = 53;
    private double p67_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double P67 {
      get { return p67_; }
      set {
        p67_ = value;
      }
    }

    /// <summary>Field number for the "p80" field.</summary>
    public const int P80FieldNumber = 54;
    private double p80_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double P80 {
      get { return p80_; }
      set {
        p80_ = value;
      }
    }

    /// <summary>Field number for the "p85" field.</summary>
    public const int P85FieldNumber = 55;
    private double p85_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double P85 {
      get { return p85_; }
      set {
        p85_ = value;
      }
    }

    /// <summary>Field number for the "p90" field.</summary>
    public const int P90FieldNumber = 56;
    private double p90_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double P90 {
      get { return p90_; }
      set {
        p90_ = value;
      }
    }

    /// <summary>Field number for the "p95" field.</summary>
    public const int P95FieldNumber = 57;
    private double p95_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double P95 {
      get { return p95_; }
      set {
        p95_ = value;
      }
    }

    /// <summary>Field number for the "p100" field.</summary>
    public const int P100FieldNumber = 58;
    private double p100_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double P100 {
      get { return p100_; }
      set {
        p100_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Statistics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Statistics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TestCount != other.TestCount) return false;
      if (Mean != other.Mean) return false;
      if (Min != other.Min) return false;
      if (Max != other.Max) return false;
      if (Median != other.Median) return false;
      if (LowerFence != other.LowerFence) return false;
      if (UpperFence != other.UpperFence) return false;
      if (Q1 != other.Q1) return false;
      if (Q3 != other.Q3) return false;
      if (InterquartileRange != other.InterquartileRange) return false;
      if (StandardError != other.StandardError) return false;
      if (Variance != other.Variance) return false;
      if (StandardDeviation != other.StandardDeviation) return false;
      if (Skewness != other.Skewness) return false;
      if (Kurtosis != other.Kurtosis) return false;
      if (P0 != other.P0) return false;
      if (P25 != other.P25) return false;
      if (P50 != other.P50) return false;
      if (P67 != other.P67) return false;
      if (P80 != other.P80) return false;
      if (P85 != other.P85) return false;
      if (P90 != other.P90) return false;
      if (P95 != other.P95) return false;
      if (P100 != other.P100) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TestCount != 0) hash ^= TestCount.GetHashCode();
      if (Mean != 0D) hash ^= Mean.GetHashCode();
      if (Min != 0D) hash ^= Min.GetHashCode();
      if (Max != 0D) hash ^= Max.GetHashCode();
      if (Median != 0D) hash ^= Median.GetHashCode();
      if (LowerFence != 0D) hash ^= LowerFence.GetHashCode();
      if (UpperFence != 0D) hash ^= UpperFence.GetHashCode();
      if (Q1 != 0D) hash ^= Q1.GetHashCode();
      if (Q3 != 0D) hash ^= Q3.GetHashCode();
      if (InterquartileRange != 0D) hash ^= InterquartileRange.GetHashCode();
      if (StandardError != 0D) hash ^= StandardError.GetHashCode();
      if (Variance != 0D) hash ^= Variance.GetHashCode();
      if (StandardDeviation != 0D) hash ^= StandardDeviation.GetHashCode();
      if (Skewness != 0D) hash ^= Skewness.GetHashCode();
      if (Kurtosis != 0D) hash ^= Kurtosis.GetHashCode();
      if (P0 != 0D) hash ^= P0.GetHashCode();
      if (P25 != 0D) hash ^= P25.GetHashCode();
      if (P50 != 0D) hash ^= P50.GetHashCode();
      if (P67 != 0D) hash ^= P67.GetHashCode();
      if (P80 != 0D) hash ^= P80.GetHashCode();
      if (P85 != 0D) hash ^= P85.GetHashCode();
      if (P90 != 0D) hash ^= P90.GetHashCode();
      if (P95 != 0D) hash ^= P95.GetHashCode();
      if (P100 != 0D) hash ^= P100.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TestCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TestCount);
      }
      if (Mean != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Mean);
      }
      if (Min != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Min);
      }
      if (Max != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Max);
      }
      if (Median != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Median);
      }
      if (LowerFence != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(LowerFence);
      }
      if (UpperFence != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(UpperFence);
      }
      if (Q1 != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Q1);
      }
      if (Q3 != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Q3);
      }
      if (InterquartileRange != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(InterquartileRange);
      }
      if (StandardError != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(StandardError);
      }
      if (Variance != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(Variance);
      }
      if (StandardDeviation != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(StandardDeviation);
      }
      if (Skewness != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(Skewness);
      }
      if (Kurtosis != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(Kurtosis);
      }
      if (P0 != 0D) {
        output.WriteRawTag(145, 3);
        output.WriteDouble(P0);
      }
      if (P25 != 0D) {
        output.WriteRawTag(153, 3);
        output.WriteDouble(P25);
      }
      if (P50 != 0D) {
        output.WriteRawTag(161, 3);
        output.WriteDouble(P50);
      }
      if (P67 != 0D) {
        output.WriteRawTag(169, 3);
        output.WriteDouble(P67);
      }
      if (P80 != 0D) {
        output.WriteRawTag(177, 3);
        output.WriteDouble(P80);
      }
      if (P85 != 0D) {
        output.WriteRawTag(185, 3);
        output.WriteDouble(P85);
      }
      if (P90 != 0D) {
        output.WriteRawTag(193, 3);
        output.WriteDouble(P90);
      }
      if (P95 != 0D) {
        output.WriteRawTag(201, 3);
        output.WriteDouble(P95);
      }
      if (P100 != 0D) {
        output.WriteRawTag(209, 3);
        output.WriteDouble(P100);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TestCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TestCount);
      }
      if (Mean != 0D) {
        size += 1 + 8;
      }
      if (Min != 0D) {
        size += 1 + 8;
      }
      if (Max != 0D) {
        size += 1 + 8;
      }
      if (Median != 0D) {
        size += 1 + 8;
      }
      if (LowerFence != 0D) {
        size += 1 + 8;
      }
      if (UpperFence != 0D) {
        size += 1 + 8;
      }
      if (Q1 != 0D) {
        size += 1 + 8;
      }
      if (Q3 != 0D) {
        size += 1 + 8;
      }
      if (InterquartileRange != 0D) {
        size += 1 + 8;
      }
      if (StandardError != 0D) {
        size += 1 + 8;
      }
      if (Variance != 0D) {
        size += 1 + 8;
      }
      if (StandardDeviation != 0D) {
        size += 1 + 8;
      }
      if (Skewness != 0D) {
        size += 1 + 8;
      }
      if (Kurtosis != 0D) {
        size += 1 + 8;
      }
      if (P0 != 0D) {
        size += 2 + 8;
      }
      if (P25 != 0D) {
        size += 2 + 8;
      }
      if (P50 != 0D) {
        size += 2 + 8;
      }
      if (P67 != 0D) {
        size += 2 + 8;
      }
      if (P80 != 0D) {
        size += 2 + 8;
      }
      if (P85 != 0D) {
        size += 2 + 8;
      }
      if (P90 != 0D) {
        size += 2 + 8;
      }
      if (P95 != 0D) {
        size += 2 + 8;
      }
      if (P100 != 0D) {
        size += 2 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Statistics other) {
      if (other == null) {
        return;
      }
      if (other.TestCount != 0) {
        TestCount = other.TestCount;
      }
      if (other.Mean != 0D) {
        Mean = other.Mean;
      }
      if (other.Min != 0D) {
        Min = other.Min;
      }
      if (other.Max != 0D) {
        Max = other.Max;
      }
      if (other.Median != 0D) {
        Median = other.Median;
      }
      if (other.LowerFence != 0D) {
        LowerFence = other.LowerFence;
      }
      if (other.UpperFence != 0D) {
        UpperFence = other.UpperFence;
      }
      if (other.Q1 != 0D) {
        Q1 = other.Q1;
      }
      if (other.Q3 != 0D) {
        Q3 = other.Q3;
      }
      if (other.InterquartileRange != 0D) {
        InterquartileRange = other.InterquartileRange;
      }
      if (other.StandardError != 0D) {
        StandardError = other.StandardError;
      }
      if (other.Variance != 0D) {
        Variance = other.Variance;
      }
      if (other.StandardDeviation != 0D) {
        StandardDeviation = other.StandardDeviation;
      }
      if (other.Skewness != 0D) {
        Skewness = other.Skewness;
      }
      if (other.Kurtosis != 0D) {
        Kurtosis = other.Kurtosis;
      }
      if (other.P0 != 0D) {
        P0 = other.P0;
      }
      if (other.P25 != 0D) {
        P25 = other.P25;
      }
      if (other.P50 != 0D) {
        P50 = other.P50;
      }
      if (other.P67 != 0D) {
        P67 = other.P67;
      }
      if (other.P80 != 0D) {
        P80 = other.P80;
      }
      if (other.P85 != 0D) {
        P85 = other.P85;
      }
      if (other.P90 != 0D) {
        P90 = other.P90;
      }
      if (other.P95 != 0D) {
        P95 = other.P95;
      }
      if (other.P100 != 0D) {
        P100 = other.P100;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TestCount = input.ReadInt32();
            break;
          }
          case 17: {
            Mean = input.ReadDouble();
            break;
          }
          case 25: {
            Min = input.ReadDouble();
            break;
          }
          case 33: {
            Max = input.ReadDouble();
            break;
          }
          case 41: {
            Median = input.ReadDouble();
            break;
          }
          case 49: {
            LowerFence = input.ReadDouble();
            break;
          }
          case 57: {
            UpperFence = input.ReadDouble();
            break;
          }
          case 65: {
            Q1 = input.ReadDouble();
            break;
          }
          case 73: {
            Q3 = input.ReadDouble();
            break;
          }
          case 81: {
            InterquartileRange = input.ReadDouble();
            break;
          }
          case 89: {
            StandardError = input.ReadDouble();
            break;
          }
          case 97: {
            Variance = input.ReadDouble();
            break;
          }
          case 105: {
            StandardDeviation = input.ReadDouble();
            break;
          }
          case 113: {
            Skewness = input.ReadDouble();
            break;
          }
          case 121: {
            Kurtosis = input.ReadDouble();
            break;
          }
          case 401: {
            P0 = input.ReadDouble();
            break;
          }
          case 409: {
            P25 = input.ReadDouble();
            break;
          }
          case 417: {
            P50 = input.ReadDouble();
            break;
          }
          case 425: {
            P67 = input.ReadDouble();
            break;
          }
          case 433: {
            P80 = input.ReadDouble();
            break;
          }
          case 441: {
            P85 = input.ReadDouble();
            break;
          }
          case 449: {
            P90 = input.ReadDouble();
            break;
          }
          case 457: {
            P95 = input.ReadDouble();
            break;
          }
          case 465: {
            P100 = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
